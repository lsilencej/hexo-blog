<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lsilencej の Blog</title>
  
  
  <link href="https://hexo.blog.lsilencej.top/atom.xml" rel="self"/>
  
  <link href="https://hexo.blog.lsilencej.top/"/>
  <updated>2023-07-14T15:27:27.408Z</updated>
  <id>https://hexo.blog.lsilencej.top/</id>
  
  <author>
    <name>lsilencej</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据科学与工程学院暑期夏令营实践项目 - 基于 GitHub 的博客网站</title>
    <link href="https://hexo.blog.lsilencej.top/2023/07/14/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E4%B8%8E%E5%B7%A5%E7%A8%8B%E5%AD%A6%E9%99%A2%E6%9A%91%E6%9C%9F%E5%A4%8F%E4%BB%A4%E8%90%A5%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE%20-%20%E5%9F%BA%E4%BA%8E%20GitHub%20%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/"/>
    <id>https://hexo.blog.lsilencej.top/2023/07/14/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E4%B8%8E%E5%B7%A5%E7%A8%8B%E5%AD%A6%E9%99%A2%E6%9A%91%E6%9C%9F%E5%A4%8F%E4%BB%A4%E8%90%A5%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE%20-%20%E5%9F%BA%E4%BA%8E%20GitHub%20%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/</id>
    <published>2023-07-14T12:39:45.000Z</published>
    <updated>2023-07-14T15:27:27.408Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据学院暑期夏令营实践项目总结"><a href="#数据学院暑期夏令营实践项目总结" class="headerlink" title="数据学院暑期夏令营实践项目总结"></a>数据学院暑期夏令营实践项目总结</h2><h3 id="博客框架选取"><a href="#博客框架选取" class="headerlink" title="博客框架选取"></a>博客框架选取</h3><p>静态博客采用的是 Hexo 框架：</p><ul><li>在所有静态博客框架中，最受欢迎的，莫过于 Hexo</li><li>正因如此， Hexo 具有丰富的主题以及插件供使用，对于个人博客的自定义更加个性化，可以根据个人审美来选择合适的主题，丰富的插件库也能实现大多数动态博客的功能</li><li>Hexo 使用 Node.js 来生成静态网页，部署速度非常快，而且提供简单的命令来进行博客的部署，容易上手</li><li>Hexo 的生态支持好，用户基数大，查找技术文档与问题解决方法方便</li></ul><h3 id="博客主题选取"><a href="#博客主题选取" class="headerlink" title="博客主题选取"></a>博客主题选取</h3><p><img lazyload="" src="/images/loading.svg" data-src="https://evan.beee.top/img/2023/07/13/9c86a5b52ca6745a8823caf5272e7b71.png"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://evan.beee.top/img/2023/05/27/4436bfd2e1ec42e22484724b79f3e52d.png"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://evan.beee.top/img/2023/05/27/8c72b631d419cf0bd1fd7ecd24eb5515.png"></p><p>博客主题采用的是 <a class="link" href="https://github.com/EvanNotFound/hexo-theme-redefine">Redefine <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，这是一款简洁、快速、纯净的 Hexo 主题，简洁，但不简单：</p><ul><li>主题美观，简洁</li><li>响应式设计，多端适配</li><li>配置简单，易于部署</li><li>采用 Font Awesome 图标</li><li>PJAX 加载</li><li>支持资源压缩，有效加快页面访问速度，优化 SEO 以及访问体验，可通过安装 <code>hexo-all-minifier</code> 插件实现</li><li>支持流程图显示，可通过安装 <code>hexo-filter-mermaid-diagrams</code> 插件实现</li><li>内置 SEO 优化，无需配置</li><li>支持暗黑模式切换</li><li>支持文章推荐功能</li><li>……</li></ul><p>我比较喜欢的简约的风格，虽说简约但不应该是单调空洞的，同时千篇一律的主题我也对此有些审美疲劳，Redefine 主题算是众多主题当中一眼能吸引到我的那个，以前也换过很多的主题，多少都有点不尽人意，需要自己通过修改大量主题代码进行功能的完善，虽说博客主要以文章为主，但一些功能不仅能让其美观度大增，同时也十分必要，可以优化读者的阅读体验，这款主题从页面设计到代码风格、文档等等都很符合于我的审美标准，虽然也有对少量主题代码的修改，但不影响我对其的高分评价</p><h3 id="页面设计"><a href="#页面设计" class="headerlink" title="页面设计"></a>页面设计</h3><h4 id="主页"><a href="#主页" class="headerlink" title="主页"></a>主页</h4><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2023/07/14/64b14b7f743a7.png" alt="image-20230714211959506"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2023/07/14/64b14b6d61ff6.png" alt="image-20230714211941631"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2023/07/14/64b14bcfdf637.png" alt="image-20230714212120367"></p><h4 id="文章页"><a href="#文章页" class="headerlink" title="文章页"></a>文章页</h4><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2023/07/14/64b14c2509973.png" alt="image-20230714212245609"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2023/07/14/64b14c5dac85b.png" alt="image-20230714212342322"></p><h4 id="归档页"><a href="#归档页" class="headerlink" title="归档页"></a>归档页</h4><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2023/07/14/64b14c7ae4945.png" alt="image-20230714212411601"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2023/07/14/64b14c8b8f431.png" alt="image-20230714212428255"></p><h4 id="标签页"><a href="#标签页" class="headerlink" title="标签页"></a>标签页</h4><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2023/07/14/64b14cb37d49d.png" alt="image-20230714212508183"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2023/07/14/64b14ca0df4ea.png" alt="image-20230714212449547"></p><h4 id="分类页"><a href="#分类页" class="headerlink" title="分类页"></a>分类页</h4><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2023/07/14/64b14cc6f1eac.png" alt="image-20230714212527660"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2023/07/14/64b14cd7308bd.png" alt="image-20230714212543859"></p><h4 id="关于页"><a href="#关于页" class="headerlink" title="关于页"></a>关于页</h4><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2023/07/14/64b14e3266fe5.png" alt="image-20230714213131069"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2023/07/14/64b14e3f6bd5b.png" alt="image-20230714213144073"></p><h4 id="友链页"><a href="#友链页" class="headerlink" title="友链页"></a>友链页</h4><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2023/07/14/64b14e717b082.png" alt="image-20230714213234185"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2023/07/14/64b14e847f70a.png" alt="image-20230714213253184"></p><h4 id="状态栏"><a href="#状态栏" class="headerlink" title="状态栏"></a>状态栏</h4><p>可根据页面滑动来收缩</p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2023/07/14/64b14d38b38a8.png" alt="image-20230714212721369"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2023/07/14/64b14d5a5bac5.png" alt="image-20230714212755090"></p><h4 id="功能条"><a href="#功能条" class="headerlink" title="功能条"></a>功能条</h4><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2023/07/14/64b14d711d800.png" alt="image-20230714212817890"></p><h4 id="扩展页面"><a href="#扩展页面" class="headerlink" title="扩展页面"></a>扩展页面</h4><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2023/07/14/64b14da61565f.png" alt="image-20230714212910555"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2023/07/14/64b14d99428f8.png" alt="image-20230714212857658"></p><h4 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h4><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2023/07/14/64b1528a5e9a1.png" alt="image-20230714215003079"></p><p>采用 mac 样式，同时自定义字体，自定义字体为 JetBrains Mono，即 JetBrains 系列编译器默认字体，用于页面风格统一，右上角复制按钮可进行快速复制</p><h3 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h3><h4 id="第一屏打字机动画"><a href="#第一屏打字机动画" class="headerlink" title="第一屏打字机动画"></a>第一屏打字机动画</h4><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2023/07/14/64b15055b80a1.png" alt="image-20230714214038414"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2023/07/14/64b1505b327b2.png" alt="image-20230714214043944"></p><p>可循环打字，设置打字速度，循环速度等等，采用的是 Typed.js 实现，主题提供的有自定义数组，一言等，这里重写了主题代码，增加了一个类似于一言的开源项目 <a class="link" href="https://github.com/QiQiWan/rainbow/">Rainbow <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，主要展示的是英文句子，通过调用接口显示句子</p><h4 id="音乐播放器"><a href="#音乐播放器" class="headerlink" title="音乐播放器"></a>音乐播放器</h4><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2023/07/14/64b14eee219ae.png" alt="image-20230714213438954"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2023/07/14/64b14ef80df32.png" alt="image-20230714213448869"></p><p>音乐播放器采用的是 APlayer 进行实现，这是一个 HTML 音乐播放器，可以实现博客全站音乐播放，mini 模式很好的与右侧工具栏进行结合，并不显得突兀，音乐文件用的是服务器上的文件，也可保存在本地通过相对路径引用</p><h4 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h4><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2023/07/14/64b1518174cf9.png" alt="image-20230714214538140"></p><p>通过安装 <code>hexo-generator-searchdb</code> 插件实现搜索功能，用于进行本地文档的快速查找</p><h4 id="文章字数-amp-amp-阅读时间统计"><a href="#文章字数-amp-amp-阅读时间统计" class="headerlink" title="文章字数 && 阅读时间统计"></a>文章字数 &amp;&amp; 阅读时间统计</h4><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2023/07/14/64b152281f2f1.png" alt="image-20230714214824884"></p><p>通过安装 <code>hexo-wordcount</code> 插件实现统计功能，用于对文章字数和阅读实践进行统计</p><h4 id="版权声明"><a href="#版权声明" class="headerlink" title="版权声明"></a>版权声明</h4><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2023/07/14/64b15381bcdb0.png" alt="image-20230714215410514"></p><h4 id="文章推荐"><a href="#文章推荐" class="headerlink" title="文章推荐"></a>文章推荐</h4><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2023/07/14/64b153889ba25.png" alt="image-20230714215417398"></p><p>通过 npm 安装 <code>nodejieba</code> 模块，自动根据文章关键字推荐相关文章</p><h4 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h4><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2023/07/14/64b153cac309b.png" alt="image-20230714215523570"></p><p>主题提供多种评论系统支持，例如：Waline、Gitalk、Twikoo、Giscus，本站采用的是 Waline，通过官方文档提供的 github 模板仓库将服务端部署在 Vercel 上，由于不可抗力因素，国内无法访问 Vercel 默认域名，故通过自定义域名进行域名解析</p><h4 id="Mathjax-数学公式"><a href="#Mathjax-数学公式" class="headerlink" title="Mathjax 数学公式"></a>Mathjax 数学公式</h4><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2023/07/14/64b15580900de.png" alt="image-20230714220241336"></p><p>通过安装 <code>hexo-filter-mathjax</code> 插件提供 Mathjax 数学公式支持，可以在文章中使用 LaTeX 语法书写数学公式</p><h4 id="功能总结"><a href="#功能总结" class="headerlink" title="功能总结"></a>功能总结</h4><p>Redefine 给我的惊喜很多，它提供了许多功能，但却不繁杂，可自定义程度高，同时很轻量级，整站的加载速度也很快，受限于篇幅，以上功能只是该主题提供的部分功能，还有很多功能并未进行描述，例如 Mermaid 流程图、提供的多种写作模块、资源压缩、CDN 加速、瀑布流相册页面以及说说页面等等，这些功能可以通过访问官方文档进行配置查看：<a class="link" href="https://redefine-docs.ohevan.com/">https://redefine-docs.ohevan.com <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h3 id="配置部署"><a href="#配置部署" class="headerlink" title="配置部署"></a>配置部署</h3><h4 id="配置部署-1"><a href="#配置部署-1" class="headerlink" title="配置部署"></a>配置部署</h4><p>对于主题首先是进行了一个基本配置的自定义修改，以上篇幅大致提及，例如：代码块字体自定义，状态栏自定义等等</p><p>接着便是对主题源码的一些修改，例如打字机在原有一言的基础上增加 Rainbow 项目支持等等</p><p>评论系统前文也有提及，fork 了 Waline 官方提供的模板仓库在 Vercel 进行部署，同时进行自定义域名以便国内能访问</p><p>博客的图片均存在云服务器自行搭建的图床上，文章通过 typora 编写，通过配置 picgo 将图片上传至图片</p><p>博客整体部署在 github page 上，分为两个仓库，一个是放置博客源码的仓库，一个是放置博客页面的仓库，采用 RSA 算法生成密钥进行两个仓库的联通部署，同时编写 github action 配置文件来实现自动化博客部署，防止因环境更换原因无法更新博客，需要重新安装环境，通过监听源码仓库的 push 操作来触发自动部署脚本，将页面部署到博客页面仓库</p><div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Hexo</span> <span class="string">Auto</span> <span class="string">Deploy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">GIT_USER:</span> <span class="string">lsilencej</span></span><br><span class="line">  <span class="attr">GIT_EMAIL:</span> <span class="string">a2310019764@gmail.com</span></span><br><span class="line">  <span class="attr">GIT_DEPLOY_REPO:</span> <span class="string">lsilencej/hexo-blog</span></span><br><span class="line">  <span class="attr">GIT_DEPLOY_BRANCH:</span> <span class="string">gh-pages</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Build</span> <span class="string">on</span> <span class="string">node</span> <span class="string">${{</span> <span class="string">matrix.node_version</span> <span class="string">}}</span> <span class="string">and</span> <span class="string">${{</span> <span class="string">matrix.os</span> <span class="string">}}</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">${{</span> <span class="string">matrix.os</span> <span class="string">}}</span></span><br><span class="line">    <span class="attr">if:</span> <span class="string">github.event.repository.owner.id</span> <span class="string">==</span> <span class="string">github.event.sender.id</span></span><br><span class="line">    <span class="attr">strategy:</span></span><br><span class="line">      <span class="attr">matrix:</span></span><br><span class="line">        <span class="attr">os:</span> [<span class="string">ubuntu-latest</span>]</span><br><span class="line">        <span class="attr">node_version:</span> [<span class="number">18.</span><span class="string">x</span>]</span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">submodules:</span> <span class="string">recursive</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">Deploy</span> <span class="string">Repo</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">repository:</span> <span class="string">${{</span> <span class="string">env.GIT_DEPLOY_REPO</span> <span class="string">}}</span></span><br><span class="line">          <span class="attr">ref:</span> <span class="string">${{</span> <span class="string">env.GIT_DEPLOY_BRANCH</span> <span class="string">}}</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">.deploy.git</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Use</span> <span class="string">Node.js</span> <span class="string">${{</span> <span class="string">matrix.node_version</span> <span class="string">}}</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">${{</span> <span class="string">matrix.node_version</span> <span class="string">}}</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Configure</span> <span class="string">Environment</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">HEXO_DEPLOY:</span> <span class="string">${{</span> <span class="string">secrets.HEXO_DEPLOY</span> <span class="string">}}</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          sudo timedatectl set-timezone "Asia/Shanghai"</span></span><br><span class="line"><span class="string">          mkdir -p ~/.ssh/</span></span><br><span class="line"><span class="string">          echo "$HEXO_DEPLOY" &gt; ~/.ssh/id_rsa</span></span><br><span class="line"><span class="string">          chmod 600 ~/.ssh/id_rsa</span></span><br><span class="line"><span class="string">          ssh-keyscan -t rsa github.com &gt;&gt; ~/.ssh/know_hosts</span></span><br><span class="line"><span class="string">          git config --global user.name $GIT_USER</span></span><br><span class="line"><span class="string">          git config --global user.email $GIT_EMAIL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Dependencies</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          npm install hexo-cli -g</span></span><br><span class="line"><span class="string">          npm install</span></span><br><span class="line"><span class="string">          npm install hexo-generator-searchdb hexo-wordcount @node-rs/jieba hexo-filter-mermaid-diagrams hexo-all-minifier hexo-filter-mathjax hexo-deployer-git --save</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">Hexo</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          npm run clean</span></span><br><span class="line"><span class="string">          npm run build</span></span><br><span class="line"><span class="string">          npm run deploy</span></span><br><span class="line"><span class="string"></span>          </span><br></pre></td></tr></table></figure></div><p>访问方面，采用了自定义域名，由于 Cloudflare 的 DNS 服务器速度全球第一，故域名 DNS 服务器采用的 Cloudflare 的 DNS 服务器，通过 Cloudflare 进行 DNS 解析</p><h4 id="遇到的问题及解决方法"><a href="#遇到的问题及解决方法" class="headerlink" title="遇到的问题及解决方法"></a>遇到的问题及解决方法</h4><p>由于先前已经搭建过 Hexo，有相关经验，故部署方面问题较少，主要是域名方面问题</p><p>首先采用的不是个人站点的 github.io，github 提供了三种 page 服务：</p><ul><li>一种是个人的站点，即一个用户只能拥有一个 github.io 的站点，也就是只能拥有一个 &lt;用户名&gt;.github.io 的仓库</li><li>一种是企业站点</li><li>另一种是项目站点，项目站点不限制数量，且 page 可以无限开，开了 page 的话访问域名为 &lt;用户名&gt;.github.io/&lt;仓库名&gt;</li></ul><p>我采用的是项目站点的方式，开始遇到的问题是自定义域名在每次部署后会被覆盖，经过查询官方文档得知自定义域名应在源码 source 文件目录下添加 CNAME 文件：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2023/07/14/64b15de7eff8b.png" alt="image-20230714223832727"></p><p>其次便是部署上的网页无法访问 css、js 这些静态文件，后面也发现了问题所在，问题在于根目录下的 hexo 配置文件，需要对 url 进行正确配置，配置为自定义域名：</p><div class="highlight-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="string">https://hexo.blog.lsilencej.top</span></span><br></pre></td></tr></table></figure></div><p>还有一个问题也是域名的问题，我采用的自定义域名为 hexo.blog.lsilencej.top，使用 Cloudflare CDN 后一直访问不了网站，显示 SSL 失效，经过多方查询资料后得知 Cloudflare 的 CDN 已经提供了一层 SSL 证书，在 DNS 开启橙色云后生效，而边缘证书只对 <code>*.demo.com demo.com</code> 生效，对于 <code>*.*.demo.com</code> 无法进行 SSL 代理，除非购买商业版</p>]]></content>
    
    
    <summary type="html">华东师范大学数据学院暑期夏令营实践项目</summary>
    
    
    
    <category term="博客建站" scheme="https://hexo.blog.lsilencej.top/categories/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%99/"/>
    
    
    <category term="Hexo" scheme="https://hexo.blog.lsilencej.top/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>国产开源硬件安全密钥——Canokey Pigeon 开箱评测</title>
    <link href="https://hexo.blog.lsilencej.top/2023/04/11/%E5%9B%BD%E4%BA%A7%E5%BC%80%E6%BA%90%E7%A1%AC%E4%BB%B6%E5%AE%89%E5%85%A8%E5%AF%86%E9%92%A5%E2%80%94%E2%80%94Canokey%20Pigeon%20%E5%BC%80%E7%AE%B1%E8%AF%84%E6%B5%8B-canokey/"/>
    <id>https://hexo.blog.lsilencej.top/2023/04/11/%E5%9B%BD%E4%BA%A7%E5%BC%80%E6%BA%90%E7%A1%AC%E4%BB%B6%E5%AE%89%E5%85%A8%E5%AF%86%E9%92%A5%E2%80%94%E2%80%94Canokey%20Pigeon%20%E5%BC%80%E7%AE%B1%E8%AF%84%E6%B5%8B-canokey/</id>
    <published>2023-04-10T17:37:05.534Z</published>
    <updated>2023-04-11T16:25:41.383Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前没赶上 cf 优惠券的活动，然后又一直心水 Yubikey，奈何国内的价格太贵，闲鱼的价格也一直不降反涨，无意间发现了国产开源硬件 Canokey 的存在，似乎可以平替 Yubikey，在清华开源站中也可以查到相关的资料：<a class="link" href="https://tuna.moe/event/2021/canokey/">金枪鱼之夜：从 YutriKey 到 CanoKey <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h2 id="简单开箱"><a href="#简单开箱" class="headerlink" title="简单开箱"></a>简单开箱</h2><p>目前提供两种商业产品和两种开发产品，均使用的相同内核：<a class="link" href="https://github.com/canokeys/canokey-core">canokey-core <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>我这款是 Canokey Pigeon，经典鸽子</p><p>开箱开箱：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2023/04/09/6432da252b912.jpg" alt="包装"></p><p>样子大概长这样：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2023/04/09/6432da6679c47.jpg" alt="反面"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2023/04/09/6432db2d2e17d.jpg" alt="正面"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2023/04/10/64338d2e91f92.jpg" alt="插入亮灯"></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Canokey 支持的协议很多，类似与 Yubikey 5 NFC，支持的协议如下：</p><ul><li>FIDO2 / U2F</li><li>OpenPGP</li><li>PIV</li><li>NDEF</li><li>OATH（TOTP、HTOP）</li></ul><p>对于平替 Yubikey 的需求，协议方面是足够了，但是由于硬件方面的问题，NFC 的实现效果可能不尽人意，具体可以参照以下两个 discussion：</p><ul><li><a class="link" href="https://github.com/canokeys/canokey-pigeon/discussions/4">对 NFC 的一些说明和建议 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li><li><a class="link" href="https://github.com/canokeys/canokey-pigeon/discussions/6">NFC 修复指南 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li></ul><p><a class="link" href="https://docs.canokeys.org/">官方文档 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>中也有各个协议的详细说明，同时由于协议互通，Yubikey 的一些配置文档也通用（）</p><h2 id="相关名词解释"><a href="#相关名词解释" class="headerlink" title="相关名词解释"></a>相关名词解释</h2><p>下面用容易理解的话对相关名词进行解释，目的是为了让读者有一个大致的了解，具体实现原理或详细信息等可以自行查找相关资料了解</p><h3 id="非对称加密、对称加密"><a href="#非对称加密、对称加密" class="headerlink" title="非对称加密、对称加密"></a>非对称加密、对称加密</h3><p>简单理解就是非对称加密是通过算法生成一对密钥对，分为公钥和私钥，公钥用来加密，私钥用来解密，对称加密则是一个钥匙既可以加密也可以解密</p><p>当然理论上公钥和私钥是可以互换的，但是由于算法会偏向于一方，使得双方长度不相同，一般来说私钥长度较长，长度不同使得破解公钥的难度小于破解私钥的难度，基于这方面原因公钥和私钥是不可以互换的</p><h3 id="2FA-x2F-MFA"><a href="#2FA-x2F-MFA" class="headerlink" title="2FA / MFA"></a>2FA / MFA</h3><p>2FA：<strong>Two-Factor authentication</strong>，双因素认证</p><p>MFA：<strong>Muti-Factor authentication</strong>，多因素认证</p><p>为了让用户登录网站时不单单将安全托付于单一的密码上，开发者选择了使用额外因素的方式来保护用户账号安全，防止因为密码泄露而整个账户遭到泄露</p><h3 id="OATH、OTP"><a href="#OATH、OTP" class="headerlink" title="OATH、OTP"></a>OATH、OTP</h3><p>OATH：<strong>Open Authentication</strong>，开放认证</p><p>OTP：<strong>One-Time Password</strong>，一次性密码</p><p>OTP 是开发者使用两步验证最常用的手段，顾名思义一次性密码只能使用一次，OTP 分为以下两类：</p><ul><li>TOTP：<strong>Time-based One-Time Password</strong>，基于时间戳的一次性密码</li><li>HOTP：<strong>HMAC-based One-Time Password</strong>，基于 HMAC 算法加密的一次性密码</li></ul><p>大致原理是客户端和服务器端均有一个共同密钥，客户端将共同密钥与时间因子经过特定的算法生成代码发送给服务器，服务器端也使用共同密钥与当前的时间因子通过相同的算法生成代码，将两个代码进行比对，如果相同则认证成功，当然如果你把密钥给别人，别人也是能和你算出同样的结果的（</p><h3 id="FIDO、FIDO2"><a href="#FIDO、FIDO2" class="headerlink" title="FIDO、FIDO2"></a>FIDO、FIDO2</h3><p>FIDO 联盟制定了 FIDO 标准，为了统一由各家 2FA 带来的差异而设立的，毕竟谁也不想换一个 2FA 验证登录就需要多装一个驱动之类的麻烦事，于是 FIDO 标准为了改良传统的 2FA 的体验出现了</p><p>FIDO2 是新一代的 FIDO 标准</p><h3 id="U2F、UAF"><a href="#U2F、UAF" class="headerlink" title="U2F、UAF"></a>U2F、UAF</h3><p>U2F 标准可以认为是 FIDO 标准之一，它是制作类似于 Yubikey / Canokey 之类硬件的标准，可以是 USB 形态的，也可以是 NFC 形态，简单来说是物理形态，免去了用户需要安装第三方驱动或者输入 OTP 代码进行认证的麻烦</p><p>既然有物理形态，那么就有非物理形态，UAF 则是通过指纹、语音、虹膜等进行认证的方案</p><h3 id="WebAuthn"><a href="#WebAuthn" class="headerlink" title="WebAuthn"></a>WebAuthn</h3><p>WebAuthn 标准是 FIDO2 标准的一部分，FIDO2 相比于 U2F 增加了单因素认证的功能，这便是 WebAuthn 标准，这意味着可以实现真正的免密登录，只需要插入物理设备或者通过生物特征进行认证即可</p><h3 id="PGP、OpenPGP、GnuPG"><a href="#PGP、OpenPGP、GnuPG" class="headerlink" title="PGP、OpenPGP、GnuPG"></a>PGP、OpenPGP、GnuPG</h3><p>PGP 全称是 Pretty Good Privacy，是一个被设计用来加密信息，保护隐私的软件</p><p>OpenPGP 是一个标准，现在提到的 PGP 基本上是指 OpenPGP</p><p>OpenPGP 是在 PGP 基础上定义的开放标准，GnuPG 则是对 OpenPGP 标准的完备实现</p><p>OpenPGP 支持多种算法，其中非对称加密的 RSA 和 ECC 用的比较多，RSA 兼容性好，ECC 体积小、速度快、具有更好的安全性</p><p>具体实现原理可以自行搜索，这里不再赘述，对于安全性，经过这么多年的检验，对于个人信息保护还是有保证的</p><p>OpenPGP 可以用来给消息、邮件之类的加解密，git commit 认证，ssh 免验证登录等</p><h3 id="PIV"><a href="#PIV" class="headerlink" title="PIV"></a>PIV</h3><p>PIV 即个人身份验证，是美国政府标准，使用智能卡存储用于签名 / 加密的密钥，主要用于非 Web 场景，可以用来进行验证、签名、加密、认证等</p><h3 id="NDEF"><a href="#NDEF" class="headerlink" title="NDEF"></a>NDEF</h3><p>NDEF：<strong>NFC Data Exchange Format</strong>，即 NFC 数据交换格式</p><h2 id="Canokey-使用"><a href="#Canokey-使用" class="headerlink" title="Canokey 使用"></a>Canokey 使用</h2><h3 id="Web-Console"><a href="#Web-Console" class="headerlink" title="Web Console"></a>Web Console</h3><p>新版本的 Web Console 支持的功能已经变得很多了，大部分功能直接可以使用</p><p>Web Console 必须使用支持 <strong>WebUSB</strong> 的浏览器，例如 chromium 系浏览器，Firefox 不支持</p><p>插入 Canokey 访问 <a class="link" href="https://console.canokeys.org/">https://console.canokeys.org <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 即可，点击右上角的刷新按钮对 Canokey 进行读取</p><p>先进入设置界面，输入自定义 PIN：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2023/04/10/64338d4f2ee18.png" alt="输入自定义 PIN"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2023/04/10/64338fb50e768.png" alt="侧边栏设置"></p><p>相关设置如下，可以查看 Canokey 的相关信息，以及对相关操作做一些简单设置和重置</p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2023/04/10/64338e2e84d1f.png" alt="设置"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2023/04/10/64338e482ac90.png" alt="设置"></p><p>注意：上述修改的 PIN 仅仅为 Admin panel 的 PIN，与下方所有的 PIN 没有任何关系</p><h3 id="OTP"><a href="#OTP" class="headerlink" title="OTP"></a>OTP</h3><p>先来介绍如何在 Canokey 中使用 OTP，由于现在绝大多数平台支持的是 TOTP，本文仅介绍 TOTP</p><p>类似于 Google Authenticator，Aegis 等两步验证软件，Canokey 可以直接在 Web Console 中进行添加，并且可以单独为每个 TOTP 设置触摸策略（最多可以保存 100 个）：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2023/04/10/643390f1592fb.png" alt="OTP 设置"></p><p>当然使用 ykman 4.0 进行配置也是 ok 的，具体操作参考<a class="link" href="https://docs.canokeys.org/userguide/oath/">官方文档 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>对于 5.x 版本的 Yubico Authenticator，可以使用 custom reader 直接进行配置：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2023/04/10/6433926af1c03.png" alt="custom reader"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2023/04/10/6433929d4b05d.png" alt="image-20230410123748758"></p><p>历史版本可以在这里下载：<a class="link" href="https://developers.yubico.com/yubioath-flutter/Releases/">https://developers.yubico.com/yubioath-flutter/Releases/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>Android 只有 6.x 的版本，虽然移除了 custom reader 的选项，不能通过 type-c 接口进行识别，但通过 NFC 还是能够进行绑定的，开始识别率感人，但是掌握了识别的位置还是能很快识别成功的（手机上禁止截屏，这里就不放图了）</p><p>官方表示以后也有开发专属 app 的计划，敬请期待吧</p><h3 id="FIDO2-x2F-U2F"><a href="#FIDO2-x2F-U2F" class="headerlink" title="FIDO2 / U2F"></a>FIDO2 / U2F</h3><p>WebAuthn 测试网站：<a class="link" href="https://webauthn.io/">https://webauthn.io/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2023/04/10/643397a8a5e6a.png" alt="测试"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2023/04/10/643397ad4b1ce.png" alt="测试"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2023/04/10/643397d9183bf.png" alt="测试"></p><p>使用方法很简单，插入 Canokey 在支持的网站上打开两步验证后选择硬件密钥即可，支持的网站例如：Microsoft、Google、Facebook 等，密钥将会自动注册并要求输入 PIN，下次输入 PIN 就可作为二步验证登录了</p><p>目前 Microsoft 账户支持使用硬件密钥实现单因素登录，即无需密码直接登录，可以进入账户的<a class="link" href="https://account.live.com/proofs/manage/additional">其他安全选项 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>部分进行添加</p><p>支持网站列表：<a class="link" href="https://2fa.directory/int/">https://2fa.directory/int/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h3 id="OpenPGP"><a href="#OpenPGP" class="headerlink" title="OpenPGP"></a>OpenPGP</h3><p>除了上述的 TOP 和 FIDO2，这部分算是最主要的应用场景，和 Yubikey 一样，Canokey 同样提供三个子密钥插槽，分别用作签名、认证和解密，对于密钥生成的操作也类似，大致就是一份主密钥，三份子密钥，主密钥只保留验证功能，其他功能使用子密钥</p><p>以下操作均在 Win 下进行，使用的工具为 <a class="link" href="https://gpg4win.org/download.html">Gpg4Win <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h4 id="相关指令"><a href="#相关指令" class="headerlink" title="相关指令"></a>相关指令</h4><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">card related</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">try below to make sure gpg works with canokey</span></span><br><span class="line">gpg --card-status</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">use this <span class="keyword">for</span> editting card info and config</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">and/or generating keys</span></span><br><span class="line">gpg --edit-card</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">generate key</span></span><br><span class="line">gpg --expert --full-generate-key</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">get key infos</span></span><br><span class="line">gpg --list-keys --with-fingerprint --with-subkey-fingerprint [keyid or user id]</span><br><span class="line">gpg --list-keys --with-keygrip [keyid or user id]</span><br><span class="line">gpg --list-sigs [keyid or user id]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">edit key</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">add uid/subkey <span class="keyword">in</span> the interactive shell</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">keytocard or addcardkey</span></span><br><span class="line">gpg --edit-key &lt;keyid or user id&gt;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">import/export key</span></span><br><span class="line">gpg --import file</span><br><span class="line">gpg --armor --output file --export &lt;keyid or user id&gt;</span><br><span class="line">gpg --armor --output file --export-secret-keys &lt;keyid or user id&gt;</span><br><span class="line">gpg --delete-keys &lt;keyid or user id&gt;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">sign and verify</span></span><br><span class="line">gpg --armor --sign file</span><br><span class="line">gpg --sign-key --ask-cert-level &lt;key id&gt;</span><br><span class="line">gpg --armor --detach-sign file</span><br><span class="line">gpg --clear-sign file</span><br><span class="line">gpg --verify file.asc</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">encrypt and decrypt</span></span><br><span class="line">gpg --armor --encrypt --recipient &lt;keyid or user id&gt;</span><br><span class="line">gpg --decrypt file</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">misc</span></span><br><span class="line">gpgconf --kill gpg-agent</span><br><span class="line">gpg-connect-agent reloadagent /bye</span><br><span class="line">gpgconf --list-dirs agent-socket</span><br><span class="line">gpgconf --list-dirs agent-extra-socket</span><br><span class="line">gpgconf --list-dirs agent-ssh-socket</span><br></pre></td></tr></table></figure></div><h4 id="生成主密钥"><a href="#生成主密钥" class="headerlink" title="生成主密钥"></a>生成主密钥</h4><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">gpg --expert --full-gen-key # 生成主密钥</span><br><span class="line"></span><br><span class="line">gpg (GnuPG) 2.4.0; Copyright (C) 2021 g10 Code GmbH</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line"></span><br><span class="line">Please select what kind of key you want:</span><br><span class="line">   (1) RSA and RSA</span><br><span class="line">   (2) DSA and Elgamal</span><br><span class="line">   (3) DSA (sign only)</span><br><span class="line">   (4) RSA (sign only)</span><br><span class="line">   (7) DSA (set your own capabilities)</span><br><span class="line">   (8) RSA (set your own capabilities)</span><br><span class="line">   (9) ECC (sign and encrypt) *default*</span><br><span class="line">  (10) ECC (sign only)</span><br><span class="line">  (11) ECC (set your own capabilities)</span><br><span class="line">  (13) Existing key</span><br><span class="line">  (14) Existing key from card</span><br><span class="line">Your selection? 11 # 这里使用 ECC 算法，注意括号中的内容为自行设置密钥功能</span><br><span class="line"></span><br><span class="line">Possible actions for this ECC key: Sign Certify Authenticate</span><br><span class="line">Current allowed actions: Sign Certify # 目前主密钥拥有 Sign 和 Certify 功能，主密钥只需要 Certify 功能即可，其他功能使用子密钥</span><br><span class="line"></span><br><span class="line">   (S) Toggle the sign capability</span><br><span class="line">   (A) Toggle the authenticate capability</span><br><span class="line">   (Q) Finished</span><br><span class="line"></span><br><span class="line">Your selection? s # 取消 Sign 功能</span><br><span class="line"></span><br><span class="line">Possible actions for this ECC key: Sign Certify Authenticate</span><br><span class="line">Current allowed actions: Certify</span><br><span class="line"></span><br><span class="line">   (S) Toggle the sign capability</span><br><span class="line">   (A) Toggle the authenticate capability</span><br><span class="line">   (Q) Finished</span><br><span class="line"></span><br><span class="line">Your selection? q # 退出</span><br><span class="line"></span><br><span class="line">Please select which elliptic curve you want: # 选择用于签发密钥的椭圆曲线</span><br><span class="line">   (1) Curve 25519 *default*</span><br><span class="line">   (2) Curve 448</span><br><span class="line">   (3) NIST P-256</span><br><span class="line">   (4) NIST P-384</span><br><span class="line">   (5) NIST P-521</span><br><span class="line">   (6) Brainpool P-256</span><br><span class="line">   (7) Brainpool P-384</span><br><span class="line">   (8) Brainpool P-512</span><br><span class="line">   (9) secp256k1</span><br><span class="line">Your selection? 1 # 25519椭圆曲线是最快的椭圆曲线之一，没有专利，是公有领域的产品</span><br><span class="line"></span><br><span class="line">Please specify how long the key should be valid. # 设置主密钥有效期限</span><br><span class="line">         0 = key does not expire</span><br><span class="line">      &lt;n&gt;  = key expires in n days</span><br><span class="line">      &lt;n&gt;w = key expires in n weeks</span><br><span class="line">      &lt;n&gt;m = key expires in n months</span><br><span class="line">      &lt;n&gt;y = key expires in n years</span><br><span class="line">Key is valid for? (0) 0 # 主密钥永不过期</span><br><span class="line">Key does not expire at all</span><br><span class="line">Is this correct? (y/N) y # 确认</span><br><span class="line"></span><br><span class="line">GnuPG needs to construct a user ID to identify your key. # 自行填写个人信息，认证用</span><br><span class="line">Real name: XXXXXX</span><br><span class="line">Email address: XXXXXX@XXX.com</span><br><span class="line">Comment: # 可以不填</span><br><span class="line">You selected this USER-ID:</span><br><span class="line">    "XXXXXX &lt;XXXXXX@XXX.com&gt;"</span><br><span class="line">    </span><br><span class="line">Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? o # 确认</span><br><span class="line"></span><br><span class="line">We need to generate a lot of random bytes. It is a good idea to perform</span><br><span class="line">some other action (type on the keyboard, move the mouse, utilize the</span><br><span class="line">disks) during the prime generation; this gives the random number</span><br><span class="line">generator a better chance to gain enough entropy.</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Windows 下弹出窗口输入密码，注意保存</span></span><br><span class="line">gpg: directory 'C:\\Users\\lsilencej\\AppData\\Roaming\\gnupg\\openpgp-revocs.d' created</span><br><span class="line">gpg: revocation certificate stored as 'C:\\Users\\lsilencej\\AppData\\Roaming\\gnupg\\openpgp-revocs.d\\D6B340E4E2AF36A9A5978360A12123716A6F3444.rev' # 自动生成吊销证书，注意保存</span><br><span class="line">public and secret key created and signed.</span><br><span class="line"></span><br><span class="line">pub   ed25519 2023-04-10 [C]</span><br><span class="line">      XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX # 公钥</span><br><span class="line">uid                      XXXXXX &lt;XXXXXX@XXX.com&gt; # uid</span><br></pre></td></tr></table></figure></div><h4 id="生成子密钥"><a href="#生成子密钥" class="headerlink" title="生成子密钥"></a>生成子密钥</h4><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">gpg --fingerprint --keyid-format long -K # 查看目前的密钥</span><br><span class="line"> </span><br><span class="line">C:\Users\lsilencej\AppData\Roaming\gnupg\pubring.kbx</span><br><span class="line">----------------------------------------------------</span><br><span class="line">sec   ed25519/A12123716A6F3444 2023-04-10 [C]</span><br><span class="line">      Key fingerprint = XXXX XXXX XXXX XXXX XXXX  XXXX XXXX XXXX XXXX XXXX # 密钥</span><br><span class="line">uid                 [ultimate] XXXXXX &lt;XXXXXX@XXX.com&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成不同功能的子密钥，&lt;fingerprint&gt; 为上面查看的密钥，2y 表示有效期为 2 年，不填写默认不过期</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注意将密钥中间的空格去掉，每次操作都会弹出窗口，需要输入之前输入的密码</span></span><br><span class="line">gpg --quick-add-key &lt;fingerprint&gt; cv25519 encr 2y # 注意：由于 ECC 实现的原因，加密算法和其余两个功能不一样</span><br><span class="line">gpg --quick-add-key &lt;fingerprint&gt; ed25519 auth 2y</span><br><span class="line">gpg --quick-add-key &lt;fingerprint&gt; ed25519 sign 2y</span><br><span class="line"></span><br><span class="line">gpg --fingerprint --keyid-format long -K # 查看目前的密钥</span><br><span class="line">C:\Users\lsilencej\AppData\Roaming\gnupg\pubring.kbx</span><br><span class="line">----------------------------------------------------</span><br><span class="line">sec   ed25519/A12123716A6F3444 2023-04-10 [C]</span><br><span class="line">      Key fingerprint = XXXX XXXX XXXX XXXX XXXX  XXXX XXXX XXXX XXXX XXXX</span><br><span class="line">uid                 [ultimate] XXXXXX &lt;XXXXXX@XXX.com&gt;</span><br><span class="line">ssb   cv25519/B397DE74ADB1461B 2023-04-10 [E] [expires: 2025-04-09]</span><br><span class="line">ssb   ed25519/96D21F146844DE42 2023-04-10 [A] [expires: 2025-04-09]</span><br><span class="line">ssb   ed25519/F9BBC38695CD8E36 2023-04-10 [S] [expires: 2025-04-09]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">加密密钥用于加密文件和信息，签名密钥用于给自己信息签名，认证密钥主要用于 ssh 登录</span></span><br></pre></td></tr></table></figure></div><h4 id="UID-设置"><a href="#UID-设置" class="headerlink" title="UID 设置"></a>UID 设置</h4><p>UID 可以用于 git commit 签名，这也是 github 力推的 <strong>verified signature</strong></p><p>可以单独添加 git 使用的 UID：</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gpg --quick-add-uid &lt;fingerprint&gt; 'XXXXXX &lt;XXXXXX@users.noreply.github.com&gt;' # 开启了 github 邮箱隐私保护</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">gpg 会将最近添加的 UID 作为主 UID，也可以通过下面的命令手动指定，注意邮箱用 &lt;&gt; 包括</span></span><br><span class="line">gpg --quick-set-primary-uid &lt;fingerprint&gt; 'XXXXXX &lt;XXXXXX@users.noreply.github.com&gt;'</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可以通过这条命令对子密钥或 uid 进行修改，将 <span class="built_in">id</span> 替换为相应位置</span></span><br><span class="line">gpg --edit-key &lt;keyid or user id&gt;</span><br></pre></td></tr></table></figure></div><h4 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h4><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">导出公钥</span></span><br><span class="line">gpg -ao public-key.pub --export A12123716A6F3444 # 后面的为 keyid，可以列出所有密钥查看</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">私钥备份均以 ! 结尾，表示只导出这一个私钥，否则默认导出全部私钥</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">导出主密钥</span></span><br><span class="line">gpg -ao sec-key.asc --export-secret-key A12123716A6F3444!</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">导出子密钥</span></span><br><span class="line">gpg -ao sign-key.asc --export-secret-key F9BBC38695CD8E36!</span><br><span class="line">gpg -ao auth-key.asc --export-secret-key 96D21F146844DE42!</span><br><span class="line">gpg -ao encr-key.asc --export-secret-key B397DE74ADB1461B!</span><br></pre></td></tr></table></figure></div><p>备份策略：</p><ul><li>主密钥只保留一份，建议备份在一个全盘加密的U盘中，然后放在一个绝对安全的地方</li><li>子密钥可以复制多份，通过U盘导入各个设备，专密专用，日常使用推荐用智能卡（比如 Yubikey），还能免去每次输密码的麻烦</li><li>撤销凭证可以和主密钥放在一起备份一份， 另外单独备份一份（这样丢失密钥，起码还可以撤销）</li></ul><h4 id="导入-Canokey"><a href="#导入-Canokey" class="headerlink" title="导入 Canokey"></a>导入 Canokey</h4><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">gpg --card-status # 查看智能卡设备状态</span><br><span class="line">gpg --edit-card # 编辑智能卡信息</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">gpg/card&gt; </span><span class="language-bash">admin <span class="comment"># 进入 admin</span></span></span><br><span class="line">Admin commands are allowed</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">gpg/card&gt; </span><span class="language-bash">passwd <span class="comment"># 修改 PIN（默认 123456）以及 Admin PIN（默认 12345678），密码忘记只能重置</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下面写入 Canokey，注意操作不可逆，且本地密钥会删除，请做好备份再操作</span></span><br><span class="line">gpg --fingerprint --keyid-format long -K # 查看主密钥 keyid</span><br><span class="line"></span><br><span class="line">gpg --edit-key A12123716A6F3444 # 为上述命令显示的 sec-key id</span><br><span class="line"><span class="meta prompt_">  </span></span><br><span class="line"><span class="meta prompt_">gpg&gt; </span><span class="language-bash">key 1 <span class="comment"># 选中第一个子密钥</span></span>   </span><br><span class="line"><span class="meta prompt_">gpg&gt; </span><span class="language-bash">keytocard <span class="comment"># 写入 card</span></span></span><br><span class="line"><span class="meta prompt_">gpg&gt; </span><span class="language-bash">key 1 <span class="comment"># 取消选中</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">gpg&gt; </span><span class="language-bash">key 2</span></span><br><span class="line"><span class="meta prompt_">gpg&gt; </span><span class="language-bash">keytocard</span></span><br><span class="line"><span class="meta prompt_">gpg&gt; </span><span class="language-bash">key 2</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">gpg&gt; </span><span class="language-bash">key 3</span></span><br><span class="line"><span class="meta prompt_">gpg&gt; </span><span class="language-bash">keytocard</span></span><br><span class="line"><span class="meta prompt_">gpg&gt; </span><span class="language-bash">key 3</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">保存修改</span></span><br><span class="line"><span class="meta prompt_">gpg&gt; </span><span class="language-bash">save</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看卡状态，成功写入</span></span><br><span class="line">gpg --card-status</span><br><span class="line">Reader ...........: canokeys.org OpenPGP PIV OATH 0</span><br><span class="line">Application ID ...: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX</span><br><span class="line">Application type .: OpenPGP</span><br><span class="line">Version ..........: 3.4</span><br><span class="line">Manufacturer .....: CanoKeys</span><br><span class="line">Serial number ....: XXXXXXXX</span><br><span class="line">Name of cardholder: [not set]</span><br><span class="line">Language prefs ...: [not set]</span><br><span class="line">Salutation .......:</span><br><span class="line">URL of public key : [not set]</span><br><span class="line">Login data .......: [not set]</span><br><span class="line">Signature PIN ....: forced</span><br><span class="line">Key attributes ...: ed25519 cv25519 ed25519</span><br><span class="line">Max. PIN lengths .: 64 64 64</span><br><span class="line">PIN retry counter : 3 0 3</span><br><span class="line">Signature counter : 0</span><br><span class="line">UIF setting ......: Sign=off Decrypt=off Auth=off</span><br><span class="line">Signature key ....: XXXX XXXX XXXX XXXX XXXX  XXXX XXXX XXXX XXXX XXXX</span><br><span class="line">      created ....: 2023-04-10 08:49:21</span><br><span class="line">Encryption key....: XXXX XXXX XXXX XXXX XXXX  XXXX XXXX XXXX XXXX XXXX</span><br><span class="line">      created ....: 2023-04-10 08:47:47</span><br><span class="line">Authentication key: XXXX XXXX XXXX XXXX XXXX  XXXX XXXX XXXX XXXX XXXX</span><br><span class="line">      created ....: 2023-04-10 08:49:07</span><br><span class="line">General key info..: sub  ed25519/F9BBC38695CD8E36 2023-04-10 XXXXXXXX &lt;XXXXXXXX@XXXXX.com&gt;</span><br><span class="line">sec   ed25519/A12123716A6F3444  created: 2023-04-10  expires: never</span><br><span class="line"><span class="meta prompt_">ssb&gt; </span><span class="language-bash"> cv25519/B397DE74ADB1461B  created: 2023-04-10  expires: 2025-04-09</span></span><br><span class="line">                                card-no: F1D0 XXXXXXXX</span><br><span class="line"><span class="meta prompt_">ssb&gt; </span><span class="language-bash"> ed25519/96D21F146844DE42  created: 2023-04-10  expires: 2025-04-09</span></span><br><span class="line">                                card-no: F1D0 XXXXXXXX</span><br><span class="line"><span class="meta prompt_">ssb&gt; </span><span class="language-bash"> ed25519/F9BBC38695CD8E36  created: 2023-04-10  expires: 2025-04-09</span></span><br><span class="line">                                card-no: F1D0 XXXXXXXX</span><br></pre></td></tr></table></figure></div><p>子密钥为 ssb&gt; 表示本地只有一个指向 card-no: F1D0 XXXXXXXX 的智能卡指针，已经不存在私钥，现在可以直接删除主密钥，<strong>请再次确认已经备份完成</strong></p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg --delete-secret-keys A12123716A6F3444</span><br></pre></td></tr></table></figure></div><p>同时为了安全，你还可以将 gpg 的工作目录删除，Win：<code>%APPDATA%\gnupg</code>，Linux/macOS: <code>~/.gunpg</code></p><h4 id="使用-Canokey"><a href="#使用-Canokey" class="headerlink" title="使用 Canokey"></a>使用 Canokey</h4><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">导入公钥</span></span><br><span class="line">gpg --import public-key.pub</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置子密钥指向 Canokey</span></span><br><span class="line">gpg --edit-card</span><br><span class="line"><span class="meta prompt_">gpg/card&gt; </span><span class="language-bash">fetch</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看本地私钥</span></span><br><span class="line">gpg --fingerprint --keyid-format long -K</span><br></pre></td></tr></table></figure></div><p>此时可以看到子密钥已经指向 Canokey，已经可以正常使用了，其他配置可以去 Web Console 进行配置</p><p>可能存在多个智能卡，切换后密钥指向错误的问题，可以使用以下命令刷新序列号：</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">刷新 Card serial no</span></span><br><span class="line">gpg-connect-agent "scd serialno" "learn --force" /bye</span><br></pre></td></tr></table></figure></div><h4 id="Git-Commit-签名"><a href="#Git-Commit-签名" class="headerlink" title="Git Commit 签名"></a>Git Commit 签名</h4><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.signingkey F9BBC38695CD8E36 # 上述 Sign 密钥的 keyid</span><br></pre></td></tr></table></figure></div><p>git commit 时添加 -S 参数即可使用 gpg 进行签名，也可在配置中设置自动 gpg 签名</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config commit.gpgsign true</span><br></pre></td></tr></table></figure></div><p>提交到 Github 还需要前往 <a class="link" href="https://github.com/settings/keys">GitHub SSH and GPG keys <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 中添加公钥，添加完成后可以通过访问 <code>https://github.com/&lt;yourid&gt;.gpg </code>来获取公钥</p><h4 id="SSH-Agent"><a href="#SSH-Agent" class="headerlink" title="SSH Agent"></a>SSH Agent</h4><p>以下操作在 Archlinux 环境下进行，Windows 操作类似，使用工具 <a class="link" href="https://github.com/buptczq/WinCryptSSHAgent">WinCrypt SSH Agent <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 可以实现在 WSL 中进行配置</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> ~/.gnupg</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取配置文件</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">wget https://raw.githubusercontent.com/drduh/config/master/gpg-agent.conf</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看过滤掉注释后的配置文件</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">grep -ve <span class="string">"^#"</span> gpg-agent.conf</span></span><br><span class="line">enable-ssh-support</span><br><span class="line">default-cache-ttl 60</span><br><span class="line">max-cache-ttl 120</span><br><span class="line">pinentry-program /usr/bin/pinentry-curses</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在 shell rc 配置文件中添加以下环境变量，我的是 zsh，即 ~/.zshrc 配置，注意等号两边无空格</span></span><br><span class="line">export GPG_TTY="$(tty)"</span><br><span class="line">export SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)</span><br><span class="line">gpgconf --launch gpg-agent</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 ssh 公钥</span></span><br><span class="line">ssh-add -L</span><br></pre></td></tr></table></figure></div><p>将公钥添加至服务器的 <code>~/.ssh/authorized_keys</code> 文件内即可，输入 <code>ssh user@host</code>，即可弹出输入 PIN 页面，输入 PIN 即可正常登录</p><p>如果一直出现</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sign_and_send_pubkey: signing failed: agent refused operation</span><br></pre></td></tr></table></figure></div><p>可能是由于这是 systemd 启动的 agent，而不是 X session 启动的，所以要么没有，要么是不可用的 tty，可以通过以下命令进行更新</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg-connect-agent updatestartuptty /bye</span><br></pre></td></tr></table></figure></div><h3 id="PIV-1"><a href="#PIV-1" class="headerlink" title="PIV"></a>PIV</h3><p>PIV 目前还没进行研究，不过看博客可以实现 BitLocker 全盘加密，Archlinux 的免密登录等，以后有时间再慢慢研究吧</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总的来说，Canokey 也算是给我带来了一点小小的惊喜，基本满足我的需要，也缓解了没有买到 Yubikey 的遗憾，毕竟功能都差不多，甚至连文档都能互相用（），产品基本没什么太大的缺陷，对于日常使用还是足够的，使用 GPG 进行 Git Commit 签名以及 SSH 免验证登录体验还算不错，如果有类似的需求的话可以考虑考虑这款平替 Yubikey 的产品</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a class="link" href="https://tuna.moe/event/2021/canokey/">金枪鱼之夜：从 YutriKey 到 CanoKey <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p><a class="link" href="https://www.canokeys.org/">Canokeys <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p><a class="link" href="https://docs.canokeys.org/">Document For Canokey <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p><a class="link" href="https://github.com/canokeys">Canokeys Github <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p><a class="link" href="https://editst.com/2022/canokey-guide/">Canokey 指南：OTP，FIDO2，PGP 与 PIV <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p><a class="link" href="https://github.com/drduh/YubiKey-Guide">YubiKey-Guide <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>]]></content>
    
    
    <summary type="html">简单开箱一个小玩具</summary>
    
    
    
    <category term="开箱评测" scheme="https://hexo.blog.lsilencej.top/categories/%E5%BC%80%E7%AE%B1%E8%AF%84%E6%B5%8B/"/>
    
    
    <category term="工具" scheme="https://hexo.blog.lsilencej.top/tags/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="折腾" scheme="https://hexo.blog.lsilencej.top/tags/%E6%8A%98%E8%85%BE/"/>
    
    <category term="玩具" scheme="https://hexo.blog.lsilencej.top/tags/%E7%8E%A9%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Go 中的空切片与 nil 切片</title>
    <link href="https://hexo.blog.lsilencej.top/2022/10/15/Go%20%E4%B8%AD%E7%9A%84%E7%A9%BA%E5%88%87%E7%89%87%E4%B8%8E%20nil%20%E5%88%87%E7%89%87-go-empty-slice-and-nil-slice/"/>
    <id>https://hexo.blog.lsilencej.top/2022/10/15/Go%20%E4%B8%AD%E7%9A%84%E7%A9%BA%E5%88%87%E7%89%87%E4%B8%8E%20nil%20%E5%88%87%E7%89%87-go-empty-slice-and-nil-slice/</id>
    <published>2022-10-15T02:25:15.091Z</published>
    <updated>2022-10-15T02:25:15.091Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>学习 Go 语言时碰到了一个切片的细节错误：初始化时的空切片和 nil 切片，对于 json 数据的返回值不同</p><h2 id="空切片"><a href="#空切片" class="headerlink" title="空切片"></a>空切片</h2><p>对于切片来说，<strong>如果长度为 0，则为空切片</strong></p><p>我们有三种方式可以定义一个切片，第一种是 var，第二种是直接赋值，第三种是 make</p><div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var</span></span><br><span class="line"><span class="keyword">var</span> a []<span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接赋值</span></span><br><span class="line">a := []<span class="type">int</span>{}</span><br><span class="line"></span><br><span class="line"><span class="comment">// make</span></span><br><span class="line">a := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure></div><p>以上三种均为空切片，因为长度为 0，但在 goland 中第二种直接赋值的方式下会划线，如果通过 ide 提供的解决错误方式会将第二种方式转为第一种方式，但这两种方式定义的变量实则是不相等的，对于以上三个变量，我们可以进行如下实验：</p><div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var</span></span><br><span class="line"><span class="keyword">var</span> a []<span class="type">string</span></span><br><span class="line">fmt.Printfln(<span class="string">"nil = %t, len = %d, cap = %d"</span>, a == <span class="literal">nil</span>, <span class="built_in">len</span>(a), <span class="built_in">cap</span>(a))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接赋值</span></span><br><span class="line">a = []<span class="type">string</span>{}</span><br><span class="line">fmt.Printfln(<span class="string">"nil = %t, len = %d, cap = %d"</span>, a == <span class="literal">nil</span>, <span class="built_in">len</span>(a), <span class="built_in">cap</span>(a))</span><br><span class="line"></span><br><span class="line"><span class="comment">// make</span></span><br><span class="line">a = <span class="built_in">make</span>([]<span class="type">string</span>, <span class="number">0</span>)</span><br><span class="line">fmt.Printfln(<span class="string">"nil = %t, len = %d, cap = %d"</span>, a == <span class="literal">nil</span>, <span class="built_in">len</span>(a), <span class="built_in">cap</span>(a))</span><br></pre></td></tr></table></figure></div><p>对于以上的代码，结果为：</p><div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">nil</span> = <span class="literal">true</span>, <span class="built_in">len</span> = <span class="number">0</span>, <span class="built_in">cap</span> = <span class="number">0</span></span><br><span class="line"><span class="literal">nil</span> = <span class="literal">false</span>, <span class="built_in">len</span> = <span class="number">0</span>, <span class="built_in">cap</span> = <span class="number">0</span></span><br><span class="line"><span class="literal">nil</span> = <span class="literal">false</span>, <span class="built_in">len</span> = <span class="number">0</span>, <span class="built_in">cap</span> = <span class="number">0</span></span><br></pre></td></tr></table></figure></div><p>很显然，第一种和第二种返回的并不一样，第一种方法定义的不仅是个空切片，而且是个 nil 切片</p><h2 id="nil-切片"><a href="#nil-切片" class="headerlink" title="nil 切片"></a>nil 切片</h2><p>nil 切片代表均为零值，对于切片的底层结构体来说，只有三个变量，分别是指向底层数组的指针，切片长度以及切片容量：</p><div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> slice <span class="keyword">struct</span> {</span><br><span class="line">array unsafe.Pointer</span><br><span class="line"><span class="built_in">len</span>   <span class="type">int</span></span><br><span class="line"><span class="built_in">cap</span>   <span class="type">int</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><p>对于空切片和 nil 切片来说，最大的不同就在于指向底层数组的指针，用 var 定义的切片是不具有底层数组的，故均为零值，为 nil切片，而用直接赋值的方式进行定义的切片底层数组指针指向后面大括号包含的所有元素的地址，尽管大括号内部为空，但是切片指针不为空，故为空切片</p><h2 id="nil-切片的特性"><a href="#nil-切片的特性" class="headerlink" title="nil 切片的特性"></a>nil 切片的特性</h2><p>在 json.Marshal 编码时，空切片会被编码成空数组 []，而 nil 切片会被编码成 null</p><div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a []<span class="type">int</span></span><br><span class="line">json1, _ := json.Marshal(a)</span><br><span class="line"></span><br><span class="line">b := []<span class="type">int</span>{}</span><br><span class="line">json2, _ := json.Marshal(b)</span><br><span class="line"></span><br><span class="line">c := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">0</span>)</span><br><span class="line">json3, _ := json.Marshal(c)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"%s %s %s"</span>, json1, json2, json3)</span><br></pre></td></tr></table></figure></div><p>上述代码的输出结果为：</p><div class="highlight-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">null [] []</span><br></pre></td></tr></table></figure></div><p>在 goland 中，第二种方式会划线，会建议转为第一种方式，但二者返回值是不一样的，如果需要定义一个空切片但非 nil 切片，建议使用 make 方式</p><p>nil 切片也可以使用 append 操作，底层容量扩增仍然是按照 2 次幂递增，对于未知容量的切片，定义一个 nil 切片是一个好的选择</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>当卡莫名其妙的 bug 的时候，看看底层代码的注释也许是个好主意</p>]]></content>
    
    
    <summary type="html">Go 中的小细节</summary>
    
    
    
    <category term="技术学习" scheme="https://hexo.blog.lsilencej.top/categories/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Go" scheme="https://hexo.blog.lsilencej.top/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>位与的经典操作 n &amp; (n - 1)</title>
    <link href="https://hexo.blog.lsilencej.top/2022/09/29/%E4%BD%8D%E4%B8%8E%E7%9A%84%E7%BB%8F%E5%85%B8%E6%93%8D%E4%BD%9C%20n%20&amp;%20(n%20-%201)-n-and-n-1/"/>
    <id>https://hexo.blog.lsilencej.top/2022/09/29/%E4%BD%8D%E4%B8%8E%E7%9A%84%E7%BB%8F%E5%85%B8%E6%93%8D%E4%BD%9C%20n%20&amp;%20(n%20-%201)-n-and-n-1/</id>
    <published>2022-09-29T07:34:58.897Z</published>
    <updated>2022-09-29T07:34:58.897Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>偶然看到的快速判断 n 是否是 2 的幂次方的巧妙解法</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>先举个例子，假设 n = 10100，则 n - 1 = 10011</p><p>拿笔进行简单运算可以发现，n 和 n - 1 的差别主要在 n 的二进制位从低位往高位数的第一个 1 处，将这个 1 置换为 0，然后所有低位置为 1（若存在低位的话）</p><p>通过位与的操作后，得到的结果即为从低位往高位数的第一个 1 处包括后面的所有位数均置为 0</p><p>由此可以得出结论， n &amp; (n - 1) 的结果的二进制为，从 n 的二进制位低位往高位数第一个 1 处开始，到最低位均置为 0，而 n 第一个 1 前面不发生改变</p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>既然结果为将低位往高位数的第一个 1 及所有低位置为 0，那么可以简单对 2 的幂次方进行判断，由于 2 的幂次方的二进制只有一个 1，所以只需要进行如下判断：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n &amp; (n - <span class="number">1</span>) == <span class="number">0</span></span><br></pre></td></tr></table></figure></div><p>若该判断成立，则为 2 的幂次方，若不为说明 n 的二进制不止有一个 1</p><p>同时还能求出 n 的二进制中所有 1 的个数：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (n &gt; <span class="number">0</span>) {</span><br><span class="line">count++;</span><br><span class="line">n &amp;= n - <span class="number">1</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>好好学，好好用</p>]]></content>
    
    
    <summary type="html">二进制的巧妙用法</summary>
    
    
    
    <category term="干货分享" scheme="https://hexo.blog.lsilencej.top/categories/%E5%B9%B2%E8%B4%A7%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="算法" scheme="https://hexo.blog.lsilencej.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>通过 Spring Task 实现定时任务</title>
    <link href="https://hexo.blog.lsilencej.top/2022/09/19/%E9%80%9A%E8%BF%87%20Spring%20Task%20%E5%AE%9E%E7%8E%B0%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1-springtask/"/>
    <id>https://hexo.blog.lsilencej.top/2022/09/19/%E9%80%9A%E8%BF%87%20Spring%20Task%20%E5%AE%9E%E7%8E%B0%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1-springtask/</id>
    <published>2022-09-19T02:56:03.661Z</published>
    <updated>2022-09-19T02:58:03.487Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>无意间看到别人的博客有个博客统计的系统，大致就是通过调用百度统计的 api 获取网站相关统计数据，并通过 echarts 图表工具进行可视化分析，在写相关后端程序时便有了个定时任务的需求，如何定时调用百度统计的 api 获取相关数据，大致查了下发现有三种工具可供使用：spring task、quartz、xxl-job，原作者的程序中使用的是 xxl-job 进行调度，xxl-job 的<a class="link" href="https://www.xuxueli.com/xxl-job/">官方文档 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>对于如何使用这个工具也介绍的十分详细，xxl-job 不仅需要在后端程序中引入相关依赖并配置相应的执行器，也需要搭建一个可视化的调度中心，由于 xxl-job 主用于分布式平台，用在我这博客上进行一个定时任务多少有点大材小用了，所以最后选择了最简单的 spring schedule 进行定时任务的处理</p><h2 id="Spring-Task"><a href="#Spring-Task" class="headerlink" title="Spring Task"></a>Spring Task</h2><h3 id="启用-Spring-Task"><a href="#启用-Spring-Task" class="headerlink" title="启用 Spring Task"></a>启用 Spring Task</h3><p>在 springboot 项目中，首先便是内置了 spring task 这个定时任务工具，使用也很简单，只需要在启动类上使用 <code>@EnableScheduling </code>注解即可：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HaloStatisticApplication</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        SpringApplication.run(HaloStatisticApplication.class, args);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h3 id="注解实现定时任务"><a href="#注解实现定时任务" class="headerlink" title="注解实现定时任务"></a>注解实现定时任务</h3><p>定义一个 Spring Bean，在具体实现方法上添加 <code>@Scheduled</code> 注解即可：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaiduStatistics</span> {</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    TokenService tokenService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    SiteService siteService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled(cron = "0 0 4 ? * MON")</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">refreshToken</span><span class="params">()</span> {</span><br><span class="line">        <span class="type">BaiduToken</span> <span class="variable">baiduToken</span> <span class="operator">=</span> tokenService.refreshToken();</span><br><span class="line">        tokenService.saveToken(baiduToken);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Scheduled(cron = "0 0 4 * * ?")</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">refreshSites</span><span class="params">()</span> {</span><br><span class="line">        List&lt;Site&gt; sites = siteService.refreshSites();</span><br><span class="line">        siteService.saveSites(sites);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><p>这样便实现了一个简单的定时任务</p><h3 id="Cron-表达式"><a href="#Cron-表达式" class="headerlink" title="Cron 表达式"></a>Cron 表达式</h3><p>Cron 表达式是一个具有时间含义的字符串，以空格隔开，分为 6 ~ 7 个域，年域可以不必须</p><table><thead><tr><th align="center">域</th><th align="center">是否必需</th><th align="center">取值范围</th><th align="center">特殊字符</th></tr></thead><tbody><tr><td align="center">秒</td><td align="center">是</td><td align="center">[0, 59]</td><td align="center">* , - /</td></tr><tr><td align="center">分钟</td><td align="center">是</td><td align="center">[0, 59]</td><td align="center">* , - /</td></tr><tr><td align="center">小时</td><td align="center">是</td><td align="center">[0, 23]</td><td align="center">* , - /</td></tr><tr><td align="center">日期</td><td align="center">是</td><td align="center">[1, 31]</td><td align="center">* , - / ? L W</td></tr><tr><td align="center">月份</td><td align="center">是</td><td align="center">[1, 12]或[JAN, DEC]</td><td align="center">* , - /</td></tr><tr><td align="center">星期</td><td align="center">是</td><td align="center">[1, 7]或[MON, SUN]。若使用[1, 7]表达方式，<code>1</code>代表星期一，<code>7</code>代表星期日。</td><td align="center">* , - / ? L #</td></tr><tr><td align="center">年</td><td align="center">否</td><td align="center">[当前年份，2099]</td><td align="center">* , - /</td></tr></tbody></table><table><thead><tr><th align="center">特殊字符</th><th align="center">含义</th><th align="center">示例</th></tr></thead><tbody><tr><td align="center"><code>*</code></td><td align="center">所有可能的值。</td><td align="center">在月域中，<code>*</code>表示每个月；在星期域中，<code>*</code>表示星期的每一天。</td></tr><tr><td align="center"><code>,</code></td><td align="center">列出枚举值。</td><td align="center">在分钟域中，<code>5,20</code>表示分别在5分钟和20分钟触发一次。</td></tr><tr><td align="center"><code>-</code></td><td align="center">范围。</td><td align="center">在分钟域中，<code>5-20</code>表示从5分钟到20分钟之间每隔一分钟触发一次。</td></tr><tr><td align="center"><code>/</code></td><td align="center">指定数值的增量。</td><td align="center">在分钟域中，<code>0/15</code>表示从第0分钟开始，每15分钟。在分钟域中<code>3/20</code>表示从第3分钟开始，每20分钟。</td></tr><tr><td align="center"><code>?</code></td><td align="center">不指定值，仅日期和星期域支持该字符。</td><td align="center">当日期或星期域其中之一被指定了值以后，为了避免冲突，需要将另一个域的值设为<code>?</code>。</td></tr><tr><td align="center"><code>L</code></td><td align="center">单词Last的首字母，表示最后一天，仅日期和星期域支持该字符。<strong>说明</strong> 指定<code>L</code>字符时，避免指定列表或者范围，否则，会导致逻辑问题。</td><td align="center">在日期域中，<code>L</code>表示某个月的最后一天。在星期域中，<code>L</code>表示一个星期的最后一天，也就是星期日（<code>SUN</code>）。如果在<code>L</code>前有具体的内容，例如，在星期域中的<code>6L</code>表示这个月的最后一个星期六。</td></tr><tr><td align="center"><code>W</code></td><td align="center">除周末以外的有效工作日，在离指定日期的最近的有效工作日触发事件。<code>W</code>字符寻找最近有效工作日时不会跨过当前月份，连用字符<code>LW</code>时表示为指定月份的最后一个工作日。</td><td align="center">在日期域中<code>5W</code>，如果5日是星期六，则将在最近的工作日星期五，即4日触发。如果5日是星期天，则将在最近的工作日星期一，即6日触发；如果5日在星期一到星期五中的一天，则就在5日触发。</td></tr><tr><td align="center"><code>#</code></td><td align="center">确定每个月第几个星期几，仅星期域支持该字符。</td><td align="center">在星期域中，<code>4#2</code>表示某月的第二个星期四。</td></tr></tbody></table><p>如上代码，如果我需要在每个月的每周一上午四点对 token 进行一个刷新，那么我的 cron 表达式为 <code>0 0 4 ? * MON</code>，日期和星期可能会有冲突，如果我需要指定星期几的话，日期就需要选择 <code>?</code> ,  如果我需要在每天早上四点对网站统计数据进行刷新，那么我的 cron 表达式为 <code>0 0 4 * * ?</code> ，同样 <code>?</code> 是为了防止日期和星期冲突，所以两个只需要指定一个</p><p>如果实在不会写的话，网上也有很多现成的生成工具，可以直接预测该定时任务之后的执行时刻</p><h3 id="Scheduled-注解参数"><a href="#Scheduled-注解参数" class="headerlink" title="@Scheduled 注解参数"></a>@Scheduled 注解参数</h3><table><thead><tr><th align="center">参数</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">cron</td><td align="center">cron 表达式，指定任务在特定时间运行</td></tr><tr><td align="center">fixedDelay</td><td align="center">表示上一次任务执行完成后多久再次执行，参数类型为 long，单位 ms</td></tr><tr><td align="center">fixedDelayString</td><td align="center">同上，参数类型改为 String</td></tr><tr><td align="center">fixedRate</td><td align="center">表示通过一定频率执行任务，参数类型为 long，单位 ms</td></tr><tr><td align="center">fixedRateString</td><td align="center">同上，参数类型改为 String</td></tr><tr><td align="center">initialDelay</td><td align="center">表示延迟多久再一次执行任务，参数类型为 long，单位 ms</td></tr><tr><td align="center">initialDelayString</td><td align="center">同上，参数类型改为 String</td></tr><tr><td align="center">zone</td><td align="center">时区，默认为当前时区，一般用不到</td></tr></tbody></table><h3 id="多线程支持"><a href="#多线程支持" class="headerlink" title="多线程支持"></a>多线程支持</h3><p>spring task 默认为单线程运行，指的是如果多个任务在同一时刻运行的时候会发生堵塞，而在大多数情况下，我们希望同时运行多个任务，故需要开启多线程支持，开启的方法也很简单，通过自定义一个配置类，在其中配置一个 TaskScheduler 即可，Spring 已有默认实现</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScheduleConfig</span> {</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> TaskScheduler <span class="title function_">taskScheduler</span><span class="params">()</span> {</span><br><span class="line">        <span class="type">ThreadPoolTaskScheduler</span> <span class="variable">scheduler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolTaskScheduler</span>();</span><br><span class="line">        scheduler.setPoolSize(<span class="number">20</span>); <span class="comment">// 设置线程池的大小为20</span></span><br><span class="line">        <span class="keyword">return</span> scheduler;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对于 XXL-JOB，也只是浅学了一下如何设置定时任务，这里就不再详述，具体可参见官方文档，同时 quartz 也在 springboot2.X 版本进行了内置，可以更加方便的使用，当然也可以使用 spring task + redis 分布式锁实现任务调度等等，这些都是分布式的任务调度平台，对于个人的小项目来说，用分布式调度平台多少有些浪费，不需要太多东西，只需要一个定时任务，需要精简小巧的话，spring task 或许是一个更好的选择</p>]]></content>
    
    
    <summary type="html">Spring Task 的使用</summary>
    
    
    
    <category term="技术学习" scheme="https://hexo.blog.lsilencej.top/categories/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Java" scheme="https://hexo.blog.lsilencej.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java 实现向上取整</title>
    <link href="https://hexo.blog.lsilencej.top/2022/08/02/Java%20%E5%AE%9E%E7%8E%B0%E5%90%91%E4%B8%8A%E5%8F%96%E6%95%B4-java-ceil/"/>
    <id>https://hexo.blog.lsilencej.top/2022/08/02/Java%20%E5%AE%9E%E7%8E%B0%E5%90%91%E4%B8%8A%E5%8F%96%E6%95%B4-java-ceil/</id>
    <published>2022-08-02T07:48:17.042Z</published>
    <updated>2022-08-02T07:49:08.598Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 java 中利用计算机特性实现向上取整的巧妙方法</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>如下公式，如果需要求 y / x 的向上取整，可以直接通过计算右边得到<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.577ex;" xmlns="http://www.w3.org/2000/svg" width="17.377ex" height="4.613ex" role="img" focusable="false" viewBox="0 -1342 7680.4 2039"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2308" d="M174 734Q178 746 190 750H298H369Q400 750 411 747T422 730T411 713T372 709Q365 709 345 709T310 710H214V-235Q206 -248 196 -250Q192 -250 189 -249T184 -247T180 -244T178 -241T176 -237T174 -234V734Z"></path></g><g data-mml-node="mfrac" transform="translate(444,0)"><g data-mml-node="mi" transform="translate(261,676)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(220,-686)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><rect width="772" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(1456,0)"><path data-c="2309" d="M21 717T21 730T32 746T75 750H147H256Q266 742 269 735V-235Q262 -248 251 -250Q247 -250 244 -249T239 -247T235 -244T233 -241T231 -237T229 -234V710H133Q119 710 99 710T71 709Q43 709 32 713Z"></path></g><g data-mml-node="mo" transform="translate(2177.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(3233.6,0)"><g data-mml-node="mrow" transform="translate(220,676)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(712.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(1712.4,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(2506.7,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(3506.9,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mi" transform="translate(1937.4,-686)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><rect width="4206.9" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></p><h2 id="正确性"><a href="#正确性" class="headerlink" title="正确性"></a>正确性</h2><p>我们知道，对于一个除法来说，有着：<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="10.335ex" height="2.034ex" role="img" focusable="false" viewBox="0 -694 4568 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(767.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(1823.6,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mi" transform="translate(2344.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(3138.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(4139,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g></g></g></svg></mjx-container><br>这样又可以分出两种情况，一种就是余数 b = 0，另一种为余数 b &gt; 0</p><p>当余数 b = 0 时，我们向上取整的结果就为 k</p><p>而当余数 b &gt; 0 时，向上取整的结果为 k + 1</p><p>上面的公式通过这样的转换很容易进行理解，将 y = kx + b 代入上面的公式当中可以得到：<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.577ex;" xmlns="http://www.w3.org/2000/svg" width="52.277ex" height="4.676ex" role="img" focusable="false" viewBox="0 -1370 23106.2 2067"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2308" d="M174 734Q178 746 190 750H298H369Q400 750 411 747T422 730T411 713T372 709Q365 709 345 709T310 710H214V-235Q206 -248 196 -250Q192 -250 189 -249T184 -247T180 -244T178 -241T176 -237T174 -234V734Z"></path></g><g data-mml-node="mfrac" transform="translate(444,0)"><g data-mml-node="mi" transform="translate(261,676)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(220,-686)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><rect width="772" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(1456,0)"><path data-c="2309" d="M21 717T21 730T32 746T75 750H147H256Q266 742 269 735V-235Q262 -248 251 -250Q247 -250 244 -249T239 -247T235 -244T233 -241T231 -237T229 -234V710H133Q119 710 99 710T71 709Q43 709 32 713Z"></path></g><g data-mml-node="mo" transform="translate(2177.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(3233.6,0)"><g data-mml-node="mrow" transform="translate(220,676)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(712.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(1712.4,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(2506.7,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(3506.9,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mi" transform="translate(1937.4,-686)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><rect width="4206.9" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(7958.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(9014,0)"><g data-mml-node="mrow" transform="translate(220,676)"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mi" transform="translate(521,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1315.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(2315.4,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mo" transform="translate(2966.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(3966.9,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(4761.1,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(5761.3,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mi" transform="translate(3064.7,-686)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><rect width="6461.3" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(15993.1,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(17048.9,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(17792.1,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(18792.3,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(19514.6,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mfrac" transform="translate(20514.8,0)"><g data-mml-node="mrow" transform="translate(220,676)"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mo" transform="translate(651.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1651.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mi" transform="translate(1009.7,-686)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><rect width="2351.4" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container><br>接下来对右边分别进行两种情况的讨论</p><ul><li><p>当余数 b = 0 时，即可以整除，此时结果变为：<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.577ex;" xmlns="http://www.w3.org/2000/svg" width="17.447ex" height="4.613ex" role="img" focusable="false" viewBox="0 -1342 7711.4 2039"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2308" d="M174 734Q178 746 190 750H298H369Q400 750 411 747T422 730T411 713T372 709Q365 709 345 709T310 710H214V-235Q206 -248 196 -250Q192 -250 189 -249T184 -247T180 -244T178 -241T176 -237T174 -234V734Z"></path></g><g data-mml-node="mfrac" transform="translate(444,0)"><g data-mml-node="mi" transform="translate(261,676)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(220,-686)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><rect width="772" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(1456,0)"><path data-c="2309" d="M21 717T21 730T32 746T75 750H147H256Q266 742 269 735V-235Q262 -248 251 -250Q247 -250 244 -249T239 -247T235 -244T233 -241T231 -237T229 -234V710H133Q119 710 99 710T71 709Q43 709 32 713Z"></path></g><g data-mml-node="mo" transform="translate(2177.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(3233.6,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(3976.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(4977,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(5699.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mfrac" transform="translate(6699.4,0)"><g data-mml-node="mn" transform="translate(256,676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(220,-686)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><rect width="772" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container><br>这里又可以进行分类</p><ul><li>由于 x 为整数，当 x = 1 时，结果显而易见为 k</li><li>当 x != 1 且 x &gt; 0，由于计算机中会对小数部分进行舍去，故右边结果为 k</li><li>同理，当 x &lt; 0 时，右边结果运算为 k</li></ul></li><li><p>当余数 b &gt; 0 时，即不可以整除：</p><ul><li><p>当 x &gt; 0 时：<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.577ex;" xmlns="http://www.w3.org/2000/svg" width="68.415ex" height="4.676ex" role="img" focusable="false" viewBox="0 -1370 30239.6 2067"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(777.8,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="mi" transform="translate(1833.6,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mo" transform="translate(2540.3,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="mi" transform="translate(3596.1,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mtext" transform="translate(4168.1,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mo" transform="translate(4640.3,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(5640.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(6418.3,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="mi" transform="translate(7474.1,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mo" transform="translate(8125.3,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(9125.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(9903.3,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="mi" transform="translate(10959.1,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mtext" transform="translate(11531.1,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mo" transform="translate(12003.3,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mfrac" transform="translate(13003.6,0)"><g data-mml-node="mn" transform="translate(256,676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(220,-686)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><rect width="772" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(14293.3,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="mfrac" transform="translate(15349.1,0)"><g data-mml-node="mrow" transform="translate(220,676)"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mo" transform="translate(651.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1651.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mi" transform="translate(1009.7,-686)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><rect width="2351.4" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(18218.3,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="mn" transform="translate(19274.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mtext" transform="translate(19774.1,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mn" transform="translate(20024.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(20746.3,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mfrac" transform="translate(21746.6,0)"><g data-mml-node="mn" transform="translate(256,676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(220,-686)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><rect width="772" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(23036.3,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="mn" transform="translate(24092.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(24814.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mfrac" transform="translate(25814.6,0)"><g data-mml-node="mrow" transform="translate(220,676)"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mo" transform="translate(651.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1651.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mi" transform="translate(1009.7,-686)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><rect width="2351.4" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(28683.8,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="mn" transform="translate(29739.6,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></svg></mjx-container><br>由于结果为大于 1 的小数，故舍弃后的最终结果为 k + 1，符合要求</p></li><li><p>当 x &lt; 0 时：<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.577ex;" xmlns="http://www.w3.org/2000/svg" width="68.415ex" height="4.676ex" role="img" focusable="false" viewBox="0 -1370 30239.6 2067"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(777.8,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="mi" transform="translate(1833.6,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mo" transform="translate(2540.3,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="mi" transform="translate(3596.1,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mtext" transform="translate(4168.1,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mo" transform="translate(4640.3,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(5640.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(6418.3,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="mi" transform="translate(7474.1,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mo" transform="translate(8125.3,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(9125.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(9903.3,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="mi" transform="translate(10959.1,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mtext" transform="translate(11531.1,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mo" transform="translate(12003.3,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mfrac" transform="translate(13003.6,0)"><g data-mml-node="mn" transform="translate(256,676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(220,-686)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><rect width="772" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(14293.3,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"></path></g><g data-mml-node="mfrac" transform="translate(15349.1,0)"><g data-mml-node="mrow" transform="translate(220,676)"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mo" transform="translate(651.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1651.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mi" transform="translate(1009.7,-686)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><rect width="2351.4" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(18218.3,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"></path></g><g data-mml-node="mn" transform="translate(19274.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mtext" transform="translate(19774.1,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mn" transform="translate(20024.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(20746.3,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mfrac" transform="translate(21746.6,0)"><g data-mml-node="mn" transform="translate(256,676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(220,-686)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><rect width="772" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(23036.3,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"></path></g><g data-mml-node="mn" transform="translate(24092.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(24814.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mfrac" transform="translate(25814.6,0)"><g data-mml-node="mrow" transform="translate(220,676)"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mo" transform="translate(651.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1651.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mi" transform="translate(1009.7,-686)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><rect width="2351.4" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(28683.8,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"></path></g><g data-mml-node="mn" transform="translate(29739.6,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></svg></mjx-container><br>同理，小数部分舍弃，最终结果为 k + 1，符合要求</p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这种方法运用的非常巧妙，可以作为思路的启发，当然也可以使用 java 中自带的 Math 类中的静态函数进行向上取整操作</p></li></ul>]]></content>
    
    
    <summary type="html">利用计算机特性实现向上取整的巧妙方法</summary>
    
    
    
    <category term="技术学习" scheme="https://hexo.blog.lsilencej.top/categories/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="算法" scheme="https://hexo.blog.lsilencej.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>利用二进制方法求子集</title>
    <link href="https://hexo.blog.lsilencej.top/2022/07/18/%E5%88%A9%E7%94%A8%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%B9%E6%B3%95%E6%B1%82%E5%AD%90%E9%9B%86-binary-combination/"/>
    <id>https://hexo.blog.lsilencej.top/2022/07/18/%E5%88%A9%E7%94%A8%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%B9%E6%B3%95%E6%B1%82%E5%AD%90%E9%9B%86-binary-combination/</id>
    <published>2022-07-18T12:52:42.201Z</published>
    <updated>2022-07-18T12:56:07.747Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>做项目的时候遇到需要求子集和的问题，偶然看到使用二进制的方法进行求解，顺手记了下来</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>由于一个集合的子集数为 2 ^ 集合长度，观察二进制位</p><p>假如一个集合为 [1, 2, 3]，则子集数量为 2 ^ 3 = 8 个，0 到 7 的二进制数分别为 000，001，010，011，100，101，110，111</p><p>集合有三个数，二进制位数也为三，一一对应，当二进制位为 0 时代表不加入集合，为 1 时代表加入集合，故而每一个二进制数代表了一个子集</p><p>于是代码就很容易写出来了</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>java 实现：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Set&lt;Integer&gt;&gt; <span class="title function_">getCombinations</span><span class="params">(List&lt;Integer&gt; tagsList)</span> {</span><br><span class="line">    <span class="keyword">if</span> (tagsList.size() &gt; <span class="number">0</span>) {</span><br><span class="line">        List&lt;Set&lt;Integer&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; Math.pow(<span class="number">2</span>, tagsList.size()); i++) {</span><br><span class="line">            Set&lt;Integer&gt; subResult = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="keyword">for</span> (Integer integer : tagsList) {</span><br><span class="line">                <span class="keyword">if</span> ((num &amp; <span class="number">1</span>) == <span class="number">1</span>) { <span class="comment">// 枚举 num，看末位与1相与是否为1，若为1则代表二进制末位为1，故将集合中的元素添加入子集</span></span><br><span class="line">                    subResult.add(integer);</span><br><span class="line">                }</span><br><span class="line">                num &gt;&gt;= <span class="number">1</span>; <span class="comment">// 将 num 的二进制向右移一位，即相当于除以二</span></span><br><span class="line">            }</span><br><span class="line">            result.add(subResult);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>还有很多巧妙的解法需要学习啊</p>]]></content>
    
    
    <summary type="html">巧妙的求子集方法</summary>
    
    
    
    <category term="干货分享" scheme="https://hexo.blog.lsilencej.top/categories/%E5%B9%B2%E8%B4%A7%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="算法" scheme="https://hexo.blog.lsilencej.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>年轻人的第一个网盘 —— Alist</title>
    <link href="https://hexo.blog.lsilencej.top/2022/05/17/%E5%B9%B4%E8%BD%BB%E4%BA%BA%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%BD%91%E7%9B%98%20%E2%80%94%E2%80%94%20Alist-alist/"/>
    <id>https://hexo.blog.lsilencej.top/2022/05/17/%E5%B9%B4%E8%BD%BB%E4%BA%BA%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%BD%91%E7%9B%98%20%E2%80%94%E2%80%94%20Alist-alist/</id>
    <published>2022-05-16T17:27:39.829Z</published>
    <updated>2022-05-16T17:27:39.829Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近白嫖了微软的 E5 账号，想着放着这 5T 的账号要做点啥，刚好最近刷机，太多东西需要备份了，而有部分应用支持 WebDav 备份，国内最大 WebDav 网盘当属坚果云，本来想照旧继续部署在坚果云上，突然意识到自己的服务器不能闲着，于是便开始寻找了相关的程序部署在服务器上，能够当一个云盘挂载 OneDrive，又支持 WebDav，岂不美哉</p><p>终于在不懈努力下，找到了符合要求的，让我最心仪的网盘程序，<a class="link" href="https://image.lsilencej.top/i/2022/05/17/6282786c04050.png">Alist <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/05/17/6282786c04050.png" alt="Alist"></p><p>于是这篇部署的文章便诞生了</p><h2 id="Alist-介绍"><a href="#Alist-介绍" class="headerlink" title="Alist 介绍"></a>Alist 介绍</h2><p>这是官方的演示网站：<a class="link" href="https://alist.nn.ci/">https://alist.nn.ci/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>官方的英文介绍</p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/05/17/628279057bb25.png" alt="介绍"></p><p>多种存储并非浪得虚名，基本主流的网盘都支持了，甚至蓝奏云</p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/05/17/6282792f49dd3.png" alt="支持的存储"></p><p>经过上面的演示，优点自然就出来了</p><p>1、支持多存储</p><p>2、简单易部署</p><p>3、支持 WebDav</p><p>4、文件预览格式支持众多</p><p>…</p><h2 id="部署在宝塔面板"><a href="#部署在宝塔面板" class="headerlink" title="部署在宝塔面板"></a>部署在宝塔面板</h2><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>这里只简单介绍在宝塔面板上的部署，如需更多平台上的部署，请参见官方文档：<a class="link" href="https://alist-doc.nn.ci/">https://alist-doc.nn.ci/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>好了，下面正式开始进入部署环节</p><p>首先当然是进行一个网站的创建，记得先去解析域名（如果你也是二级域名的话）</p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/05/17/62827aaf9a039.png" alt="创建网站"></p><p>FTP 自主选择是否创建，数据库不需要创建，PHP 版本选择纯静态</p><p>接下来是强制 HTTPS 了，养成一个创建网站就开启的好习惯</p><p>然后访问 <a class="link" href="https://github.com/Xhofe/alist/releases">Alist’s Github <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，找到相对应的版本进行一个下载，这里我的服务器是 x86 架构的，所以我下载 alist-linux-amd64.tar.gz</p><p>如果你不知道你服务器是 x86 架构还是 arm 架构的，可以输入下面的命令查询</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -m</span><br></pre></td></tr></table></figure></div><p>然后就是把下载下来的文件上传到服务器站点目录下解压了</p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/05/17/62827d6885b54.png" alt="解压后的文件"></p><p>现在其实就可以运行了，但防止被杀进程，还需要守护进程</p><p>宝塔面板软件商店找到 Supervisor 管理器（忽略 Halo 的守护进程）</p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/05/17/62827dbb87d35.png" alt="Supervisor 管理器"></p><p>点击添加守护进程，运行目录选择站点目录，启动命令输入：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup ./alist-linux-amd64 &gt; log.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure></div><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/05/17/62827e43c4acb.png" alt="添加守护进程"></p><p>如果进程已启动就成功了，接下来就是配置反向代理了</p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/05/17/62827ebc393a7.png" alt="反向代理"></p><p>根据文档中的提示，删除站点配置文件内的默认配置，然后添加以下字段：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">location / {</span><br><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    proxy_set_header Host $http_host;</span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    proxy_set_header Range $http_range;</span><br><span class="line">    proxy_set_header If-Range $http_if_range;</span><br><span class="line">    proxy_redirect off;</span><br><span class="line">    proxy_pass http://127.0.0.1:5244;</span><br><span class="line">    # 上传的最大文件尺寸</span><br><span class="line">    client_max_body_size 20000m;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/05/17/62827f3e7b248.png" alt="配置文件"></p><p>保存配置即可通过域名访问 Alist</p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/05/17/62827f7df0c04.png" alt="Alist"></p><p>进入后台需要获取密码，密码需要通过宝塔终端获得，在终端输入：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /www/wwwroot/pan // 替换成你的站点目录</span><br><span class="line">./alist-linux-amd64 -password</span><br></pre></td></tr></table></figure></div><p>获取到的密码直接输入就可以进入后台界面了</p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/05/17/628280500862e.png" alt="后台界面"></p><p>配置可修改的还是挺多的，具体可参考文档，这里记得修改一下后台的密码</p><h3 id="添加账号"><a href="#添加账号" class="headerlink" title="添加账号"></a>添加账号</h3><p>这里进行一个 OneDrive 的挂载，其他网盘具体参见文档</p><p>点击左边的账号，添加，选择 Onedrive</p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/05/17/6282819859ab4.png" alt="添加账号"></p><p>首先打开这个链接：<a class="link" href="https://tool.nn.ci/onedrive/request%EF%BC%8C%E9%80%89%E6%8B%A9%E7%9B%B8%E5%BA%94%E7%9A%84%E5%8C%BA%E5%9F%9F%EF%BC%8C%E5%9B%BD%E9%99%85%E7%89%88%E9%80%89%E6%8B%A9">https://tool.nn.ci/onedrive/request，选择相应的区域，国际版选择 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> global，国内世纪互联选择 cn，点击创建应用</p><p>跳转到 Azure，用管理员账号登录，点击新注册</p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/05/17/628282c66e2d5.png" alt="应用注册"></p><p>名称随便写，受支持的账户类型选第三个，重定向选 Web，输入链接：<a class="link" href="https://tool.nn.ci/onedrive/callback">https://tool.nn.ci/onedrive/callback <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/05/17/6282833a9e0bd.png" alt="注册应用程序"></p><p>注册应用后进入应用，点击 API 权限，选择添加权限 -&gt; Microsoft Graph -&gt; 委托的权限 -&gt; 搜索 file -&gt; 添加如图两个权限</p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/05/17/62828414dbdb4.png" alt="添加权限"></p><p>点击添加权限，记得再点击代表 xxx 授予管理员同意</p><p>接下来点击左侧的证书和密码，新建客户端密码，说明随便填，期限选两年，创建完复制值（只会出现一次，非机密 ID）</p><p>回到刚刚的获取刷新令牌界面，将值粘贴到 client_cecret，然后把应用程序（客户端）ID 复制粘贴到 client_id（在左边的概述里面），最后点击刷新令牌即可</p><p>如果需要挂载 Sharepoint，完成上一步在弹出的界面会出现一个输入站点的地址，输入站点后点击获取 site_id 即可</p><p>将获取的值填入后台即可</p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/05/17/6282873ccaeec.png" alt="填入获取的值"></p><p>现在就全部完成了，可以开始用了</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>挂载走的是网盘，不走服务器的，所以可以不用担心流量问题了，目前刚刚开始使用 Alist，体验良好，而且手机 ftp 也可以进行连接，传东西更方便了，到时候把阿里云盘，百度云，蓝奏云一起挂上去，不出意外就可以养老了</p>]]></content>
    
    
    <summary type="html">来搭建一个自己的网盘吧</summary>
    
    
    
    <category term="博客建站" scheme="https://hexo.blog.lsilencej.top/categories/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%99/"/>
    
    
    <category term="折腾" scheme="https://hexo.blog.lsilencej.top/tags/%E6%8A%98%E8%85%BE/"/>
    
  </entry>
  
  <entry>
    <title>你好，Halo</title>
    <link href="https://hexo.blog.lsilencej.top/2022/05/07/%E4%BD%A0%E5%A5%BD%EF%BC%8CHalo-hello-halo/"/>
    <id>https://hexo.blog.lsilencej.top/2022/05/07/%E4%BD%A0%E5%A5%BD%EF%BC%8CHalo-hello-halo/</id>
    <published>2022-05-07T12:21:33.000Z</published>
    <updated>2022-05-16T09:52:31.251Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一直以来我都是用的 Hexo 静态博客，直到我下定决心入了人生中的第一台轻量服务器，想着要做些啥，于是便有了动态博客的想法</p><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>最初选择的 Typecho，奈何相比于 Hexo 来说，Typecho 的主题少的可怜，后来看上了 Halo的，Halo 部署发现操作没有 Typecho 那么简洁，需要一定的技术而不是简单的上传一个文件到后台服务器，查了查发现主题大多是 WordPress，尽管很早就听闻了这个博客框架的大名，真正部署还是第一次，部署过程也很顺利，主题确实很多，不过缺点就是后台实在是过于卡顿，而且不支持原生的 Markdown， 插件对于一些语法支持性不是特别好，在使用了几天过后，还是又回到了 Typecho，当时选用的是 AlanDecode 大佬的 <a class="link" href="https://github.com/AlanDecode/Typecho-Theme-VOID">VOID <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 主题，这个主题很精致，第一眼就吸引了我，<a class="link" href="https://blog.imalan.cn/archives/247/">VOID：现在可以公开的情报 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，作者的文笔也很好，但可惜主题已经很久没有维护了，以至于装在最新版本的 Typecho 上报了各种错，尽管最后一一解决了，但还是觉得心里不是滋味，于是又再一次弃坑了，中间也萌生了很多次要不还是选择静态博客的想法，然而因为各种项目的临近结项，迁移博客这件事也就搁置了一段时间</p><p>直到最近有空闲的时间了，想着要不做点啥吧，兜兜转转最后选择了 Halo，仔细研究了一下部署，其实好像也不是那么难？于是按着 Halo 的文档进行了第一次部署并换上新主题，部署不算简单，也不算很难，也就这么一回事，看中了 Sanarous 大佬的博客：<a class="link" href="https://bestzuo.cn/%EF%BC%8C%E6%8C%89%E7%9D%80%E5%A4%A7%E4%BD%AC%E7%9A%84%E6%A0%B7%E5%BC%8F%E4%B8%80%E7%82%B9%E7%82%B9%E4%BF%AE%E6%94%B9%EF%BC%8C%E9%87%87%E7%94%A8%E4%BA%86%E5%AF%92%E5%B1%B1%E4%B8%BB%E9%A2%98%E5%92%8C">https://bestzuo.cn/，按着大佬的样式一点点修改，采用了寒山主题和 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> sakura 主题，开始了这一个礼拜的主题样式美化，便有了 <a class="link" href="https://github.com/lsilencej/halo-theme-hshan-sakura">halo-theme-hshan-sakura <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 仓库的出现，着手于自用主题的开发，审美不太行，而且对于前端开发兴趣不是那么浓厚，一礼拜的时间，不断查资料，看源码，我也收获了许多，目前主题只优化了首页，其他分类页，标签页等都还没动工，但还是把这半成品先放出来用了</p><h2 id="浅谈-Halo"><a href="#浅谈-Halo" class="headerlink" title="浅谈 Halo"></a>浅谈 Halo</h2><p>Halo 博客是基于 Java 和 Freemarker 构建的，在这段时间的迁移，不论是 Halo 完善的文档，又或是 Halo 丰富的后台配置，还是 Halo 社区的活跃环境都让我惊艳到了，这是一个未来可期的博客框架</p><p>Halo 文档提供了各个环境上的部署以及一系列问题的解决方案，同时提供给开发者完善的指南，一系列的 API 接口等等</p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/05/07/62763a1946e9d.png" alt="Halo 文档"></p><p>后台功能也及其丰富，除了基础功能，也具有其他体验良好的功能，比如上传附件等，界面也很简洁</p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/05/07/62763b067dd0a.png" alt="Halo 后台"></p><p>你也可以在博客后台直接自定义全局 head 代码等</p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/05/07/62763bd510735.png" alt="自定义样式"></p><p>最令我体验良好的还是小工具功能，里面有博客备份以及导入 Hexo 文章并解析元数据的功能，在涉及了动态博客后，迁移便是一大问题，但这个原生的博客备份小工具很好的解决了这个问题，可以选择整站备份，导出数据或者导出 Markdown 文档，这是别的动态博客框架不能给我的体验</p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/05/07/62763c542d7f3.png" alt="小工具"></p><p>关于 Halo 社区，这也是一大令我惊艳的地方，社区的环境气氛很好，开发者互动很频繁，用户问题会立马得到解决，一些用户需求的功能也会很快列入开发计划，现在技术社区有这样的环境实为可贵</p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/05/07/62763ccf7c2b4.png" alt="Halo 社区"></p><p>Halo 框架也一直在更新，而且升级也很简便，开发者也在不断优化，博客以后就常驻 Halo 了，也期待 Halo 能有越来越多的功能</p>]]></content>
    
    
    <summary type="html">迁移到 Halo 博客了</summary>
    
    
    
    <category term="博客建站" scheme="https://hexo.blog.lsilencej.top/categories/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%99/"/>
    
    
    <category term="博客" scheme="https://hexo.blog.lsilencej.top/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Github 解决 Contribution 不增加</title>
    <link href="https://hexo.blog.lsilencej.top/2022/02/11/Github%20%E8%A7%A3%E5%86%B3%20Contribution%20%E4%B8%8D%E5%A2%9E%E5%8A%A0-github-contribution-issue/"/>
    <id>https://hexo.blog.lsilencej.top/2022/02/11/Github%20%E8%A7%A3%E5%86%B3%20Contribution%20%E4%B8%8D%E5%A2%9E%E5%8A%A0-github-contribution-issue/</id>
    <published>2022-02-11T08:23:49.000Z</published>
    <updated>2022-05-02T07:55:59.741Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天打开 github，突然发现我的 contribution 一直没增加，找了半天原因，发现是 github 开启了隐私邮箱，隐私邮箱是使用基于 ID 的 Github-provided noreply 地址，即 <strong>&lt;ID + <a class="link" href="mailto:&#117;&#x73;&#101;&#114;&#110;&#x61;&#x6d;&#x65;&#64;&#x75;&#x73;&#101;&#x72;&#x73;&#x2e;&#110;&#x6f;&#114;&#101;&#112;&#x6c;&#x79;&#46;&#x67;&#x69;&#x74;&#104;&#117;&#98;&#x2e;&#99;&#111;&#x6d;">username@users.noreply.github.com <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>&gt;</strong> ，然后很显然，这个和不开启隐私邮箱是不同的，然后由于 github 是根据邮箱来增加 Contribution 的，所以自然就加不上了</p><p>隐私邮箱开启位置：</p><p>个人设置 -&gt; email -&gt; Keep my email address private</p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/03/16/6231897f056a2.png" alt="开启隐私邮箱"></p><p>最好养成每次切换代码库时检查 author 信息的习惯</p><h2 id="查看-git-用户配置"><a href="#查看-git-用户配置" class="headerlink" title="查看 git 用户配置"></a>查看 git 用户配置</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 查看全局配置</span><br><span class="line">git config --global -l</span><br></pre></td></tr></table></figure></div><h2 id="修改-git-用户配置"><a href="#修改-git-用户配置" class="headerlink" title="修改 git 用户配置"></a>修改 git 用户配置</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 设置全局</span><br><span class="line">git config --global user.name "Author Name"</span><br><span class="line">git config --global user.email "Author Email"</span><br><span class="line"></span><br><span class="line">// 或者设置本地项目库配置</span><br><span class="line">git config user.name "Author Name"</span><br><span class="line">git config user.email "Author Email"</span><br></pre></td></tr></table></figure></div><h2 id="修改历史-commit-用户信息（用户名和邮箱）"><a href="#修改历史-commit-用户信息（用户名和邮箱）" class="headerlink" title="修改历史 commit 用户信息（用户名和邮箱）"></a>修改历史 commit 用户信息（用户名和邮箱）</h2><h3 id="变基"><a href="#变基" class="headerlink" title="变基"></a>变基</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 查看从 HEAD 开始的前面的 log</span><br><span class="line">git rebase -i HEAD~n</span><br></pre></td></tr></table></figure></div><p>按 i 切换为 INSERT 模式，将需要修改的 commit 前面的 pick 改成 edit</p><p>按 ESC 退出 INSERT 模式，输入 :wq 保存并退出</p><p>然后执行</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend --author="author &lt;xxx@xxx.com&gt;"</span><br><span class="line">git rebase --continue</span><br></pre></td></tr></table></figure></div><p>这样就保存了一组 log，如果需要多个 commit 修改，则进行多次重复操作</p><p>最后再强推上去就行了</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -f</span><br></pre></td></tr></table></figure></div><p>这种方法可以修改单个，也可以多个修改，但修改多个 commit 的效率较低且不能修改最初始的 commit，变基需要一个基点才能变，所以就有第二种方法</p><h2 id="git-filter-branch"><a href="#git-filter-branch" class="headerlink" title="git filter-branch"></a>git filter-branch</h2><p>这个指令就很无敌，可以进行批量修改，只需要定义一个过滤器，通过 shell 脚本的运行来完成修改</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line"></span><br><span class="line">git filter-branch --env-filter '</span><br><span class="line"></span><br><span class="line">an="$GIT_AUTHOR_NAME"</span><br><span class="line">am="$GIT_AUTHOR_EMAIL"</span><br><span class="line">cn="$GIT_COMMITTER_NAME"</span><br><span class="line">cm="$GIT_COMMITTER_EMAIL"</span><br><span class="line"></span><br><span class="line">if [ "$GIT_COMMITTER_EMAIL" = "[Your Old Email]" ]</span><br><span class="line">then</span><br><span class="line">    cn="[Your New Author Name]"</span><br><span class="line">    cm="[Your New Email]"</span><br><span class="line">fi</span><br><span class="line">if [ "$GIT_AUTHOR_EMAIL" = "[Your Old Email]" ]</span><br><span class="line">then</span><br><span class="line">    cn="[Your New Author Name]"</span><br><span class="line">    cm="[Your New Email]"</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">export GIT_AUTHOR_NAME="$an"</span><br><span class="line">export GIT_AUTHOR_EMAIL="$am"</span><br><span class="line">export GIT_COMMITTER_NAME="$cn"</span><br><span class="line">export GIT_COMMITTER_EMAIL="$cm"</span><br><span class="line">'</span><br></pre></td></tr></table></figure></div><p>新建一个 .sh 文件，复制粘贴上述代码，进行相应的修改，放在 clone 下来的根目录下，运行脚本就行</p><h2 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h2><p>最初初始化 git 配置的时候不知道咋的在用户配置的用户名和邮箱都加了个单引号，然后各种学习如何在 shell 命令中添加单引号的判断，这里做一个记录</p><p>shell 中双引号 “” 中才能进行变量的引用，单引号 ‘’ 不会改变内部的字符，所以如果引用单引号可以使用 ‘’’’ 两对单引号（不是一对双引号）</p><p>引用了单引号我本来以为就好了，结果运行脚本依旧没用，折腾了好久也没找到相应的解决方案，然后通过 echo 命令打印 log 中的邮箱，发现单引号是中文的，找到了问题所在，然后修改脚本把双引号换成了一对英文单引号嵌套中文单引号</p><p>记得一定要在 commit 前查看配置信息，注意 commit log 中用户信息的**正确格式是 “user.name &lt;user.email&gt;”**，中间没有任何单双引号</p><p>整个这个还把 shell 的语法学完了</p>]]></content>
    
    
    <summary type="html">解决 Contribution 未增加</summary>
    
    
    
    <category term="技术学习" scheme="https://hexo.blog.lsilencej.top/categories/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Github" scheme="https://hexo.blog.lsilencej.top/tags/Github/"/>
    
    <category term="Git" scheme="https://hexo.blog.lsilencej.top/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Android 学习笔记</title>
    <link href="https://hexo.blog.lsilencej.top/2022/01/22/Android%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-android-study-note/"/>
    <id>https://hexo.blog.lsilencej.top/2022/01/22/Android%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-android-study-note/</id>
    <published>2022-01-22T10:15:40.000Z</published>
    <updated>2022-05-02T07:54:48.531Z</updated>
    
    <content type="html"><![CDATA[<h2 id="系统控件"><a href="#系统控件" class="headerlink" title="系统控件"></a>系统控件</h2><h3 id="TextView"><a href="#TextView" class="headerlink" title="TextView"></a>TextView</h3><p>TextView 的 setText 方法接受的必须是一个 String，否则会报错</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">private TextView infoText;</span><br><span class="line">infoText = (TextView) findViewById(R.id.infoText);</span><br><span class="line">infoText.setText(String.valueOf(mainViewModel.counter));</span><br></pre></td></tr></table></figure></div><h2 id="数据持久化"><a href="#数据持久化" class="headerlink" title="数据持久化"></a>数据持久化</h2><h3 id="SharedPreferences"><a href="#SharedPreferences" class="headerlink" title="SharedPreferences"></a>SharedPreferences</h3><p>SharedPreferences 可以提供简单数据持久化存储</p><h4 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h4><p>通过  sharedPreferences 中的 edit() 生成 editor 的实例，通过一系列的 set 方法进行数据的存储</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">private SharedPreferences sharedPreferences;</span><br><span class="line">private SharedPreferences.Editor editor;</span><br><span class="line">editor = sharedPreferences.edit();</span><br><span class="line">editor.putInt("count_reserved", mainViewModel.counter);</span><br><span class="line">editor.apply();</span><br></pre></td></tr></table></figure></div><h4 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h4><p>通过 PreferenceManager.getDefaultSharedPreferences(this) 获取到对应的 SharedPreferences 对象，然后通过一系列的 get 方法进行读取，第一个参数为自定义的名字，第二个为默认值</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">private SharedPreferences sharedPreferences;</span><br><span class="line">sharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);</span><br><span class="line">int countReserved = sharedPreferences.getInt("count_reserved", 0);</span><br></pre></td></tr></table></figure></div><h3 id="Room"><a href="#Room" class="headerlink" title="Room"></a>Room</h3><p>ORM 框架，简单化 SQLite 数据库的使用</p><p>包含三部分：</p><ul><li>Entity，实体类，每一个实体类代表一张对应的表</li><li>Dao，数据访问对象，封装数据库的各项操作</li><li>Database，定义数据库的关键信息</li></ul><p>添加依赖：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def room_version = "2.4.1"</span><br><span class="line">implementation "androidx.room:room-runtime:$room_version"</span><br><span class="line">annotationProcessor "androidx.room:room-compiler:$room_version"</span><br></pre></td></tr></table></figure></div><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>User 实体类：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">@Entity // 表示这是一个 Entity，get 和 set 方法需要写明</span><br><span class="line">public class User {</span><br><span class="line"></span><br><span class="line">    @PrimaryKey(autoGenerate = true) // 设置主键，并设置为自动增长</span><br><span class="line">    private long id;</span><br><span class="line">    private String firstName;</span><br><span class="line">    private String lastName;</span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">    public User(String firstName, String lastName, int age) {</span><br><span class="line">        this.firstName = firstName;</span><br><span class="line">        this.lastName = lastName;</span><br><span class="line">        this.age = age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public String getFirstName() {</span><br><span class="line">        return firstName;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public String getLastName() {</span><br><span class="line">        return lastName;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public void setLastName(String lastName) {</span><br><span class="line">        this.lastName = lastName;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public void setFirstName(String firstName) {</span><br><span class="line">        this.firstName = firstName;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public int getAge() {</span><br><span class="line">        return age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public void setAge(int age) {</span><br><span class="line">        this.age = age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public long getId() {</span><br><span class="line">        return id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public void setId(long id) {</span><br><span class="line">        this.id = id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() {</span><br><span class="line">        return "User{" +</span><br><span class="line">                "id=" + id +</span><br><span class="line">                ", firstName='" + firstName + '\'' +</span><br><span class="line">                ", lastName='" + lastName + '\'' +</span><br><span class="line">                ", age=" + age +</span><br><span class="line">                '}';</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><p>UserDao：</p><p>利用 @Insert，@Update，@Delete 可以进行单个对象的操作，但是对于需要有 where 条件的操作，则需要使用到 @Query，@Query 采用 SQL 语句的形式执行命令，如果需要指定参数，则在 SQL 命令中所要添加的参数前加上 : 然后通过参数传入方法，具体使用如下：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@Dao</span><br><span class="line">public interface UserDao {</span><br><span class="line"></span><br><span class="line">    @Insert</span><br><span class="line">    public long insertUser(User user);</span><br><span class="line"></span><br><span class="line">    @Update</span><br><span class="line">    public void updateUser(User newUser);</span><br><span class="line"></span><br><span class="line">    @Query("select * from User")</span><br><span class="line">    public List&lt;User&gt; loadAllUsers();</span><br><span class="line"></span><br><span class="line">    @Query("select * from User where age &gt; :age")</span><br><span class="line">    public List&lt;User&gt; loadUsersOlderThan(int age);</span><br><span class="line"></span><br><span class="line">    @Delete</span><br><span class="line">    public void deleteUser(User user);</span><br><span class="line"></span><br><span class="line">    @Query("delete from User where lastName = :lastName")</span><br><span class="line">    public int deleteUserByLastName(String lastName);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><p>Database：</p><p>抽象方法继承 RoomDatabase，一般不改变</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@Database(version = 1, entities = {User.class}) // 标记这是一个 Database，同时设置版本号，实体类</span><br><span class="line">public abstract class AppDatabase extends RoomDatabase {</span><br><span class="line"></span><br><span class="line">    private static final String DATABASE_NAME = "app_database";</span><br><span class="line"></span><br><span class="line">    private static AppDatabase databaseInstance;</span><br><span class="line"></span><br><span class="line">    // 单例模式创建数据库实例，保证全局只有一个数据库，synchronized 保证线程安全</span><br><span class="line">    public static synchronized AppDatabase getDatabaseInstance(Context context) {</span><br><span class="line">        if (databaseInstance == null) {</span><br><span class="line">            databaseInstance = Room.databaseBuilder(context.getApplicationContext(), AppDatabase.class, DATABASE_NAME).build();</span><br><span class="line">        }</span><br><span class="line">        return databaseInstance;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public abstract UserDao userDao(); // 抽象方法，具体在 Room 底层实现</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h4 id="增删改查具体使用"><a href="#增删改查具体使用" class="headerlink" title="增删改查具体使用"></a>增删改查具体使用</h4><p>耗时逻辑写在子线程中，不能放在主线程内</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">UserDao userDao = AppDatabase.getDatabaseInstance(this).userDao();</span><br><span class="line">User user1 = new User("Tom", "Brady", 40);</span><br><span class="line">User user2 = new User("Tom", "Hanks", 63);</span><br><span class="line">Button addData = (Button) findViewById(R.id.addData);</span><br><span class="line">Button updateData = (Button) findViewById(R.id.updateData);</span><br><span class="line">Button deleteData = (Button) findViewById(R.id.deleteData);</span><br><span class="line">Button queryData = (Button) findViewById(R.id.queryData);</span><br><span class="line">addData.setOnClickListener(new View.OnClickListener() {</span><br><span class="line">    @Override</span><br><span class="line">    public void onClick(View view) {</span><br><span class="line">        new Thread(new Runnable() {</span><br><span class="line">            @Override</span><br><span class="line">            public void run() {</span><br><span class="line">                user1.setId(userDao.insertUser(user1));</span><br><span class="line">                user2.setId(userDao.insertUser(user2));</span><br><span class="line">            }</span><br><span class="line">        }).start();</span><br><span class="line">    }</span><br><span class="line">});</span><br><span class="line">updateData.setOnClickListener(new View.OnClickListener() {</span><br><span class="line">    @Override</span><br><span class="line">    public void onClick(View view) {</span><br><span class="line">        new Thread(new Runnable() {</span><br><span class="line">            @Override</span><br><span class="line">            public void run() {</span><br><span class="line">                user1.setAge(42);</span><br><span class="line">                userDao.updateUser(user1);</span><br><span class="line">            }</span><br><span class="line">        }).start();</span><br><span class="line">    }</span><br><span class="line">});</span><br><span class="line">deleteData.setOnClickListener(new View.OnClickListener() {</span><br><span class="line">    @Override</span><br><span class="line">    public void onClick(View view) {</span><br><span class="line">        new Thread(new Runnable() {</span><br><span class="line">            @Override</span><br><span class="line">            public void run() {</span><br><span class="line">                userDao.deleteUserByLastName("Hanks");</span><br><span class="line">            }</span><br><span class="line">        }).start();</span><br><span class="line">    }</span><br><span class="line">});</span><br><span class="line">queryData.setOnClickListener(new View.OnClickListener() {</span><br><span class="line">    @Override</span><br><span class="line">    public void onClick(View view) {</span><br><span class="line">        new Thread(new Runnable() {</span><br><span class="line">            @Override</span><br><span class="line">            public void run() {</span><br><span class="line">                for (User user : userDao.loadAllUsers()) {</span><br><span class="line">                    Log.d(TAG, user.toString());</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }).start();</span><br><span class="line">    }</span><br><span class="line">});</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h4 id="升级数据库"><a href="#升级数据库" class="headerlink" title="升级数据库"></a>升级数据库</h4><p>开发测试阶段可以直接使用 fallbackToDestructiveMigration()，表示在每一次版本号更新后都会重建数据库，之前所有保存的数据都丢失</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">databaseInstance = Room.databaseBuilder(context.getApplicationContext(), AppDatabase.class, DATABASE_NAME)</span><br><span class="line">.fallbackToDestructiveMigration()</span><br><span class="line">.build();</span><br></pre></td></tr></table></figure></div><p><strong>升级到版本2</strong></p><p>添加数据库表：Book</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">@Entity</span><br><span class="line">public class Book {</span><br><span class="line"></span><br><span class="line">    @PrimaryKey(autoGenerate = true)</span><br><span class="line">    private long id = 0;</span><br><span class="line">    private String name;</span><br><span class="line">    private int pages;</span><br><span class="line">    private String author;</span><br><span class="line"></span><br><span class="line">    public Book(String name, int pages) {</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.pages = pages;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public long getId() {</span><br><span class="line">        return id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public void setId(long id) {</span><br><span class="line">        this.id = id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public String getName() {</span><br><span class="line">        return name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public void setName(String name) {</span><br><span class="line">        this.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public int getPages() {</span><br><span class="line">        return pages;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public void setPages(int pages) {</span><br><span class="line">        this.pages = pages;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() {</span><br><span class="line">        return "Book{" +</span><br><span class="line">                "id=" + id +</span><br><span class="line">                ", name='" + name + '\'' +</span><br><span class="line">                ", pages=" + pages +</span><br><span class="line">                '}';</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><p>添加 BookDao：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Dao</span><br><span class="line">public interface BookDao {</span><br><span class="line"></span><br><span class="line">    @Insert</span><br><span class="line">    public Long insertBook(Book book);</span><br><span class="line"></span><br><span class="line">    @Query("select * from Book")</span><br><span class="line">    public List&lt;Book&gt; loadAllBooks();</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><p>修改 Database：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Database(version = 2, entities = {User.class, Book.class}) // 修改版本号</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">private static final Migration MIGRATION_1_2 = new Migration(1, 2) { // 通过 Migration 进行数据库的迁移更新，表示从版本1到版本2</span><br><span class="line">    @Override</span><br><span class="line">    public void migrate(@NonNull SupportSQLiteDatabase database) { // 写明相应建表语句</span><br><span class="line">        database.execSQL("create table Book " +</span><br><span class="line">                "(id integer primary key autoincrement not null, " +</span><br><span class="line">                "name text not null, " +</span><br><span class="line">                "pages integer not null)");</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">databaseInstance = Room.databaseBuilder(context.getApplicationContext(), AppDatabase.class, DATABASE_NAME)</span><br><span class="line">        .addMigrations(MIGRATION_1_2) //添加更新操作</span><br><span class="line">        .build();</span><br></pre></td></tr></table></figure></div><p><strong>升级到版本3</strong></p><p>添加 author 列到 Book 表中</p><p>Book 实体类：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">@Entity</span><br><span class="line">public class Book {</span><br><span class="line"></span><br><span class="line">    @PrimaryKey(autoGenerate = true)</span><br><span class="line">    private long id = 0;</span><br><span class="line">    private String name;</span><br><span class="line">    private int pages;</span><br><span class="line">    private String author;</span><br><span class="line"></span><br><span class="line">    public Book(String name, int pages) {</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.pages = pages;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public long getId() {</span><br><span class="line">        return id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public void setId(long id) {</span><br><span class="line">        this.id = id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public String getName() {</span><br><span class="line">        return name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public void setName(String name) {</span><br><span class="line">        this.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public int getPages() {</span><br><span class="line">        return pages;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public void setPages(int pages) {</span><br><span class="line">        this.pages = pages;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public String getAuthor() {</span><br><span class="line">        return author;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public void setAuthor(String author) {</span><br><span class="line">        this.author = author;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() {</span><br><span class="line">        return "Book{" +</span><br><span class="line">                "id=" + id +</span><br><span class="line">                ", name='" + name + '\'' +</span><br><span class="line">                ", pages=" + pages +</span><br><span class="line">                ", author='" + author + '\'' +</span><br><span class="line">                '}';</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><p>Database：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Database(version = 3, entities = {User.class, Book.class}) // 修改版本号</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public static final Migration MIGRATION_2_3 = new Migration(2, 3) { // 添加相应的 Migration</span><br><span class="line">    @Override</span><br><span class="line">    public void migrate(@NonNull SupportSQLiteDatabase database) {</span><br><span class="line">        database.execSQL("alter table Book" +</span><br><span class="line">                "add column author text not null default 'unknown'");</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">databaseInstance = Room.databaseBuilder(context.getApplicationContext(), AppDatabase.class, DATABASE_NAME)</span><br><span class="line">        .addMigrations(MIGRATION_1_2, MIGRATION_2_3) // 可以连续升级到版本3，如果用户数据库处于版本1，则升级两次操作</span><br><span class="line">        .build();</span><br></pre></td></tr></table></figure></div><p><strong>报错</strong></p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Schema export directory is not provided to the annotation processor so we cannot export the schema. You can either provide room.schemaLocation annotation processor argument OR set exportSchema to false.</span><br></pre></td></tr></table></figure></div><p>安卓room构建错误</p><ul><li><p>解决方案一</p><p> Database 设置 exportSchema 注解为 false（不建议）</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Database(version = 2, entities = {User.class, Book.class}, exportSchema = false)</span><br></pre></td></tr></table></figure></div></li><li><p>解决方案二</p><p>在项目中gradle中通过 annotationProcessorOptions 注解，为 <code>room.schemaLocation</code> 指定schemas的子文件夹</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">android {</span><br><span class="line">    compileSdk 32</span><br><span class="line"></span><br><span class="line">    defaultConfig {</span><br><span class="line">        applicationId "com.lsilencej.counter"</span><br><span class="line">        minSdk 24</span><br><span class="line">        targetSdk 32</span><br><span class="line">        versionCode 1</span><br><span class="line">        versionName "1.0"</span><br><span class="line"></span><br><span class="line">        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"</span><br><span class="line"></span><br><span class="line">// 指定 room.schemaLocation 生成的文件路径</span><br><span class="line">        javaCompileOptions {</span><br><span class="line">            annotationProcessorOptions {</span><br><span class="line">                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div></li></ul><h2 id="Jetpack"><a href="#Jetpack" class="headerlink" title="Jetpack"></a>Jetpack</h2><h3 id="ViewModel"><a href="#ViewModel" class="headerlink" title="ViewModel"></a>ViewModel</h3><p>通过 ViewModel 来存储数据，为了不让 Activity 处理太多东西，最主要的是维持数据的持久性存储，而不是每次重建 Activity 数据丢失，MVVM 框架中的第一个 V </p><p>在此之前需要导入相关依赖：（具体版本参考<a class="link" href="https://developer.android.google.cn/topic/libraries/architecture/viewmodel?hl=zh_cn#java">谷歌开发者文档 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>）</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def lifecycle_version = "2.4.0"</span><br><span class="line">implementation "androidx.lifecycle:lifecycle-viewmodel:$lifecycle_version"</span><br></pre></td></tr></table></figure></div><p>新建 MainViewModel 继承 ViewModel：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class MainViewModel extends ViewModel {</span><br><span class="line"></span><br><span class="line">    public int counter = 0;</span><br><span class="line"></span><br><span class="line">    public MainViewModel(int countReserved) {</span><br><span class="line">        this.counter = countReserved;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><p>初始化：（ ViewModelProvider 传入 Activity 实例，get 传入 ViewModel ）</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">private MainViewModel mainViewModel;</span><br><span class="line">mainViewModel = new ViewModelProvider(this).get(MainViewModel.class);</span><br></pre></td></tr></table></figure></div><p>如果需要和参数绑定，则需要新建一个 MainViewModelFactory 类实现 ViewModelProvider.Factory 接口，同时重写 create 方法：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class MainViewModelFactory implements ViewModelProvider.Factory {</span><br><span class="line"></span><br><span class="line">    private int countReserved;</span><br><span class="line"></span><br><span class="line">    public MainViewModelFactory(int countReserved) {</span><br><span class="line">        this.countReserved = countReserved;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    @NonNull</span><br><span class="line">    @Override</span><br><span class="line">    public &lt;T extends ViewModel&gt; T create(@NonNull Class&lt;T&gt; aClass) {</span><br><span class="line">        return (T) new MainViewModel(countReserved);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><p>同时初始化也需要增加一个参数：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">private MainViewModel mainViewModel;</span><br><span class="line">mainViewModel = new ViewModelProvider(this, new MainViewModelFactory(countReserved)).get(MainViewModel.class);</span><br></pre></td></tr></table></figure></div><h3 id="LifecycleEventObserver"><a href="#LifecycleEventObserver" class="headerlink" title="LifecycleEventObserver"></a>LifecycleEventObserver</h3><p>生命周期监听器</p><p>实现接口，重写 onStateChanged 方法，能够在类中感知到 Activity 的生命周期，并进行相关操作：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class MyObserver implements LifecycleEventObserver {</span><br><span class="line"></span><br><span class="line">    private static final String TAG = "MyObserver";</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onStateChanged(@NonNull LifecycleOwner source, @NonNull Lifecycle.Event event) {</span><br><span class="line">        switch (event) {</span><br><span class="line">            case ON_CREATE:</span><br><span class="line">                Log.d(TAG, "ON CREATE");</span><br><span class="line">                break;</span><br><span class="line">            case ON_STOP:</span><br><span class="line">                Log.d(TAG, "ON STOP");</span><br><span class="line">                break;</span><br><span class="line">            default:</span><br><span class="line">                break;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><p>同时在相关 Activity 中 add 进去：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getLifecycle().addObserver(new MyObserver());</span><br></pre></td></tr></table></figure></div><h3 id="LiveData"><a href="#LiveData" class="headerlink" title="LiveData"></a>LiveData</h3><p>响应式组件，观察数据变化，通常与 ViewModel 结合使用，当 ViewModel 处理耗时线程时使用</p><p>初始化，通过 getValue() 和 setValue() 方法来取放值，postValue() 用于在子线程中给 LiveData 设置数据：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">private MutableLiveData&lt;Integer&gt; counter = new MutableLiveData&lt;&gt;();</span><br><span class="line">counter.setValue(countReserved);</span><br><span class="line">int count = 0;</span><br><span class="line">if (counter.getValue() != null) {</span><br><span class="line">count = counter.getValue();</span><br><span class="line">}</span><br><span class="line">counter.setValue(count + 1);</span><br></pre></td></tr></table></figure></div><h3 id="WorkManager"><a href="#WorkManager" class="headerlink" title="WorkManager"></a>WorkManager</h3><p>处理定时任务，适合执行一些定期和服务器交互的任务，比如周期性同步数据等等</p><p>添加依赖：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def work_version = "2.7.1"</span><br><span class="line">// (Java only)</span><br><span class="line">implementation "androidx.work:work-runtime:$work_version"</span><br></pre></td></tr></table></figure></div><ul><li><p>定义一个后台任务，并实现具体逻辑</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class SimpleWorker extends Worker { // 继承 Worker 类</span><br><span class="line"></span><br><span class="line">    private static final String TAG = "SimpleWorker";</span><br><span class="line"></span><br><span class="line">    private Context context;</span><br><span class="line">    private WorkerParameters workerParameters;</span><br><span class="line"></span><br><span class="line">    public SimpleWorker(Context context, WorkerParameters workerParameters) {</span><br><span class="line">        super(context, workerParameters); // 调用构造函数</span><br><span class="line">        this.context = context;</span><br><span class="line">        this.workerParameters = workerParameters;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    @NonNull</span><br><span class="line">    @Override</span><br><span class="line">    public Result doWork() { // 重写 doWork() 方法，可以执行耗时逻辑</span><br><span class="line">        Log.d(TAG, "do work is SimpleWorker");</span><br><span class="line">        return Result.success(); // 返回结果</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div></li><li><p>配置后台任务</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">WorkRequest workRequest = new OneTimeWorkRequest.Builder(SimpleWorker.class).build(); // 执行一次后台任务</span><br><span class="line">WorkRequest workRequest = new PeriodicWorkRequest.Builder(SimpleWorker.class, 15, TimeUnit.MINUTES).build(); // 周期性后台任务，传入的运行时间间隔不能少于 15min</span><br></pre></td></tr></table></figure></div></li><li><p>通过 enqueue() 方法执行</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WorkManager.getInstance(MainActivity.this).enqueue(workRequest);</span><br></pre></td></tr></table></figure></div></li></ul><p><strong>其他操作</strong></p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">WorkRequest workRequest = new OneTimeWorkRequest.Builder(SimpleWorker.class)</span><br><span class="line">        .setInitialDelay(5, TimeUnit.MINUTES) // 指定延迟 5min 后执行</span><br><span class="line">        .addTag("simple") // 添加标签</span><br><span class="line">        .setBackoffCriteria(BackoffPolicy.LINEAR, 10, TimeUnit.SECONDS) // 如果返回的是 Result.retry()，则 10s 继续执行，第一个参数如果是 LINEAR，则表示下次重试时间以线性方式延迟，如果是 EXPONENTIAL 则表示下次重试时间以指数方式延迟</span><br><span class="line">        .build();</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">WorkManager.getInstance(MainActivity.this).cancelAllWorkByTag("simple"); // 取消指定标签的后台任务，标签可以包括多个后台任务</span><br><span class="line">WorkManager.getInstance(MainActivity.this).cancelWorkById(workRequest.getId()); // 取消指定 id 的后台任务，只能取消一个</span><br><span class="line">WorkManager.getInstance(MainActivity.this).cancelAllWork(); // 取消所有后台任务</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">WorkManager.getInstance(MainActivity.this)</span><br><span class="line">        .getWorkInfoByIdLiveData(workRequest.getId()) // 返回的是 LiveData</span><br><span class="line">        .observe(MainActivity.this, new Observer&lt;WorkInfo&gt;() { // 监听后台的运行结果</span><br><span class="line">            @Override</span><br><span class="line">            public void onChanged(WorkInfo workInfo) {</span><br><span class="line">                if (workInfo.getState() == WorkInfo.State.SUCCEEDED) {</span><br><span class="line">                    Log.d(TAG, "do work succeeded");</span><br><span class="line">                } else if (workInfo.getState() == WorkInfo.State.FAILED) {</span><br><span class="line">                    Log.d(TAG, "do work failed");</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        });</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">WorkManager.getInstance(MainActivity.this) // 链式任务</span><br><span class="line">        .beginWith(sync)</span><br><span class="line">        .then(compress)</span><br><span class="line">        .then(upload)</span><br><span class="line">        .enqueue()</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
    <summary type="html">在学习 Android 的路上越行越远。。。</summary>
    
    
    
    <category term="技术学习" scheme="https://hexo.blog.lsilencej.top/categories/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Android" scheme="https://hexo.blog.lsilencej.top/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android 8.0 以上无法接收静态广播的解决办法</title>
    <link href="https://hexo.blog.lsilencej.top/2022/01/13/Android%2080%20%E4%BB%A5%E4%B8%8A%E6%97%A0%E6%B3%95%E6%8E%A5%E6%94%B6%E9%9D%99%E6%80%81%E5%B9%BF%E6%92%AD%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95-android-static-broadcast/"/>
    <id>https://hexo.blog.lsilencej.top/2022/01/13/Android%2080%20%E4%BB%A5%E4%B8%8A%E6%97%A0%E6%B3%95%E6%8E%A5%E6%94%B6%E9%9D%99%E6%80%81%E5%B9%BF%E6%92%AD%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95-android-static-broadcast/</id>
    <published>2022-01-13T09:33:57.000Z</published>
    <updated>2022-09-03T02:02:57.376Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>学习四大组件中的广播时，自定义广播一直接收不到，然后发现了在 Android 8.0 以上的系统对静态广播做出了限制（<strong>本地广播</strong>不受影响）</p><p>对于这个，Google 开发者文档是这样说的：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/03/16/623185f3c7e45.png"></p><p>然后就开始了踩坑和从坑里爬起来的过程……</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><ul><li><p><strong>使用动态广播代替原来的静态广播</strong>（官方建议）</p></li><li><p>在 intent 发送前加上相应的包名</p><p>直接声明包名，将隐式广播变为显式广播，就正常在清单中进行注册了</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = new Intent("com.lsilencej.broadcasttest.MY_BROADCAST");</span><br><span class="line">intent.setPackage(getPackageName());</span><br><span class="line">sendBroadcast(intent, null);</span><br></pre></td></tr></table></figure></div></li><li><p>给 intent 添加 Component 参数  </p><p>Component 第一个参数为包名，第二个参数为广播接收器的绝对路径</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = new Intent("com.lsilencej.broadcasttest.MY_BROADCAST");</span><br><span class="line">intent.setComponent(new ComponentName(getPackageName(), "com.lsilencej.broadcasttest.MyBroadcastReceiver"));</span><br></pre></td></tr></table></figure></div></li><li><p>如果要发送有序广播，则可以给 intent 加上一个 flag</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = new Intent("com.lsilencej.broadcasttest.MY_BROADCAST");</span><br><span class="line">intent.addFlags(0x01000000);</span><br></pre></td></tr></table></figure></div><p>为什么是这个 flag？详见：<a class="link" href="https://www.jianshu.com/p/5283ebc225d5?utm_source=oschina-app">在Android8.0上突破隐式广播的限制 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>最好还是使用动态广播（谷歌为了保护用户隐私的操作）</p><p>可以采用如下方法来发送有序广播</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = new Intent("com.lsilencej.broadcasttest.MY_BROADCAST");</span><br><span class="line">sendOrderedBroadcast(intent, null);</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
    <summary type="html">继续踩坑</summary>
    
    
    
    <category term="技术学习" scheme="https://hexo.blog.lsilencej.top/categories/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Android" scheme="https://hexo.blog.lsilencej.top/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Activity 和 AppCompatActivity 的区别</title>
    <link href="https://hexo.blog.lsilencej.top/2022/01/11/Activity%20%E5%92%8C%20AppCompatActivity%20%E7%9A%84%E5%8C%BA%E5%88%AB-activity-and-appcompatactivity/"/>
    <id>https://hexo.blog.lsilencej.top/2022/01/11/Activity%20%E5%92%8C%20AppCompatActivity%20%E7%9A%84%E5%8C%BA%E5%88%AB-activity-and-appcompatactivity/</id>
    <published>2022-01-11T12:08:34.000Z</published>
    <updated>2022-09-03T02:03:09.546Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>最近在学习 android 开发<del>（被逼无奈）</del>，偶然发现 activity 有两个继承的类，而且不相同，一个是 Activity，另一个则是 AppcompatActivity，这两个类都可以继承来编写活动的逻辑，不过还是有一些微小的差别的，比如对于主题使用的语法不同（踩坑），这里吹一波 Google 的文档，无论什么项目的文档都写得巨详细，对新手的学习也特别友好</p><h2 id="差异"><a href="#差异" class="headerlink" title="差异"></a>差异</h2><p>最明显的差异就是继承两者的界面不同：</p><ul><li><p>继承 Activity 的界面（无 ActionBar）：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/03/16/62317eddc49a9.jpg" alt="Activity 无 ActionBar"></p><p>代码如下</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public class MainActivity extends Activity {</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) {</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        if (savedInstanceState != null) {</span><br><span class="line">            String tempData = savedInstanceState.getString("data_key");</span><br><span class="line">        }</span><br><span class="line">        Button startNormalActivity = (Button) findViewById(R.id.start_normal_activity);</span><br><span class="line">        Button startDialogActivity = (Button) findViewById(R.id.start_dialog_activity);</span><br><span class="line">        startNormalActivity.setOnClickListener(new View.OnClickListener() {</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(View view) {</span><br><span class="line">                Intent intent = new Intent(MainActivity.this, NormalActivity.class);</span><br><span class="line">                startActivity(intent);</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">        startDialogActivity.setOnClickListener(new View.OnClickListener() {</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(View view) {</span><br><span class="line">                Intent intent = new Intent(MainActivity.this, DialogActivity.class);</span><br><span class="line">                startActivity(intent);</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div></li><li><p>继承 AppcompatActivity 的界面（有 ActionBar）：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/03/16/62317eeb6e2fc.jpg" alt="AppcompatActivity 有 ActionBar"></p><p>代码如下</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public class MainActivity extends AppCompatActivity {</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) {</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        if (savedInstanceState != null) {</span><br><span class="line">            String tempData = savedInstanceState.getString("data_key");</span><br><span class="line">        }</span><br><span class="line">        Button startNormalActivity = (Button) findViewById(R.id.start_normal_activity);</span><br><span class="line">        Button startDialogActivity = (Button) findViewById(R.id.start_dialog_activity);</span><br><span class="line">        startNormalActivity.setOnClickListener(new View.OnClickListener() {</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(View view) {</span><br><span class="line">                Intent intent = new Intent(MainActivity.this, NormalActivity.class);</span><br><span class="line">                startActivity(intent);</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">        startDialogActivity.setOnClickListener(new View.OnClickListener() {</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(View view) {</span><br><span class="line">                Intent intent = new Intent(MainActivity.this, DialogActivity.class);</span><br><span class="line">                startActivity(intent);</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div></li></ul><p>对比两段代码可以看出，只有继承的头文件不同，运行出来的界面也不一样，顶部的 ActionBar 在 AS 中只有继承 AppCompatActivity时才会出现（注：在 Eclipse 中继承 Activity 的效果和 AS 中继承 AppCompatActivity 的效果才一样）</p><p>去掉 AppCompatActivity 的标题栏</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (getSupportActionBar() != null){</span><br><span class="line">getSupportActionBar().hide();</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><p>Google 官方 api 文档对于 AppCompatActivity 功能的介绍</p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/03/16/62317ef665a21.png"></p><p>贴一段英文的科普回答</p><p><code>Activity</code> is the baseline. Every activity inherits from <code>Activity</code>, directly or indirectly.</p><p><code>FragmentActivity</code> is for use with the backport of fragments found in the <code>support-v4</code> and <code>support-v13</code> libraries. The native implementation of fragments was added in API Level 11, which is lower than your proposed <code>minSdkVersion</code> values. The only reason why you would need to consider <code>FragmentActivity</code> specifically is if you want to use nested fragments (a fragment holding another fragment), as that was not supported in native fragments until API Level 17.</p><p><code>AppCompatActivity</code> is from the <code>appcompat-v7</code> library. Principally, this offers a backport of the action bar. Since the native action bar was added in API Level 11, you do not need <code>AppCompatActivity</code> for that. However, current versions of <code>appcompat-v7</code> also add a limited backport of the Material Design aesthetic, in terms of the action bar and various widgets. There are pros and cons of using <code>appcompat-v7</code>, well beyond the scope of this specific Stack Overflow answer.</p><p><code>ActionBarActivity</code> is the old name of the base activity from <code>appcompat-v7</code>. For various reasons, they wanted to change the name. Unless some third-party library you are using insists upon an <code>ActionBarActivity</code>, you should prefer <code>AppCompatActivity</code> over <code>ActionBarActivity</code>.</p><p>So, given your <code>minSdkVersion</code> in the 15-16 range:</p><ul><li>If you want the backported Material Design look, use <code>AppCompatActivity</code></li><li>If not, but you want nested fragments, use <code>FragmentActivity</code></li><li>If not, use <code>Activity</code></li></ul><p>Just adding from comment as note: <code>AppCompatActivity</code> extends <code>FragmentActivity</code>, so anyone who needs to use features of <code>FragmentActivity</code> can use <code>AppCompatActivity</code>.</p><p>大致意思就是 AppcompatActivity 兼容老版本的新功能，如果你要在老版本系统使用 md 设计风格，就用 AppCompatActivity，如果你不想使用 md，但你又想使用 fragments，那你就用 FragmentActivity，如果你都不想要，那就直接用 Activity，当然由于 AppCompatActivity 又是继承 FragmentActivity 的，所以用 AppCompatActivity 就够了</p><h2 id="加载流程的区别"><a href="#加载流程的区别" class="headerlink" title="加载流程的区别"></a>加载流程的区别</h2><p>通过分析源码可知，Activity 关于界面的绘制实际上是交给 PhoneWindow 中的 setContentView 实现的，而对于 AppCompatActivity 来说，通过拦截 View 的创建来实现对低版本进行相应的兼容，不执行系统的 onCreateView，而是执行自己的 onCreateView 进行替换所有系统的 View 控件</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Activity 和 AppCompatActivity 主要有两点变化</p><ul><li>主界面带有 ActionBar 的标题栏</li><li>theme 主题只能使用 android:theme=”@style/Theme.AppCompat.(主题)”, 而不能使用 android:style,否则会<strong>报错</strong>（踩坑警告！！！）</li></ul>]]></content>
    
    
    <summary type="html">学习 android 开发时的踩坑记录</summary>
    
    
    
    <category term="技术学习" scheme="https://hexo.blog.lsilencej.top/categories/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Android" scheme="https://hexo.blog.lsilencej.top/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>红黑树详解</title>
    <link href="https://hexo.blog.lsilencej.top/2021/11/16/%E7%BA%A2%E9%BB%91%E6%A0%91%E8%AF%A6%E8%A7%A3-red-black-tree/"/>
    <id>https://hexo.blog.lsilencej.top/2021/11/16/%E7%BA%A2%E9%BB%91%E6%A0%91%E8%AF%A6%E8%A7%A3-red-black-tree/</id>
    <published>2021-11-16T09:50:34.000Z</published>
    <updated>2022-05-02T07:53:52.701Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>最近在研究 java 底层，由于集合框架的 Treemap 是基于红黑树实现的，最近数据结构课程刚好讲到二叉查找树和平衡树的实现，决定写一篇博客记录，顺便把算法导论这一部分啃了</p><h2 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h2><h3 id="大概"><a href="#大概" class="headerlink" title="大概"></a>大概</h3><p>红黑树顾名思义是树形结构，属于平衡搜索树的一种，基于二叉查找树和平衡二叉树的结构实现的，但其并非为完全平衡二叉树，即它的平衡因子的绝对值并非严格小于 1，由于是平衡搜索树，可以保证在最坏情况下基本动态集合操作的时间复杂度为 O(lgn)</p><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>既然一种数据结构存在，那肯定有它存在的理由，对于 AVL 树来说，它是一棵带有平衡条件的二叉查找树，基于不断旋转的操作进行维护平衡，这种旋转操作往往非常耗时，特别是当插入和删除的操作特别多时，为了维护平衡必须不断进行旋转，所以对于插入和删除操作多的情况下，AVL 树的表现不尽人意，AVL 树适合于插入和删除次数比较少，但查找多的情况</p><p>对于红黑树来说，便很好的解决了这个痛点，通过降低维护平衡的代价来换取更高的效率，<strong>红黑树确保没有一条路径比其他路径长出两倍</strong>，因此是近似平衡的，弱平衡的维护使得插入和删除节点的旋转次数大大减少，<strong>插入最多进行两次旋转，删除最多进行三次旋转</strong>，但由于弱平衡，在相同节点的情况下，AVL 树的高度低于红黑树，红黑树适用于插入和删除次数多的情况</p><h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><ul><li>性质 1：每个结点是红色的或者黑色的</li><li>性质 2：根结点是黑色的</li><li>性质 3：每个叶结点 (NIL) 是黑色的</li><li>性质 4：如果一个结点是红色的，那么它的两个子结点均为黑色的（即两个红色结点不能连在一起）</li><li>性质 5：任意一结点到每个叶子结点的路径都包含相等数量的黑色结点（如果一个结点存在黑色子结点，那么一定具有两个子结点）</li></ul><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/03/16/6231988488f84.png" alt="一颗常规的红黑树"></p><p>由于黑色结点数量相同，这种平衡也被称为<strong>黑色完美平衡</strong>，由于本身也是基于二叉查找树，所以二叉查找树具有的性质他都有</p><p>红黑树在二叉查找树的基础上增加了一个存储位来表示结点的颜色，可以为 RED 或者 BLACK，新增加的结点默认为<strong>红色</strong>，由于性质 5，一条路径上黑色结点数必然相等，而插入的如果是黑色的则破坏了平衡</p><p>每个叶结点是相同的，而对每个叶结点都开辟一块空间属实浪费，于是我们可以使用一个哨兵 T.nil 进行替代，如下</p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/03/16/6231988969165.png" alt="带哨兵的常规红黑树"></p><p>从某个结点 x 出发，到达一个叶结点的任意一条简单路径上的黑色结点个数称为该结点的<strong>黑高</strong>，记为 bh(x)</p><p>一棵有 n 个内部结点的红黑树的高度至多为 2lg(n + 1)</p><h3 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h3><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/03/16/6231988e9887f.png" alt="旋转"></p><p>当 x 作左旋时，假设 x 的右孩子不为 NIL，令其为 y， y 的左孩子成为 x 的右孩子，并将 y 成为 x 的父结点</p><p>当 y 作右旋时，假设 y 的左孩子不为 NIL，令其为 x， x 的右孩子成为 y 的左孩子，并将 x 成为 y 的父结点</p><p>左旋和右旋操作都在 O(1) 时间内运行完成，在旋转操作中<strong>只有指针改变</strong>，其他都不改变</p><p>左旋和右旋操作代码<strong>对称</strong> </p><p>下面是两个操作的例子</p><p>左旋：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/03/16/62319892eafd6.png" alt="左旋"></p><p>右旋：</p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/03/16/6231989a54a2a.png" alt="右旋"></p><p>左旋只影响旋转结点及其右子树的结构，把右子树的左子树往自身右子树移动了</p><p>右旋只影响旋转结点及其左子树的结构，把左子树的右子树往自身左子树移动了</p><p>所以旋转操作是局部的，如果要保持红黑树的性质，则必须还加一个变色的操作，<strong>红黑树通过旋转和变色达到自平衡</strong></p><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><p>本身红黑树就是一棵二叉搜索树，因此红黑树的查找和二叉搜索树相同</p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/03/16/623198a04dd1f.png" alt="查找"></p><ul><li>从根结点开始查找，把根结点设为当前结点</li><li>若当前结点为空，则返回 NULL</li><li>若当前结点不为空，则比较 Key 值，若相等则返回当前结点，查找成功</li><li>若当前结点的 Key 值不相等，比较大小，如果当前结点的值较大，则往左子树继续查找</li><li>若当前结点的 Key 值不相等，比较大小，如果当前结点的值较小，则往右子树继续查找</li></ul><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><p>要想插入结点，必须找到结点的所处位置，通过查找操作查找出该结点所属的正确位置，然后新建结点建立与原树的联系，插入的结点为<strong>红色</strong>，这样可以不需要做自平衡操作，如果插入的结点为黑色，则需要进行自平衡操作维护红黑树的性质 5</p><p>插入后应根据不同情况进行变色维持平衡</p><h4 id="情况一"><a href="#情况一" class="headerlink" title="情况一"></a>情况一</h4><p><strong>红黑树为空树</strong></p><p>这是最简单的一种情况，直接将插入结点作为根节点，由于性质 2，根节点为黑色，则将新插入的结点变色成为黑色</p><h4 id="情况二"><a href="#情况二" class="headerlink" title="情况二"></a>情况二</h4><p><strong>插入结点的 Key 已存在</strong></p><p>由于原树已经是一棵红黑树，已经保持平衡，所以直接更新当前插入结点的颜色为替代结点的颜色，然后更新结点的值完成插入</p><h4 id="情况三"><a href="#情况三" class="headerlink" title="情况三"></a>情况三</h4><p><strong>插入结点的父结点为黑色结点</strong></p><p>插入的结点为红色，并不影响红黑树的平衡，所以可以直接插入</p><h4 id="情况四"><a href="#情况四" class="headerlink" title="情况四"></a>情况四</h4><p><strong>插入结点的父结点为红色结点</strong></p><p>这种情况就需要分类讨论了，不过每种小情况都是左右对称的</p><h5 id="叔结点存在且为红色结点"><a href="#叔结点存在且为红色结点" class="headerlink" title="叔结点存在且为红色结点"></a>叔结点存在且为红色结点</h5><ul><li>F 和 U 设为黑色</li><li>G 设为红色</li><li>G 设为当前插入的结点，向上递归维持平衡</li></ul><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/03/16/623198a60e369.png" alt="左"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/03/16/623198ab69f1f.png" alt="右"></p><p>简单的两步修改成功维护了子树的平衡，每条路径上的黑色结点个数相等，而且两个红色结点也没有连在一起</p><p>如果为了整棵树都能平衡则必须不断往上递归，很容易知道，<strong>红黑树的生长是自底向上的</strong></p><h5 id="叔结点存在且为黑色结点或者叔结点不存在，插入结点的父结点是祖父结点的左结点，插入结点是父结点的左结点"><a href="#叔结点存在且为黑色结点或者叔结点不存在，插入结点的父结点是祖父结点的左结点，插入结点是父结点的左结点" class="headerlink" title="叔结点存在且为黑色结点或者叔结点不存在，插入结点的父结点是祖父结点的左结点，插入结点是父结点的左结点"></a>叔结点存在且为黑色结点或者叔结点不存在，插入结点的父结点是祖父结点的左结点，插入结点是父结点的左结点</h5><ul><li>F 设为黑色</li><li>G 设为红色</li><li>对 G 进行右旋</li></ul><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/03/16/623198b076849.png" alt="叔结点存在且为黑色"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/03/16/623198b4bdd9c.png" alt="叔结点不存在"></p><h5 id="叔结点存在且为黑色结点或者叔结点不存在，插入结点的父结点是祖父结点的右结点，插入结点是父结点的右结点"><a href="#叔结点存在且为黑色结点或者叔结点不存在，插入结点的父结点是祖父结点的右结点，插入结点是父结点的右结点" class="headerlink" title="叔结点存在且为黑色结点或者叔结点不存在，插入结点的父结点是祖父结点的右结点，插入结点是父结点的右结点"></a>叔结点存在且为黑色结点或者叔结点不存在，插入结点的父结点是祖父结点的右结点，插入结点是父结点的右结点</h5><ul><li>F 设为黑色</li><li>G 设为红色</li><li>对 G 进行左旋</li></ul><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/03/16/623198b97ec34.png" alt="叔结点存在且为黑色"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/03/16/623198bee17bc.png" alt="叔结点不存在"></p><h5 id="叔结点存在且为黑色结点或者叔结点不存在，插入结点的父结点是祖父结点的左结点，插入结点是父结点的右结点"><a href="#叔结点存在且为黑色结点或者叔结点不存在，插入结点的父结点是祖父结点的左结点，插入结点是父结点的右结点" class="headerlink" title="叔结点存在且为黑色结点或者叔结点不存在，插入结点的父结点是祖父结点的左结点，插入结点是父结点的右结点"></a>叔结点存在且为黑色结点或者叔结点不存在，插入结点的父结点是祖父结点的左结点，插入结点是父结点的右结点</h5><ul><li>对F进行左旋</li><li>F设为插入结点</li><li>M设为黑色</li><li>G设为红色</li><li>对G进行右旋</li></ul><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/03/16/623198c4274aa.png" alt="叔结点存在且为黑色"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/03/16/623198c7cb090.png" alt="叔结点不存在"></p><h5 id="叔结点存在且为黑色结点或者叔结点不存在，插入结点的父结点是祖父结点的右结点，插入结点是父结点的左结点"><a href="#叔结点存在且为黑色结点或者叔结点不存在，插入结点的父结点是祖父结点的右结点，插入结点是父结点的左结点" class="headerlink" title="叔结点存在且为黑色结点或者叔结点不存在，插入结点的父结点是祖父结点的右结点，插入结点是父结点的左结点"></a>叔结点存在且为黑色结点或者叔结点不存在，插入结点的父结点是祖父结点的右结点，插入结点是父结点的左结点</h5><ul><li>对F进行右旋</li><li>F设为插入结点</li><li>M设为黑色</li><li>G设为红色</li><li>对G进行左旋</li></ul><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/03/16/623198cc71d4e.png" alt="叔结点存在且为黑色"></p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/03/16/623198cfcae98.png" alt="叔结点不存在"></p><h5 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h5><p>插入自平衡处理过程</p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/03/16/623198d4102d4.png"></p><ul><li>F 设为红色</li><li>P 和 M 设为黑色</li><li>插入结点变成 F</li></ul><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/03/16/623198d86607d.png"></p><ul><li>R 设为红色</li><li>G 设为黑色</li><li>对 R 进行右旋</li></ul><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/03/16/623198dc4c0cc.png"></p><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>删除算是红黑树最复杂的操作了</p><p>对于红黑树的删除操作来说，需要两个步骤：一是查找，二是替代，查找如上所述，删除后则需要选择相应结点进行替代（除非删除结点没有子结点），同时还需要维护红黑树的平衡</p><p>大致可以分为三种情况：</p><ul><li>被删除结点无子结点</li><li>被删除结点只有一个子结点</li><li>被删除结点有两个子结点</li></ul><p>每种情况又根据被删结点细分</p><h4 id="组合1"><a href="#组合1" class="headerlink" title="组合1"></a>组合1</h4><p><strong>被删结点无子结点，且被删结点为红色</strong></p><p>这种组合的被删结点很容易知道是叶结点，而且因为为红色，直接删就好了</p><h4 id="组合2"><a href="#组合2" class="headerlink" title="组合2"></a>组合2</h4><p><strong>被删结点无子结点，且被删结点为黑色</strong></p><p>这种组合需要处理被删结点这条路径上的黑色结点数量，由于性质 5 的存在，需要维持红黑树的平衡，处理方法较为复杂，后文细说</p><h4 id="组合3"><a href="#组合3" class="headerlink" title="组合3"></a>组合3</h4><p><strong>被删结点只有一个子结点，且被删结点为红色</strong></p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/03/16/623198e276f87.png" alt="被删结点只有一个子结点，且被删结点为红色"></p><p>这种组合并不存在，若被删结点只有一个子结点，且被删结点为红色，根据性质 4，唯一的子结点必须为黑色，而根据性质 5，每条路径上黑色结点数相等，只有一个黑色子结点造成了红黑树的不平衡，delete 为 Null 的叶结点的黑色结点数少一，不符合性质 5，这种组合并不存在</p><h4 id="组合4"><a href="#组合4" class="headerlink" title="组合4"></a>组合4</h4><p><strong>被删结点只有一个子结点，且被删结点为黑色</strong></p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/03/16/623198e74cdcc.png" alt="被删结点只有一个子结点，且被删结点为黑色"></p><p>这种组合的子结点一定为红色，只有红色结点才能保证红黑树的性质 5 成立，直接将 delete 结点删除，用 value 代替 delete 结点的位置，将 value 染黑即可</p><h4 id="组合5-amp-amp-组合6"><a href="#组合5-amp-amp-组合6" class="headerlink" title="组合5 && 组合6"></a>组合5 &amp;&amp; 组合6</h4><p><strong>被删结点有两个子结点，且被删结点为黑色或红色</strong></p><p>被删结点有两个结点，如果此时要删除的话，则必须有一个结点替代这个位置，由于红黑树是基于二叉查找树，而二叉查找树的中序遍历即为从小到大的排列，所以我们只需要找 delete 结点的后继结点 successor 即可，此时用 successor 结点代替 delete 结点的位置，同时进行染色，这也可以相当于看作 successor 结点被删</p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/03/16/623198ece6102.png" alt="被删结点有两个子结点，且被删结点为黑色或红色"></p><p>delete 结点的后继结点一定在右子树上，必为上图两种形态中的一种</p><p>两种形态的处理方法一样，用 successor 代替 delete 后，相当于 successor 被删</p><p>若 successor 为红色，则变成了组合 1 ；若 successor 为黑色，则变成了组合 2 或 组合4</p><h4 id="细说组合2"><a href="#细说组合2" class="headerlink" title="细说组合2"></a>细说组合2</h4><p>因为被删结点为黑色，而删除黑色结点会破坏红黑树的性质 5，为了不让性质 5 被破坏，可以采取为替代结点额外增加一个黑色，即替代结点的颜色为双黑或红黑，这样维护了性质 5，但是违背了性质 1，所以在所有操作之后再将额外的黑色移除，完成删除操作</p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/03/16/623198f2390e9.png" alt="双黑或红黑"></p><p>下面结合 father 和 bro 来分析，白色结点代表可为黑色也可为红色</p><h5 id="情况一-1"><a href="#情况一-1" class="headerlink" title="情况一"></a>情况一</h5><p><strong>bro 为黑色，且有一个与其方向相同的红色子结点 son</strong></p><p>方向一致指的是 bro 和 son 要么都为左结点，要么都为右结点</p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/03/16/623198f6d53e9.png"></p><p>将 father 左旋，重新给 bro 上色，和原来 father 一样，将 son 染黑，方形结点储存的额外的黑色转移给 father</p><p>左右颠倒的情况也是一样的操作</p><h5 id="情况二-1"><a href="#情况二-1" class="headerlink" title="情况二"></a>情况二</h5><p><strong>bro 为黑色，且有一个与其方向不同的红色子结点 son</strong></p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/03/16/623198fb2fb17.png"></p><p>将 bro 右旋，重新给 son 和 bro 上色，得到情况一</p><p>左右颠倒的情况也是一样的操作</p><h5 id="情况三-1"><a href="#情况三-1" class="headerlink" title="情况三"></a>情况三</h5><p><strong>bro 为黑色，且没有红色子结点</strong></p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/03/16/623198ff457ba.png" alt="father 为红色"></p><p>father 若为红色，则直接将 null 中储存的额外黑色染色 father，同时将 bro 染为红色</p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/03/16/62319902dfaa9.png" alt="father 为黑色"></p><p>father 若为黑色，则将 null 中储存的额外黑色储存到 father 内，即 father 此时为双黑，同时将 bro 染为红色，将 father 作为新的判断结点，遇到情况一、二继续进行调整，不断向上传递，直到除了根节点储存了额外的黑色，别的结点并没有储存，此时将额外的黑色移除，完成删除操作</p><h5 id="情况四-1"><a href="#情况四-1" class="headerlink" title="情况四"></a>情况四</h5><p><strong>bro 为红色</strong></p><p>由于 bro 为红色，则 father 必为黑色，由于性质 5，bro 也必有两个黑色的子结点</p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/03/16/62319907b3bbb.png"></p><p>将 father 左旋，同时 father 和 bro 重新上色，黑色的 son 变为了新的 bro，再根据情况一、二、三进行下一步操作</p><p>左右颠倒的情况也是一样的操作</p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>红黑树的插入和操作情况很多，需要分类一步步进行讨论，耐心地分析</p><p>算法导论中的删除操作中最具技巧性的点便是采用存两个颜色的灵活方法，方便地维护红黑树的性质，而不是硬删结点再维护平衡</p><p>如果一条路走不通，不妨想想另一种方法，毕竟最后到达目的地即可</p>]]></content>
    
    
    <summary type="html">红黑树 bala~bala~</summary>
    
    
    
    <category term="干货分享" scheme="https://hexo.blog.lsilencej.top/categories/%E5%B9%B2%E8%B4%A7%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="算法" scheme="https://hexo.blog.lsilencej.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Java 集合框架源码解析</title>
    <link href="https://hexo.blog.lsilencej.top/2021/11/15/Java%20%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-java-collections-framework/"/>
    <id>https://hexo.blog.lsilencej.top/2021/11/15/Java%20%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-java-collections-framework/</id>
    <published>2021-11-15T12:52:59.000Z</published>
    <updated>2022-05-02T07:53:41.466Z</updated>
    
    <content type="html"><![CDATA[<h2 id="知识体系结构"><a href="#知识体系结构" class="headerlink" title="知识体系结构"></a>知识体系结构</h2><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/03/16/62318d0ed9a77.png" alt="知识体系结构"></p><p>容器包括 <em>Collection</em> 和 <em>Map</em> 两种，<em>Collection</em> 存储着对象的集合，而 <em>Map</em> 存储着键值对(两个对象)的映射表。</p><h2 id="Collection-容器"><a href="#Collection-容器" class="headerlink" title="Collection 容器"></a><em>Collection</em> 容器</h2><h3 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h3><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/03/16/62318d3fe0d54.png" alt="结构图"></p><h3 id="List"><a href="#List" class="headerlink" title="List"></a><em>List</em></h3><h4 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a><em>ArrayList</em></h4><p><em>ArrayList</em> 继承了 <em>AbstractList</em> 抽象基类，实现了 <em>List</em> 接口</p><p>底层通过数组实现，顺序存储结构，基于动态数组实现，支持随机访问</p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/03/16/62318d465bb8c.png" alt="ArrayList"></p><h5 id="底层数据结构"><a href="#底层数据结构" class="headerlink" title="底层数据结构"></a>底层数据结构</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">transient Object[] elementData; // 用于存储的数组</span><br><span class="line"></span><br><span class="line">private int size; // ArrayList 的初始容量</span><br></pre></td></tr></table></figure></div><h5 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h5><table><thead><tr><th align="center"><strong>构造器</strong></th><th align="center"><strong>描述</strong></th></tr></thead><tbody><tr><td align="center"><strong>ArrayList</strong>()</td><td align="center">构造一个初始容量为10的空列表。</td></tr><tr><td align="center"><strong>ArrayList</strong>(int initialCapacity)</td><td align="center">构造具有指定初始容量的空列表。</td></tr><tr><td align="center"><strong>ArrayList</strong>(Collection&lt;? extends E&gt; c)</td><td align="center">按照集合的迭代器返回的顺序构造一个包含指定集合元素的列表。</td></tr></tbody></table><pre><code>public ArrayList(int initialCapacity) {    if (initialCapacity &gt; 0) {        this.elementData = new Object[initialCapacity];    } else if (initialCapacity == 0) {        this.elementData = EMPTY_ELEMENTDATA;    } else {        throw new IllegalArgumentException("Illegal Capacity: "+                                           initialCapacity);    }}public ArrayList() {    this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;}public ArrayList(Collection&lt;? extends E&gt; c) {    Object[] a = c.toArray();    if ((size = a.length) != 0) {        if (c.getClass() == ArrayList.class) {            elementData = a;        } else {            elementData = Arrays.copyOf(a, size, Object[].class);        }    } else {        // replace with empty array.        elementData = EMPTY_ELEMENTDATA;    }}</code></pre><h5 id="方法概要"><a href="#方法概要" class="headerlink" title="方法概要"></a>方法概要</h5><table><thead><tr><th align="center"><strong>变量和类型</strong></th><th align="center">方法</th><th align="center"><strong>描述</strong></th></tr></thead><tbody><tr><td align="center">void</td><td align="center"><strong>add</strong>(int index, E element)</td><td align="center">将指定元素插入此列表中的指定位置。</td></tr><tr><td align="center">boolean</td><td align="center"><strong>add</strong>(E e)</td><td align="center">将指定的元素追加到此列表的末尾。</td></tr><tr><td align="center">boolean</td><td align="center"><strong>addAll</strong>(int index, Collection&lt;? extends E&gt; c)</td><td align="center">从指定位置开始，将指定集合中的所有元素插入此列表。</td></tr><tr><td align="center">boolean</td><td align="center"><strong>addAll</strong>(Collection&lt;? extends E&gt; c)</td><td align="center">将指定集合中的所有元素按指定集合的Iterator返回的顺序附加到此列表的末尾。</td></tr><tr><td align="center">void</td><td align="center"><strong>clear</strong>()</td><td align="center">从此列表中删除所有元素。</td></tr><tr><td align="center">Object</td><td align="center"><strong>clone</strong>()</td><td align="center">返回此 <code>ArrayList</code>实例的浅表副本。</td></tr><tr><td align="center">boolean</td><td align="center"><strong>contains</strong>(Object o)</td><td align="center">如果此列表包含指定的元素，则返回 <code>true</code> 。</td></tr><tr><td align="center">void</td><td align="center"><strong>ensureCapacity</strong>(int minCapacity)</td><td align="center">如有必要，增加此 <code>ArrayList</code>实例的容量，以确保它至少可以容纳由minimum capacity参数指定的元素数。</td></tr><tr><td align="center">void</td><td align="center"><strong>forEach</strong>(Consumer&lt;? super E&gt; action)</td><td align="center">对 <code>Iterable</code>每个元素执行给定操作，直到处理 <code>Iterable</code>所有元素或操作引发异常。</td></tr><tr><td align="center">E</td><td align="center"><strong>get</strong>(int index)</td><td align="center">返回此列表中指定位置的元素。</td></tr><tr><td align="center">int</td><td align="center"><strong>indexOf</strong>(Object o)</td><td align="center">返回此列表中第一次出现的指定元素的索引，如果此列表不包含该元素，则返回-1。</td></tr><tr><td align="center">boolean</td><td align="center"><strong>isEmpty</strong>()</td><td align="center">如果此列表不包含任何元素，则返回 <code>true</code> 。</td></tr><tr><td align="center">Iterator<e></e></td><td align="center"><strong>iterator</strong>()</td><td align="center">以适当的顺序返回此列表中元素的迭代器。</td></tr><tr><td align="center">int</td><td align="center"><strong>lastIndexOf</strong>(Object o)</td><td align="center">返回此列表中指定元素最后一次出现的索引，如果此列表不包含该元素，则返回-1。</td></tr><tr><td align="center">ListIterator<e></e></td><td align="center"><strong>listIterator</strong>()</td><td align="center">返回此列表中元素的列表迭代器（按适当顺序）。</td></tr><tr><td align="center">ListIterator<e></e></td><td align="center"><strong>listIterator</strong>(int index)</td><td align="center">从列表中的指定位置开始，返回列表中元素的列表迭代器（按正确顺序）。</td></tr><tr><td align="center">E</td><td align="center"><strong>remove</strong>(int index)</td><td align="center">删除此列表中指定位置的元素。</td></tr><tr><td align="center">boolean</td><td align="center"><strong>remove</strong>(Object o)</td><td align="center">从该列表中删除指定元素的第一个匹配项（如果存在）。</td></tr><tr><td align="center">boolean</td><td align="center"><strong>removeAll</strong>(Collection&lt;?&gt; c)</td><td align="center">从此列表中删除指定集合中包含的所有元素。</td></tr><tr><td align="center">boolean</td><td align="center"><strong>removeIf</strong>(Predicate&lt;? super E&gt; filter)</td><td align="center">删除此集合中满足给定谓词的所有元素。</td></tr><tr><td align="center">protected void</td><td align="center"><strong>removeRange</strong>(int fromIndex, int toIndex)</td><td align="center">从此列表中删除索引介于 <code>fromIndex</code> （含）和 <code>toIndex</code> （独占）之间的所有元素。</td></tr><tr><td align="center">boolean</td><td align="center"><strong>retainAll</strong>(Collection&lt;?&gt; c)</td><td align="center">仅保留此列表中包含在指定集合中的元素。</td></tr><tr><td align="center">E</td><td align="center"><strong>set</strong>(int index, E element)</td><td align="center">用指定的元素替换此列表中指定位置的元素。</td></tr><tr><td align="center">int</td><td align="center"><strong>size</strong>()</td><td align="center">返回此列表中的元素数。</td></tr><tr><td align="center">Spliterator<e></e></td><td align="center"><strong>spliterator</strong>()</td><td align="center">在此列表中的元素上创建<em>late-binding</em>和<em>故障快速 Spliterator</em>。</td></tr><tr><td align="center">List<e></e></td><td align="center"><strong>subList</strong>(int fromIndex, int toIndex)</td><td align="center">返回指定的 <code>fromIndex</code> （包含）和 <code>toIndex</code> （不包括）之间的此列表部分的视图。</td></tr><tr><td align="center">Object[]</td><td align="center"><strong>toArray</strong>()</td><td align="center">以适当的顺序（从第一个元素到最后一个元素）返回包含此列表中所有元素的数组。</td></tr><tr><td align="center"><t> T[]</t></td><td align="center"><strong>toArray</strong>(T[] a)</td><td align="center">以适当的顺序返回包含此列表中所有元素的数组（从第一个元素到最后一个元素）; 返回数组的运行时类型是指定数组的运行时类型。</td></tr><tr><td align="center">void</td><td align="center"><strong>trimToSize</strong>()</td><td align="center">将此 <code>ArrayList</code>实例的容量调整为列表的当前大小。</td></tr></tbody></table><h5 id="自动扩容"><a href="#自动扩容" class="headerlink" title="自动扩容"></a>自动扩容</h5><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/03/16/62318d4d791fc.png" alt="扩容"></p><p>向数组添加元素时，会对当前剩余空间进行检查，如果新添加的元素个数超过剩余空间，数组将自我进行扩容，通过 ensureCapacity(int minCapacity) 方法实现</p><p>数组扩容时，会将老数组中的元素重新拷贝至一份新数组中，<strong>int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);</strong> 这行语句使用位运算，将原数组的 oldCapacity 二进制位向右移动一位，即原数的一半与 oldCapacity 求和作为 newCapacity 的值，每次扩容 newCapacity 大约是 oldCapacity 的 1.5 倍</p><pre><code>public void ensureCapacity(int minCapacity) {    if (minCapacity &gt; elementData.length        &amp;&amp; !(elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA             &amp;&amp; minCapacity &lt;= DEFAULT_CAPACITY)) {        modCount++;        grow(minCapacity);    }}private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;private Object[] grow(int minCapacity) {    return elementData = Arrays.copyOf(elementData,                                       newCapacity(minCapacity));}private Object[] grow() {    return grow(size + 1);}private int newCapacity(int minCapacity) {    // overflow-conscious code    int oldCapacity = elementData.length;    int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1); // 扩大为大约 1.5 倍    if (newCapacity - minCapacity &lt;= 0) {        if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA)            return Math.max(DEFAULT_CAPACITY, minCapacity);        if (minCapacity &lt; 0) // overflow            throw new OutOfMemoryError();        return minCapacity;    }    return (newCapacity - MAX_ARRAY_SIZE &lt;= 0)        ? newCapacity        : hugeCapacity(minCapacity);}private static int hugeCapacity(int minCapacity) {    if (minCapacity &lt; 0) // overflow        throw new OutOfMemoryError();    return (minCapacity &gt; MAX_ARRAY_SIZE)        ? Integer.MAX_VALUE        : MAX_ARRAY_SIZE;}</code></pre><h5 id="trimToSize"><a href="#trimToSize" class="headerlink" title="trimToSize"></a>trimToSize</h5><p>创建一个刚好能包括所有元素的数组并拷贝过去</p><pre><code>public void trimToSize() {    modCount++;    if (size &lt; elementData.length) {        elementData = (size == 0)          ? EMPTY_ELEMENTDATA          : Arrays.copyOf(elementData, size);    }}</code></pre><h5 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h5><pre><code>// 正向查找返回第一个与之相等的索引public int indexOf(Object o) {    return indexOfRange(o, 0, size);}int indexOfRange(Object o, int start, int end) {    Object[] es = elementData;    if (o == null) {        for (int i = start; i &lt; end; i++) {            if (es[i] == null) {                return i;            }        }    } else {        for (int i = start; i &lt; end; i++) {            if (o.equals(es[i])) {                return i;            }        }    }    return -1;}</code></pre><h5 id="lastIndexOf"><a href="#lastIndexOf" class="headerlink" title="lastIndexOf"></a>lastIndexOf</h5><pre><code>// 逆向查找返回第一个与之相等的索引public int lastIndexOf(Object o) {    return lastIndexOfRange(o, 0, size);}int lastIndexOfRange(Object o, int start, int end) {    Object[] es = elementData;    if (o == null) {        for (int i = end - 1; i &gt;= start; i--) {            if (es[i] == null) {                return i;            }        }    } else {        for (int i = end - 1; i &gt;= start; i--) {            if (o.equals(es[i])) {                return i;            }        }    }    return -1;}</code></pre><h5 id="elementData"><a href="#elementData" class="headerlink" title="elementData"></a>elementData</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@SuppressWarnings("unchecked")</span><br><span class="line">E elementData(int index) {</span><br><span class="line">    return (E) elementData[index];</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="get"><a href="#get" class="headerlink" title="get"></a>get</h5><pre><code>// 根据索引查找元素public E get(int index) {    Objects.checkIndex(index, size);    return elementData(index);}</code></pre><h5 id="set"><a href="#set" class="headerlink" title="set"></a>set</h5><pre><code>// 根据索引直接赋值public E set(int index, E element) {    Objects.checkIndex(index, size);    E oldValue = elementData(index);    elementData[index] = element;    return oldValue;}</code></pre><h5 id="add"><a href="#add" class="headerlink" title="add"></a>add</h5><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/03/16/62318d547f76b.png" alt="add"></p><pre><code>// 直接在末尾添加public boolean add(E e) {    modCount++;    add(e, elementData, size);    return true;}private void add(E e, Object[] elementData, int s) {    if (s == elementData.length)        elementData = grow();    elementData[s] = e;    size = s + 1;}// 在相应索引处添加public void add(int index, E element) {    rangeCheckForAdd(index);    modCount++;    final int s;    Object[] elementData;    if ((s = size) == (elementData = this.elementData).length)        elementData = grow();    System.arraycopy(elementData, index,                     elementData, index + 1,                     s - index);    elementData[index] = element;    size = s + 1;}</code></pre><h5 id="fastRemove"><a href="#fastRemove" class="headerlink" title="fastRemove"></a>fastRemove</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">private void fastRemove(Object[] es, int i) {</span><br><span class="line">    modCount++;</span><br><span class="line">    final int newSize;</span><br><span class="line">    if ((newSize = size - 1) &gt; i)</span><br><span class="line">        System.arraycopy(es, i + 1, es, i, newSize - i);</span><br><span class="line">    es[size = newSize] = null;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h5><pre><code>// 调用 fastRemove() 根据索引删除public E remove(int index) {    Objects.checkIndex(index, size);    final Object[] es = elementData;    @SuppressWarnings("unchecked") E oldValue = (E) es[index];    fastRemove(es, index);    return oldValue;}// 同样调用 fastRemove() 删除指定元素的第一个匹配项public boolean remove(Object o) {    final Object[] es = elementData;    final int size = this.size;    int i = 0;    found: {        if (o == null) {            for (; i &lt; size; i++)                if (es[i] == null)                    break found;        } else {            for (; i &lt; size; i++)                if (o.equals(es[i]))                    break found;        }        return false;    }    fastRemove(es, i);    return true;}</code></pre><h5 id="addAll"><a href="#addAll" class="headerlink" title="addAll"></a>addAll</h5><pre><code>// 直接在末尾添加添加集合中所有元素public boolean addAll(Collection&lt;? extends E&gt; c) {    Object[] a = c.toArray();    modCount++;    int numNew = a.length;    if (numNew == 0)        return false;    Object[] elementData;    final int s;    if (numNew &gt; (elementData = this.elementData).length - (s = size))        elementData = grow(s + numNew);    System.arraycopy(a, 0, elementData, s, numNew);    size = s + numNew;    return true;}// 在相应索引处添加集合中所有元素public boolean addAll(int index, Collection&lt;? extends E&gt; c) {    rangeCheckForAdd(index);    Object[] a = c.toArray();    modCount++;    int numNew = a.length;    if (numNew == 0)        return false;    Object[] elementData;    final int s;    if (numNew &gt; (elementData = this.elementData).length - (s = size))        elementData = grow(s + numNew);    int numMoved = s - index;    if (numMoved &gt; 0)        System.arraycopy(elementData, index,                         elementData, index + numNew,                         numMoved);    System.arraycopy(a, 0, elementData, index, numNew);    size = s + numNew;    return true;}</code></pre><h5 id="removeAll"><a href="#removeAll" class="headerlink" title="removeAll"></a>removeAll</h5><pre><code>// 移除所有元素public boolean removeAll(Collection&lt;?&gt; c) {    return batchRemove(c, false, 0, size);}boolean batchRemove(Collection&lt;?&gt; c, boolean complement,                    final int from, final int end) {    Objects.requireNonNull(c);    final Object[] es = elementData;    int r;    // Optimize for initial run of survivors    for (r = from;; r++) {        if (r == end)            return false;        if (c.contains(es[r]) != complement)            break;    }    int w = r++;    try {        for (Object e; r &lt; end; r++)            if (c.contains(e = es[r]) == complement)                es[w++] = e;    } catch (Throwable ex) {        // Preserve behavioral compatibility with AbstractCollection,        // even if c.contains() throws.        System.arraycopy(es, r, es, w, end - r);        w += end - r;        throw ex;    } finally {        modCount += end - w;        shiftTailOverGap(es, w, end);    }    return true;}</code></pre><h4 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a><em>Vector</em></h4><p><em>Vector</em> 继承了 <em>AbstractList</em> 抽象基类，实现了 List 接口</p><p>类似于 <em>ArrayList</em>，但其是同步的，线程安全，如果不需要线程安全，建议使用 <em>ArrayList</em> 代替 <em>Vector</em></p><p>但也不是绝对的线程安全：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">private static Vector&lt;Integer&gt; vector = new Vector&lt;&gt;();</span><br><span class="line"> </span><br><span class="line">public static void main(String args[]) throws Excption{</span><br><span class="line">    while(true){</span><br><span class="line">        for(int i=0; i&lt;10; i++){</span><br><span class="line">            vector.add(i);</span><br><span class="line">        }</span><br><span class="line">        Thread removeT = new Thread(new Runnable() {</span><br><span class="line">            @Override</span><br><span class="line">            public void run() {</span><br><span class="line">                for(int i=0; i&lt;vector.size(); i++){</span><br><span class="line">                    vector.remove(i); // 移除 i 位置的元素</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">        Thread getT = new Thread(new Runnable() {</span><br><span class="line">            @Override</span><br><span class="line">            public void run() {</span><br><span class="line">                for(int i=0; i&lt;vector.size(); i++){</span><br><span class="line">                    System.out.println(vector.get(i)); // 获取 i 位置的元素</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">        getT.start();</span><br><span class="line">        removeT.start();</span><br><span class="line">        while(Thread.activeCount()&gt;20);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><p>如上代码，如果第一个线程在第二个线程之前把 i 位置上的元素移除了，由于第二个线程的 i 已经确定，如果此时的 i 正好是数组的最后一位， get() 方法二次获取就会发生数组下标越界的异常</p><h5 id="构造器-1"><a href="#构造器-1" class="headerlink" title="构造器"></a>构造器</h5><table><thead><tr><th align="center"><strong>构造器</strong></th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><strong>Vector</strong>()</td><td align="center">构造一个空向量，使其内部数据数组的大小为 <code>10</code> ，其标准容量增量为零。</td></tr><tr><td align="center"><strong>Vector</strong>(int initialCapacity)</td><td align="center">构造一个具有指定初始容量且容量增量等于零的空向量。</td></tr><tr><td align="center"><strong>Vector</strong>(int initialCapacity, int capacityIncrement)</td><td align="center">构造具有指定初始容量和容量增量的空向量。</td></tr><tr><td align="center"><strong>Vector</strong>(Collection&lt;? extends E&gt; c)</td><td align="center">按照集合的迭代器返回的顺序构造一个包含指定集合元素的向量。</td></tr></tbody></table><pre><code>public Vector(int initialCapacity, int capacityIncrement) {    super();    if (initialCapacity &lt; 0)        throw new IllegalArgumentException("Illegal Capacity: "+                                           initialCapacity);    this.elementData = new Object[initialCapacity];    this.capacityIncrement = capacityIncrement;}public Vector(int initialCapacity) {    this(initialCapacity, 0);}public Vector() {    this(10);}public Vector(Collection&lt;? extends E&gt; c) {    Object[] a = c.toArray();    elementCount = a.length;    if (c.getClass() == ArrayList.class) {        elementData = a;    } else {        elementData = Arrays.copyOf(a, elementCount, Object[].class);    }}</code></pre><h5 id="方法概要-1"><a href="#方法概要-1" class="headerlink" title="方法概要"></a>方法概要</h5><table><thead><tr><th align="center"><strong>变量和类型</strong></th><th align="center"><strong>方法</strong></th><th align="center"><strong>描述</strong></th></tr></thead><tbody><tr><td align="center">void</td><td align="center"><strong>add</strong>(int index, E element)</td><td align="center">将指定元素插入此Vector中的指定位置。</td></tr><tr><td align="center">boolean</td><td align="center"><strong>add</strong>(E e)</td><td align="center">将指定的元素追加到此Vector的末尾。</td></tr><tr><td align="center">boolean</td><td align="center"><strong>addAll</strong>(int index, Collection&lt;? extends E&gt; c)</td><td align="center">将指定Collection中的所有元素插入到此Vector中的指定位置。</td></tr><tr><td align="center">boolean</td><td align="center"><strong>addAll</strong>(Collection&lt;? extends E&gt; c)</td><td align="center">将指定Collection中的所有元素追加到此Vector的末尾，按照指定Collection的Iterator返回的顺序。</td></tr><tr><td align="center">void</td><td align="center"><strong>addElement</strong>(E obj)</td><td align="center">将指定的组件添加到此向量的末尾，将其大小增加1。</td></tr><tr><td align="center">int</td><td align="center"><strong>capacity</strong>()</td><td align="center">返回此向量的当前容量。</td></tr><tr><td align="center">void</td><td align="center"><strong>clear</strong>()</td><td align="center">从此Vector中删除所有元素。</td></tr><tr><td align="center">Object</td><td align="center"><strong>clone</strong>()</td><td align="center">返回此向量的副本。</td></tr><tr><td align="center">boolean</td><td align="center"><strong>contains</strong>(Object o)</td><td align="center">如果此向量包含指定的元素，则返回 <code>true</code> 。</td></tr><tr><td align="center">boolean</td><td align="center"><strong>containsAll</strong>(Collection&lt;?&gt; c)</td><td align="center">如果此Vector包含指定Collection中的所有元素，则返回true。</td></tr><tr><td align="center">void</td><td align="center"><strong>copyInto</strong>(Object[] anArray)</td><td align="center">将此向量的组件复制到指定的数组中。</td></tr><tr><td align="center">E</td><td align="center"><strong>elementAt</strong>(int index)</td><td align="center">返回指定索引处的组件。</td></tr><tr><td align="center">Enumeration<e></e></td><td align="center"><strong>elements</strong>()</td><td align="center">返回此向量的组件的枚举。</td></tr><tr><td align="center">void</td><td align="center"><strong>ensureCapacity</strong>(int minCapacity)</td><td align="center">如有必要，增加此向量的容量，以确保它至少可以容纳由minimum capacity参数指定的组件数。</td></tr><tr><td align="center">boolean</td><td align="center"><strong>equals</strong>(Object o)</td><td align="center">将指定的Object与此Vector进行比较以获得相等性。</td></tr><tr><td align="center">E</td><td align="center"><strong>firstElement</strong>()</td><td align="center">返回此向量的第一个组件（索引 <code>0</code>处的项）。</td></tr><tr><td align="center">void</td><td align="center"><strong>forEach</strong>(Consumer&lt;? super E&gt; action)</td><td align="center">对 <code>Iterable</code>每个元素执行给定操作，直到处理 <code>Iterable</code>所有元素或操作引发异常。</td></tr><tr><td align="center">E</td><td align="center"><strong>get</strong>(int index)</td><td align="center">返回此Vector中指定位置的元素。</td></tr><tr><td align="center">int</td><td align="center"><strong>hashCode</strong>()</td><td align="center">返回此Vector的哈希码值。</td></tr><tr><td align="center">int</td><td align="center"><strong>indexOf</strong>(Object o)</td><td align="center">返回此向量中第一次出现的指定元素的索引，如果此向量不包含该元素，则返回-1。</td></tr><tr><td align="center">int</td><td align="center"><strong>indexOf</strong>(Object o, int index)</td><td align="center">返回此向量中第一次出现的指定元素的索引，从 <code>index</code>向前搜索，如果找不到该元素，则返回-1。</td></tr><tr><td align="center">void</td><td align="center"><strong>insertElementAt</strong>(E obj, int index)</td><td align="center">将指定对象作为此向量中的组件插入指定的 <code>index</code> 。</td></tr><tr><td align="center">boolean</td><td align="center"><strong>isEmpty</strong>()</td><td align="center">测试此向量是否没有组件。</td></tr><tr><td align="center">Iterator<e></e></td><td align="center"><strong>iterator</strong>()</td><td align="center">以适当的顺序返回此列表中元素的迭代器。</td></tr><tr><td align="center">E</td><td align="center"><strong>lastElement</strong>()</td><td align="center">返回向量的最后一个组件。</td></tr><tr><td align="center">int</td><td align="center"><strong>lastIndexOf</strong>(Object o)</td><td align="center">返回此向量中指定元素最后一次出现的索引，如果此向量不包含该元素，则返回-1。</td></tr><tr><td align="center">int</td><td align="center"><strong>lastIndexOf</strong>(Object o, int index)</td><td align="center">返回此向量中最后一次出现的指定元素的索引，从 <code>index</code>向后搜索，如果找不到该元素，则返回-1。</td></tr><tr><td align="center">ListIterator<e></e></td><td align="center"><strong>listIterator</strong>()</td><td align="center">返回此列表中元素的列表迭代器（按适当顺序）。</td></tr><tr><td align="center">ListIterator<e></e></td><td align="center"><strong>listIterator</strong>(int index)</td><td align="center">从列表中的指定位置开始，返回列表中元素的列表迭代器（按正确顺序）。</td></tr><tr><td align="center">E</td><td align="center"><strong>remove</strong>(int index)</td><td align="center">删除此Vector中指定位置的元素。</td></tr><tr><td align="center">boolean</td><td align="center"><strong>remove</strong>(Object o)</td><td align="center">删除此向量中第一次出现的指定元素如果向量不包含该元素，则不会更改。</td></tr><tr><td align="center">boolean</td><td align="center"><strong>removeAll</strong>(Collection&lt;?&gt; c)</td><td align="center">从此Vector中删除指定Collection中包含的所有元素。</td></tr><tr><td align="center">void</td><td align="center"><strong>removeAllElements</strong>()</td><td align="center">从此向量中移除所有组件并将其大小设置为零。</td></tr><tr><td align="center">boolean</td><td align="center"><strong>removeElement</strong>(Object obj)</td><td align="center">从此向量中移除参数的第一个（索引最低）事件。</td></tr><tr><td align="center">void</td><td align="center"><strong>removeElementAt</strong>(int index)</td><td align="center">删除指定索引处的组件。</td></tr><tr><td align="center">boolean</td><td align="center"><strong>removeIf</strong>(Predicate&lt;? super E&gt; filter)</td><td align="center">删除此集合中满足给定谓词的所有元素。</td></tr><tr><td align="center">protected void</td><td align="center"><strong>removeRange</strong>(int fromIndex, int toIndex)</td><td align="center">从此列表中删除索引介于 <code>fromIndex</code> （含）和 <code>toIndex</code> （独占）之间的所有元素。</td></tr><tr><td align="center">void</td><td align="center"><strong>replaceAll</strong>(UnaryOperator<e> operator)</e></td><td align="center">将该列表的每个元素替换为将运算符应用于该元素的结果。</td></tr><tr><td align="center">boolean</td><td align="center"><strong>retainAll</strong>(Collection&lt;?&gt; c)</td><td align="center">仅保留此Vector中包含在指定Collection中的元素。</td></tr><tr><td align="center">E</td><td align="center"><strong>set</strong>(int index, E element)</td><td align="center">用指定的元素替换此Vector中指定位置的元素。</td></tr><tr><td align="center">void</td><td align="center"><strong>setElementAt</strong>(E obj, int index)</td><td align="center">将此向量的指定 <code>index</code>处的组件设置为指定对象。</td></tr><tr><td align="center">void</td><td align="center"><strong>setSize</strong>(int newSize)</td><td align="center">设置此向量的大小。</td></tr><tr><td align="center">int</td><td align="center"><strong>size</strong>()</td><td align="center">返回此向量中的组件数。</td></tr><tr><td align="center">Spliterator<e></e></td><td align="center"><strong>spliterator</strong>()</td><td align="center">在此列表中的元素上创建 <em>late-binding</em> 和<em>失败快速</em>  <em>Spliterator</em> 。</td></tr><tr><td align="center">List<e></e></td><td align="center"><strong>subList</strong>(int fromIndex, int toIndex)</td><td align="center">返回此List的部分在fromIndex（包含）和toIndex（独占）之间的视图。</td></tr><tr><td align="center">Object[]</td><td align="center"><strong>toArray</strong>()</td><td align="center">以正确的顺序返回包含此Vector中所有元素的数组。</td></tr><tr><td align="center"><t> T[]</t></td><td align="center"><strong>toArray</strong>(T[] a)</td><td align="center">以正确的顺序返回包含此Vector中所有元素的数组; 返回数组的运行时类型是指定数组的运行时类型。</td></tr><tr><td align="center">String</td><td align="center"><strong>toString</strong>()</td><td align="center">返回此Vector的字符串表示形式，包含每个元素的String表示形式。</td></tr><tr><td align="center">void</td><td align="center"><strong>trimToSize</strong>()</td><td align="center">修剪此向量的容量为向量的当前大小。</td></tr></tbody></table><h4 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a><em>LinkedList</em></h4><p><em>LinkedList</em> 继承了 <em>AbstractSequentialList</em> 抽象基类，实现了 <em>List</em> 和 <em>Deque</em> 接口</p><p>基于双向链表实现，只能通过顺序访问，可以快速地在链表中间插入和删除元素</p><p>对 <em>List</em> 和 <em>Deque</em> 接口的实现使得 <em>LinkedList</em> 可以看作一个顺序容器，也可以看作一个栈或者队列，如果需要用到栈或者队列可以考虑 <em>LinkedList</em>，不过一般优先考虑的是 <em>ArrayDeque</em>，它比 <em>LinkedList</em> 作为栈或队列使用时具有更好的性能</p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/03/16/62318d5dbfdec.png" alt="LinkedList"></p><h5 id="底层数据结构-1"><a href="#底层数据结构-1" class="headerlink" title="底层数据结构"></a>底层数据结构</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">transient int size = 0; // 长度</span><br><span class="line"></span><br><span class="line">transient Node&lt;E&gt; first; // 头指针</span><br><span class="line"></span><br><span class="line">transient Node&lt;E&gt; last; // 尾指针</span><br></pre></td></tr></table></figure></div><p><em>Node</em> 作为内部私有类：</p><pre><code>private static class Node&lt;E&gt; { // 双向链表节点    E item;    Node&lt;E&gt; next;    Node&lt;E&gt; prev;    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) {        this.item = element;        this.next = next;        this.prev = prev;    }}</code></pre><h5 id="构造器-2"><a href="#构造器-2" class="headerlink" title="构造器"></a>构造器</h5><table><thead><tr><th align="center"><strong>构造器</strong></th><th align="center"><strong>描述</strong></th></tr></thead><tbody><tr><td align="center"><strong>LinkedList</strong>()</td><td align="center">构造一个空列表。</td></tr><tr><td align="center"><strong>LinkedList</strong>(Collection&lt;? extends E&gt; c)</td><td align="center">按照集合的迭代器返回的顺序构造一个包含指定集合元素的列表。</td></tr></tbody></table><pre><code>// 空 listpublic LinkedList() {}// 通过一个 Collection 集合进行赋值public LinkedList(Collection&lt;? extends E&gt; c) {    this();    addAll(c);}</code></pre><h5 id="方法概要-2"><a href="#方法概要-2" class="headerlink" title="方法概要"></a>方法概要</h5><table><thead><tr><th align="center"><strong>变量和类型</strong></th><th align="center"><strong>方法</strong></th><th align="center"><strong>描述</strong></th></tr></thead><tbody><tr><td align="center">void</td><td align="center"><strong>add</strong>(int index, E element)</td><td align="center">将指定元素插入此列表中的指定位置。</td></tr><tr><td align="center">boolean</td><td align="center"><strong>add</strong>(E e)</td><td align="center">将指定的元素追加到此列表的末尾。</td></tr><tr><td align="center">boolean</td><td align="center"><strong>addAll</strong>(int index, Collection&lt;? extends E&gt; c)</td><td align="center">从指定位置开始，将指定集合中的所有元素插入此列表。</td></tr><tr><td align="center">boolean</td><td align="center"><strong>addAll</strong>(Collection&lt;? extends E&gt; c)</td><td align="center">将指定集合中的所有元素按指定集合的迭代器返回的顺序附加到此列表的末尾。</td></tr><tr><td align="center">void</td><td align="center"><strong>addFirst</strong>(E e)</td><td align="center">在此列表的开头插入指定的元素。</td></tr><tr><td align="center">void</td><td align="center"><strong>addLast</strong>(E e)</td><td align="center">将指定的元素追加到此列表的末尾。</td></tr><tr><td align="center">void</td><td align="center"><strong>clear</strong>()</td><td align="center">从此列表中删除所有元素。</td></tr><tr><td align="center">Object</td><td align="center"><strong>clone</strong>()</td><td align="center">返回此 <code>LinkedList</code>的浅表副本。</td></tr><tr><td align="center">boolean</td><td align="center"><strong>contains</strong>(Object o)</td><td align="center">如果此列表包含指定的元素，则返回 <code>true</code> 。</td></tr><tr><td align="center">Iterator<e></e></td><td align="center"><strong>descendingIterator</strong>()</td><td align="center">以相反的顺序返回此双端队列中元素的迭代器。</td></tr><tr><td align="center">E</td><td align="center"><strong>element</strong>()</td><td align="center">检索但不删除此列表的头部（第一个元素）。</td></tr><tr><td align="center">E</td><td align="center"><strong>get</strong>(int index)</td><td align="center">返回此列表中指定位置的元素。</td></tr><tr><td align="center">E</td><td align="center"><strong>getFirst</strong>()</td><td align="center">返回此列表中的第一个元素。</td></tr><tr><td align="center">E</td><td align="center"><strong>getLast</strong>()</td><td align="center">返回此列表中的最后一个元素。</td></tr><tr><td align="center">int</td><td align="center"><strong>indexOf</strong>(Object o)</td><td align="center">返回此列表中第一次出现的指定元素的索引，如果此列表不包含该元素，则返回-1。</td></tr><tr><td align="center">int</td><td align="center"><strong>lastIndexOf</strong>(Object o)</td><td align="center">返回此列表中指定元素最后一次出现的索引，如果此列表不包含该元素，则返回-1。</td></tr><tr><td align="center">ListIterator<e></e></td><td align="center"><strong>listIterator</strong>(int index)</td><td align="center">从列表中的指定位置开始，返回此列表中元素的列表迭代器（按正确顺序）。</td></tr><tr><td align="center">boolean</td><td align="center"><strong>offer</strong>(E e)</td><td align="center">将指定的元素添加为此列表的尾部（最后一个元素）。</td></tr><tr><td align="center">boolean</td><td align="center"><strong>offerFirst</strong>(E e)</td><td align="center">在此列表的前面插入指定的元素。</td></tr><tr><td align="center">boolean</td><td align="center"><strong>offerLast</strong>(E e)</td><td align="center">在此列表的末尾插入指定的元素。</td></tr><tr><td align="center">E</td><td align="center"><strong>peek</strong>()</td><td align="center">检索但不删除此列表的头部（第一个元素）。</td></tr><tr><td align="center">E</td><td align="center"><strong>peekFirst</strong>()</td><td align="center">检索但不删除此列表的第一个元素，如果此列表为空，则返回 <code>null</code> 。</td></tr><tr><td align="center">E</td><td align="center"><strong>peekLast</strong>()</td><td align="center">检索但不删除此列表的最后一个元素，如果此列表为空，则返回 <code>null</code> 。</td></tr><tr><td align="center">E</td><td align="center"><strong>poll</strong>()</td><td align="center">检索并删除此列表的头部（第一个元素）。</td></tr><tr><td align="center">E</td><td align="center"><strong>pollFirst</strong>()</td><td align="center">检索并删除此列表的第一个元素，如果此列表为空，则返回 <code>null</code> 。</td></tr><tr><td align="center">E</td><td align="center"><strong>pollLast</strong>()</td><td align="center">检索并删除此列表的最后一个元素，如果此列表为空，则返回 <code>null</code> 。</td></tr><tr><td align="center">E</td><td align="center"><strong>pop</strong>()</td><td align="center">弹出此列表所代表的堆栈中的元素。</td></tr><tr><td align="center">void</td><td align="center"><strong>push</strong>(E e)</td><td align="center">将元素推送到此列表所表示的堆栈上。</td></tr><tr><td align="center">E</td><td align="center"><strong>remove</strong>()</td><td align="center">检索并删除此列表的头部（第一个元素）。</td></tr><tr><td align="center">E</td><td align="center"><strong>remove</strong>(int index)</td><td align="center">删除此列表中指定位置的元素。</td></tr><tr><td align="center">boolean</td><td align="center"><strong>remove</strong>(Object o)</td><td align="center">从该列表中删除指定元素的第一个匹配项（如果存在）。</td></tr><tr><td align="center">E</td><td align="center"><strong>removeFirst</strong>()</td><td align="center">从此列表中删除并返回第一个元素。</td></tr><tr><td align="center">boolean</td><td align="center"><strong>removeFirstOccurrence</strong>(Object o)</td><td align="center">删除此列表中第一次出现的指定元素（从头到尾遍历列表时）。</td></tr><tr><td align="center">E</td><td align="center"><strong>removeLast</strong>()</td><td align="center">从此列表中删除并返回最后一个元素。</td></tr><tr><td align="center">boolean</td><td align="center"><strong>removeLastOccurrence</strong>(Object o)</td><td align="center">删除此列表中最后一次出现的指定元素（从头到尾遍历列表时）。</td></tr><tr><td align="center">E</td><td align="center"><strong>set</strong>(int index, E element)</td><td align="center">用指定的元素替换此列表中指定位置的元素。</td></tr><tr><td align="center">int</td><td align="center"><strong>size</strong>()</td><td align="center">返回此列表中的元素数。</td></tr><tr><td align="center">Spliterator<e></e></td><td align="center"><strong>spliterator</strong>()</td><td align="center">在此列表中的元素上创建 <em>late-binding</em> <em>和故障快速 Spliterator</em> 。</td></tr><tr><td align="center">Object[]</td><td align="center"><strong>toArray</strong>()</td><td align="center">以适当的顺序（从第一个元素到最后一个元素）返回包含此列表中所有元素的数组。</td></tr><tr><td align="center"><t> T[]</t></td><td align="center"><strong>toArray</strong>(T[] a)</td><td align="center">以适当的顺序返回包含此列表中所有元素的数组（从第一个元素到最后一个元素）; 返回数组的运行时类型是指定数组的运行时类型。</td></tr></tbody></table><h5 id="getFirst"><a href="#getFirst" class="headerlink" title="getFirst"></a>getFirst</h5><pre><code>// 取链表头部的元素public E getFirst() {    final Node&lt;E&gt; f = first;    if (f == null)        throw new NoSuchElementException();    return f.item;}</code></pre><h5 id="getLast"><a href="#getLast" class="headerlink" title="getLast"></a>getLast</h5><pre><code>// 取链表尾部的元素public E getLast() {    final Node&lt;E&gt; l = last;    if (l == null)        throw new NoSuchElementException();    return l.item;}</code></pre><h5 id="unlinkFirst"><a href="#unlinkFirst" class="headerlink" title="unlinkFirst"></a>unlinkFirst</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 首元素断链</span><br><span class="line">private E unlinkFirst(Node&lt;E&gt; f) {</span><br><span class="line">    // assert f == first &amp;&amp; f != null;</span><br><span class="line">    final E element = f.item;</span><br><span class="line">    final Node&lt;E&gt; next = f.next;</span><br><span class="line">    f.item = null;</span><br><span class="line">    f.next = null; // help GC</span><br><span class="line">    first = next;</span><br><span class="line">    if (next == null)</span><br><span class="line">        last = null;</span><br><span class="line">    else</span><br><span class="line">        next.prev = null;</span><br><span class="line">    size--;</span><br><span class="line">    modCount++;</span><br><span class="line">    return element;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="unlinkLast"><a href="#unlinkLast" class="headerlink" title="unlinkLast"></a>unlinkLast</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 尾元素断链</span><br><span class="line">private E unlinkLast(Node&lt;E&gt; l) {</span><br><span class="line">    // assert l == last &amp;&amp; l != null;</span><br><span class="line">    final E element = l.item;</span><br><span class="line">    final Node&lt;E&gt; prev = l.prev;</span><br><span class="line">    l.item = null;</span><br><span class="line">    l.prev = null; // help GC</span><br><span class="line">    last = prev;</span><br><span class="line">    if (prev == null)</span><br><span class="line">        first = null;</span><br><span class="line">    else</span><br><span class="line">        prev.next = null;</span><br><span class="line">    size--;</span><br><span class="line">    modCount++;</span><br><span class="line">    return element;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="unlink"><a href="#unlink" class="headerlink" title="unlink"></a>unlink</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">// 断链</span><br><span class="line">E unlink(Node&lt;E&gt; x) {</span><br><span class="line">    // assert x != null;</span><br><span class="line">    final E element = x.item;</span><br><span class="line">    final Node&lt;E&gt; next = x.next;</span><br><span class="line">    final Node&lt;E&gt; prev = x.prev;</span><br><span class="line"></span><br><span class="line">    if (prev == null) { // 如果是头节点</span><br><span class="line">        first = next;</span><br><span class="line">    } else {</span><br><span class="line">        prev.next = next;</span><br><span class="line">        x.prev = null;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    if (next == null) { // 如果是尾节点</span><br><span class="line">        last = prev;</span><br><span class="line">    } else {</span><br><span class="line">        next.prev = prev;</span><br><span class="line">        x.next = null;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    x.item = null;</span><br><span class="line">    size--;</span><br><span class="line">    modCount++;</span><br><span class="line">    return element;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="removeFirst"><a href="#removeFirst" class="headerlink" title="removeFirst"></a>removeFirst</h5><pre><code>public E removeFirst() {    final Node&lt;E&gt; f = first;    if (f == null)        throw new NoSuchElementException();    return unlinkFirst(f);}</code></pre><h5 id="removeLast"><a href="#removeLast" class="headerlink" title="removeLast"></a>removeLast</h5><pre><code>public E removeLast() {    final Node&lt;E&gt; l = last;    if (l == null)        throw new NoSuchElementException();    return unlinkLast(l);}</code></pre><h5 id="linkFirst"><a href="#linkFirst" class="headerlink" title="linkFirst"></a>linkFirst</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 首元素建立连接</span><br><span class="line">private void linkFirst(E e) {</span><br><span class="line">    final Node&lt;E&gt; f = first;</span><br><span class="line">    final Node&lt;E&gt; newNode = new Node&lt;&gt;(null, e, f);</span><br><span class="line">    first = newNode;</span><br><span class="line">    if (f == null)</span><br><span class="line">        last = newNode;</span><br><span class="line">    else</span><br><span class="line">        f.prev = newNode;</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="linkLast"><a href="#linkLast" class="headerlink" title="linkLast"></a>linkLast</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 尾元素建立连接</span><br><span class="line">void linkLast(E e) {</span><br><span class="line">    final Node&lt;E&gt; l = last;</span><br><span class="line">    final Node&lt;E&gt; newNode = new Node&lt;&gt;(l, e, null);</span><br><span class="line">    last = newNode;</span><br><span class="line">    if (l == null)</span><br><span class="line">        first = newNode;</span><br><span class="line">    else</span><br><span class="line">        l.next = newNode;</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="linkBefore"><a href="#linkBefore" class="headerlink" title="linkBefore"></a>linkBefore</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 插入在某节点前面</span><br><span class="line">void linkBefore(E e, Node&lt;E&gt; succ) {</span><br><span class="line">    // assert succ != null;</span><br><span class="line">    final Node&lt;E&gt; pred = succ.prev; // 保存插入位置的前驱</span><br><span class="line">    final Node&lt;E&gt; newNode = new Node&lt;&gt;(pred, e, succ);</span><br><span class="line">    succ.prev = newNode; // 插入位置的前驱改为新节点</span><br><span class="line">    if (pred == null)</span><br><span class="line">        first = newNode; // 插入位置为 0 </span><br><span class="line">    else</span><br><span class="line">        pred.next = newNode; 插入位置前驱的后继赋值</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="node"><a href="#node" class="headerlink" title="node"></a>node</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 查找相应索引的节点</span><br><span class="line">Node&lt;E&gt; node(int index) {</span><br><span class="line">    // assert isElementIndex(index);</span><br><span class="line"></span><br><span class="line">    if (index &lt; (size &gt;&gt; 1)) { // 根据索引大小决定从头还是尾进行查找</span><br><span class="line">        Node&lt;E&gt; x = first;</span><br><span class="line">        for (int i = 0; i &lt; index; i++)</span><br><span class="line">            x = x.next;</span><br><span class="line">        return x;</span><br><span class="line">    } else {</span><br><span class="line">        Node&lt;E&gt; x = last;</span><br><span class="line">        for (int i = size - 1; i &gt; index; i--)</span><br><span class="line">            x = x.prev;</span><br><span class="line">        return x;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="addFirst"><a href="#addFirst" class="headerlink" title="addFirst"></a>addFirst</h5><pre><code>public void addFirst(E e) {    linkFirst(e);}</code></pre><h5 id="addLast"><a href="#addLast" class="headerlink" title="addLast"></a>addLast</h5><pre><code>public void addLast(E e) {    linkLast(e);}</code></pre><h5 id="add-1"><a href="#add-1" class="headerlink" title="add"></a>add</h5><p>有两个方法，一个是直接在末尾插入元素，还一个是在指定索引下插入元素</p><pre><code>// 直接在末尾插入元素public boolean add(E e) {    linkLast(e);    return true;}// 在指定索引下插入元素public void add(int index, E element) {    checkPositionIndex(index); // index &gt;= 0 &amp;&amp; index &lt;= size    if (index == size) // 插入链表的索引在末尾        linkLast(element);    else        linkBefore(element, node(index)); // 通过 index 找到要插入的位置}</code></pre><h5 id="remove-1"><a href="#remove-1" class="headerlink" title="remove"></a>remove</h5><p>两种实现方法，一种是直接移除链表头部元素，还一种是移除指定索引的元素</p><pre><code>// 移除链表头部元素public E remove() {    return removeFirst();}// 移除指定索引元素public E remove(int index) {    checkElementIndex(index); // index &gt;= 0 &amp;&amp; index &lt; size    return unlink(node(index));}// 移除第一个出现的指定元素public boolean remove(Object o) {    if (o == null) {        for (Node&lt;E&gt; x = first; x != null; x = x.next) {            if (x.item == null) {                unlink(x);                return true;            }        }    } else {        for (Node&lt;E&gt; x = first; x != null; x = x.next) {            if (o.equals(x.item)) {                unlink(x);                return true;            }        }    }    return false;}</code></pre><h5 id="addAll-1"><a href="#addAll-1" class="headerlink" title="addAll"></a>addAll</h5><p>直接一次性把一堆元素添加在指定索引位置</p><pre><code>public boolean addAll(Collection&lt;? extends E&gt; c) {    return addAll(size, c);}public boolean addAll(int index, Collection&lt;? extends E&gt; c) {    checkPositionIndex(index); // index &gt;= 0 &amp;&amp; index &lt;= size    Object[] a = c.toArray();    int numNew = a.length;    if (numNew == 0)        return false;    Node&lt;E&gt; pred, succ;    if (index == size) { // 插入位置在末尾        succ = null;        pred = last;    } else {        succ = node(index);        pred = succ.prev;    }    for (Object o : a) { // 枚举插入元素        @SuppressWarnings("unchecked") E e = (E) o;        Node&lt;E&gt; newNode = new Node&lt;&gt;(pred, e, null);        if (pred == null)            first = newNode;        else            pred.next = newNode;        pred = newNode;    }    if (succ == null) { // 如果插入位置是末尾        last = pred;    } else {        pred.next = succ;        succ.prev = pred;    }    size += numNew; // 更新大小    modCount++;    return true;}</code></pre><h5 id="get-1"><a href="#get-1" class="headerlink" title="get"></a>get</h5><pre><code>// 取 index 位置的元素public E get(int index) {    checkElementIndex(index); // index &gt;= 0 &amp;&amp; index &lt; size    return node(index).item;}</code></pre><h5 id="set-1"><a href="#set-1" class="headerlink" title="set"></a>set</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public E set(int index, E element) {</span><br><span class="line">    checkElementIndex(index);</span><br><span class="line">    Node&lt;E&gt; x = node(index);</span><br><span class="line">    E oldVal = x.item;</span><br><span class="line">    x.item = element;</span><br><span class="line">    return oldVal;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="indexOf-1"><a href="#indexOf-1" class="headerlink" title="indexOf"></a>indexOf</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// 从前往后查找第一个与之相等的数</span><br><span class="line">public int indexOf(Object o) {</span><br><span class="line">    int index = 0;</span><br><span class="line">    if (o == null) {</span><br><span class="line">        for (Node&lt;E&gt; x = first; x != null; x = x.next) {</span><br><span class="line">            if (x.item == null)</span><br><span class="line">                return index;</span><br><span class="line">            index++;</span><br><span class="line">        }</span><br><span class="line">    } else {</span><br><span class="line">        for (Node&lt;E&gt; x = first; x != null; x = x.next) {</span><br><span class="line">            if (o.equals(x.item))</span><br><span class="line">                return index;</span><br><span class="line">            index++;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    return -1;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="lastIndexOf-1"><a href="#lastIndexOf-1" class="headerlink" title="lastIndexOf"></a>lastIndexOf</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// 从后往前查找第一个与之相等的数</span><br><span class="line">public int lastIndexOf(Object o) {</span><br><span class="line">    int index = size;</span><br><span class="line">    if (o == null) {</span><br><span class="line">        for (Node&lt;E&gt; x = last; x != null; x = x.prev) {</span><br><span class="line">            index--;</span><br><span class="line">            if (x.item == null)</span><br><span class="line">                return index;</span><br><span class="line">        }</span><br><span class="line">    } else {</span><br><span class="line">        for (Node&lt;E&gt; x = last; x != null; x = x.prev) {</span><br><span class="line">            index--;</span><br><span class="line">            if (o.equals(x.item))</span><br><span class="line">                return index;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    return -1;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="peek"><a href="#peek" class="headerlink" title="peek"></a>peek</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 返回第一个元素</span><br><span class="line">public E peek() {</span><br><span class="line">    final Node&lt;E&gt; f = first;</span><br><span class="line">    return (f == null) ? null : f.item;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="element"><a href="#element" class="headerlink" title="element"></a>element</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 返回第一个元素</span><br><span class="line">public E element() {</span><br><span class="line">    return getFirst();</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="poll"><a href="#poll" class="headerlink" title="poll"></a>poll</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 返回并删除第一个元素</span><br><span class="line">public E poll() {</span><br><span class="line">    final Node&lt;E&gt; f = first;</span><br><span class="line">    return (f == null) ? null : unlinkFirst(f);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="offer"><a href="#offer" class="headerlink" title="offer"></a>offer</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 添加元素</span><br><span class="line">public boolean offer(E e) {</span><br><span class="line">    return add(e);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="offerFirst"><a href="#offerFirst" class="headerlink" title="offerFirst"></a>offerFirst</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 添加元素到链表头部</span><br><span class="line">public boolean offerFirst(E e) {</span><br><span class="line">    addFirst(e);</span><br><span class="line">    return true;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="offerLast"><a href="#offerLast" class="headerlink" title="offerLast"></a>offerLast</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 添加元素到链表尾部</span><br><span class="line">public boolean offerLast(E e) {</span><br><span class="line">    addLast(e);</span><br><span class="line">    return true;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="peekFirst"><a href="#peekFirst" class="headerlink" title="peekFirst"></a>peekFirst</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 返回首元素</span><br><span class="line">public E peekFirst() {</span><br><span class="line">    final Node&lt;E&gt; f = first;</span><br><span class="line">    return (f == null) ? null : f.item;</span><br><span class="line"> }</span><br></pre></td></tr></table></figure></div><h5 id="peekLast"><a href="#peekLast" class="headerlink" title="peekLast"></a>peekLast</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 返回尾元素</span><br><span class="line">public E peekLast() {</span><br><span class="line">    final Node&lt;E&gt; l = last;</span><br><span class="line">    return (l == null) ? null : l.item;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="pollFirst"><a href="#pollFirst" class="headerlink" title="pollFirst"></a>pollFirst</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 删除首元素</span><br><span class="line">public E pollFirst() {</span><br><span class="line">    final Node&lt;E&gt; f = first;</span><br><span class="line">    return (f == null) ? null : unlinkFirst(f);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="pollLast"><a href="#pollLast" class="headerlink" title="pollLast"></a>pollLast</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 删除尾元素</span><br><span class="line">public E pollLast() {</span><br><span class="line">    final Node&lt;E&gt; l = last;</span><br><span class="line">    return (l == null) ? null : unlinkLast(l);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="push"><a href="#push" class="headerlink" title="push"></a>push</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 压入栈顶</span><br><span class="line">public void push(E e) {</span><br><span class="line">    addFirst(e);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="pop"><a href="#pop" class="headerlink" title="pop"></a>pop</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 移除栈顶元素</span><br><span class="line">public E pop() {</span><br><span class="line">    return removeFirst();</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="removeFirstOccurrence"><a href="#removeFirstOccurrence" class="headerlink" title="removeFirstOccurrence"></a>removeFirstOccurrence</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 移除第一个相同的元素</span><br><span class="line">public boolean removeFirstOccurrence(Object o) {</span><br><span class="line">    return remove(o);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="removeLastOccurrence"><a href="#removeLastOccurrence" class="headerlink" title="removeLastOccurrence"></a>removeLastOccurrence</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// 移除最后一个相同的元素</span><br><span class="line">public boolean removeLastOccurrence(Object o) {</span><br><span class="line">    if (o == null) {</span><br><span class="line">        for (Node&lt;E&gt; x = last; x != null; x = x.prev) {</span><br><span class="line">            if (x.item == null) {</span><br><span class="line">                unlink(x);</span><br><span class="line">                return true;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    } else {</span><br><span class="line">        for (Node&lt;E&gt; x = last; x != null; x = x.prev) {</span><br><span class="line">            if (o.equals(x.item)) {</span><br><span class="line">                unlink(x);</span><br><span class="line">                return true;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    return false;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a><em>Set</em></h3><h4 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a><em>TreeSet</em></h4><p>基于红黑树实现，支持有序性操作，例如根据一个范围查找元素</p><p>查找效率不如 <em>HashSet</em>，<em>HashSet</em> 查找的时间复杂度为 O(1)，<em>TreeSet</em> 为 O(logN)</p><p><em>TreeSet</em> 的底层实际是 <em>TreeMap</em> 的套壳，使用 <em>TreeMap</em> 的 key 来存储元素</p><h5 id="底层数据结构-2"><a href="#底层数据结构-2" class="headerlink" title="底层数据结构"></a>底层数据结构</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private transient NavigableMap&lt;E,Object&gt; m; // 实则 Map 的套壳</span><br></pre></td></tr></table></figure></div><h5 id="构造器-3"><a href="#构造器-3" class="headerlink" title="构造器"></a>构造器</h5><table><thead><tr><th align="center"><strong>构造器</strong></th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><strong>TreeSet</strong>()</td><td align="center">构造一个新的空树集，根据其元素的自然顺序进行排序。</td></tr><tr><td align="center"><strong>TreeSet</strong>(Collection&lt;? extends E&gt; c)</td><td align="center">构造一个新的树集，其中包含指定集合中的元素，并根据其元素的 <em>自然顺序进行排序</em> 。</td></tr><tr><td align="center"><strong>TreeSet</strong>(Comparator&lt;? super E&gt; comparator)</td><td align="center">构造一个新的空树集，根据指定的比较器进行排序。</td></tr><tr><td align="center"><strong>TreeSet</strong>(SortedSet<e> s)</e></td><td align="center">构造一个包含相同元素并使用与指定有序集相同排序的新树集。</td></tr></tbody></table><pre><code>// 底层 MapTreeSet(NavigableMap&lt;E,Object&gt; m) {    this.m = m;}// 以自然排序的方式创建一个新的 TreeMap，根据该 TreeMap 创建一个 TreeSet，使用 TreeMap 的 key 来保存 Set 集合中的元素public TreeSet() {    this(new TreeMap&lt;&gt;());}// 以自定义排序的方式创建一个新的 TreeMap，根据该 TreeMap 创建一个 TreeSet，使用 TreeMap 的 key 来保存 Set 集合中的元素public TreeSet(Comparator&lt;? super E&gt; comparator) {    this(new TreeMap&lt;&gt;(comparator));}// 先调用无参构造器，以自然排序的方式创建一个 TreeSet，再通过 addAll 方法赋值public TreeSet(Collection&lt;? extends E&gt; c) {    this();    addAll(c);}// 先调用自定义排序构造器，以自定义排序的方式创建一个 TreeSet，再通过 addAll 方法赋值public TreeSet(SortedSet&lt;E&gt; s) {    this(s.comparator());    addAll(s);}</code></pre><h5 id="方法概要-3"><a href="#方法概要-3" class="headerlink" title="方法概要"></a>方法概要</h5><table><thead><tr><th align="center"><strong>变量和类型</strong></th><th align="center">方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">boolean</td><td align="center"><strong>add</strong>(E e)</td><td align="center">如果指定的元素尚不存在，则将其添加到此集合中。</td></tr><tr><td align="center">boolean</td><td align="center"><strong>addAll</strong>(Collection&lt;? extends E&gt; c)</td><td align="center">将指定集合中的所有元素添加到此集合中。</td></tr><tr><td align="center">E</td><td align="center"><strong>ceiling</strong>(E e)</td><td align="center">返回此set中大于或等于给定元素的 <code>null</code>元素，如果没有这样的元素，则 <code>null</code> 。</td></tr><tr><td align="center">void</td><td align="center"><strong>clear</strong>()</td><td align="center">从该集中删除所有元素。</td></tr><tr><td align="center">Object</td><td align="center"><strong>clone</strong>()</td><td align="center">返回此 <code>TreeSet</code>实例的浅表副本。</td></tr><tr><td align="center">boolean</td><td align="center"><strong>contains</strong>(Object o)</td><td align="center">如果此set包含指定的元素，则返回 <code>true</code> 。</td></tr><tr><td align="center">Iterator<e></e></td><td align="center"><strong>descendingIterator</strong>()</td><td align="center">以降序返回此集合中元素的迭代器。</td></tr><tr><td align="center">NavigableSet<e></e></td><td align="center"><strong>descendingSet</strong>()</td><td align="center">返回此set中包含的元素的逆序视图。</td></tr><tr><td align="center">E</td><td align="center"><strong>first</strong>()</td><td align="center">返回此集合中当前的第一个（最低）元素。</td></tr><tr><td align="center">E</td><td align="center"><strong>floor</strong>(E e)</td><td align="center">返回此set中小于或等于给定元素的最大元素，如果没有这样的元素，则 <code>null</code> 。</td></tr><tr><td align="center">SortedSet<e></e></td><td align="center"><strong>headSet</strong>(E toElement)</td><td align="center">返回此set的部分视图，其元素严格小于 <code>toElement</code> 。</td></tr><tr><td align="center">NavigableSet<e></e></td><td align="center"><strong>headSet</strong>(E toElement, boolean inclusive)</td><td align="center">返回此set的部分视图，其元素小于（或等于，如果 <code>inclusive</code>为true） <code>toElement</code> 。</td></tr><tr><td align="center">E</td><td align="center"><strong>higher</strong>(E e)</td><td align="center">返回此集合中的最小元素严格大于给定元素，如果没有这样的元素，则 <code>null</code> 。</td></tr><tr><td align="center">boolean</td><td align="center"><strong>isEmpty</strong>()</td><td align="center">如果此集合不包含任何元素，则返回 <code>true</code> 。</td></tr><tr><td align="center">Iterator<e></e></td><td align="center"><strong>iterator</strong>()</td><td align="center">以升序返回此集合中元素的迭代器。</td></tr><tr><td align="center">E</td><td align="center"><strong>last</strong>()</td><td align="center">返回此集合中当前的最后一个（最高）元素。</td></tr><tr><td align="center">E</td><td align="center"><strong>lower</strong>(E e)</td><td align="center">返回此集合中的最大元素严格小于给定元素，如果没有这样的元素，则 <code>null</code> 。</td></tr><tr><td align="center">E</td><td align="center"><strong>pollFirst</strong>()</td><td align="center">检索并删除第一个（最低）元素，如果此组为空，则返回 <code>null</code> 。</td></tr><tr><td align="center">E</td><td align="center"><strong>pollLast</strong>()</td><td align="center">检索并删除最后一个（最高）元素，如果此集合为空，则返回 <code>null</code> 。</td></tr><tr><td align="center">boolean</td><td align="center"><strong>remove</strong>(Object o)</td><td align="center">如果存在，则从该集合中移除指定的元素。</td></tr><tr><td align="center">int</td><td align="center"><strong>size</strong>()</td><td align="center">返回此集合中的元素数（基数）。</td></tr><tr><td align="center">Spliterator<e></e></td><td align="center"><strong>spliterator</strong>()</td><td align="center">在此集合中的元素上创建 <em>late-binding</em> 和<em>故障快速</em> <code>Spliterator</code> 。</td></tr><tr><td align="center">NavigableSet<e></e></td><td align="center"><strong>subSet</strong>(E fromElement, boolean fromInclusive, E toElement, boolean toInclusive)</td><td align="center">返回此set的部分视图，其元素范围为 <code>fromElement</code>到 <code>toElement</code> 。</td></tr><tr><td align="center">SortedSet<e></e></td><td align="center"><strong>subSet</strong>(E fromElement, E toElement)</td><td align="center">返回此set的部分视图，其元素范围从 <code>fromElement</code> （含）到 <code>toElement</code> （独占）。</td></tr><tr><td align="center">SortedSet<e></e></td><td align="center"><strong>tailSet</strong>(E fromElement)</td><td align="center">返回此set的部分视图，其元素大于或等于 <code>fromElement</code> 。</td></tr><tr><td align="center">NavigableSet<e></e></td><td align="center"><strong>tailSet</strong>(E fromElement, boolean inclusive)</td><td align="center">返回此set的部分视图，其元素大于（或等于，如果 <code>inclusive</code>为true） <code>fromElement</code> 。</td></tr></tbody></table><p>具体方法在后文的 <em>TreeMap</em> 中介绍</p><h4 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a><em>HashSet</em></h4><p>基于哈希表实现，支持快速查找，但不支持有序性操作。</p><p>失去了元素的插入顺序信息，使用 <em>Iterator</em> 遍历 <em>HashSet</em> 得到的结果是不确定的</p><p><em>HashSet</em> 的底层实际是 <em>HashMap</em> 的套壳，使用 <em>HashMap</em> 的 key 来存储元素</p><h5 id="底层数据结构-3"><a href="#底层数据结构-3" class="headerlink" title="底层数据结构"></a>底层数据结构</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private transient HashMap&lt;E,Object&gt; map;</span><br></pre></td></tr></table></figure></div><h5 id="构造器-4"><a href="#构造器-4" class="headerlink" title="构造器"></a>构造器</h5><table><thead><tr><th align="center"><strong>构造器</strong></th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><strong>HashSet</strong>()</td><td align="center">构造一个新的空集; 支持<code>HashMap</code>实例具有默认初始容量（16）和加载因子（0.75）。</td></tr><tr><td align="center"><strong>HashSet</strong>(int initialCapacity)</td><td align="center">构造一个新的空集; 支持<code>HashMap</code>实例具有指定的初始容量和默认加载因子（0.75）。</td></tr><tr><td align="center"><strong>HashSet</strong>(int initialCapacity, float loadFactor)</td><td align="center">构造一个新的空集; 支持<code>HashMap</code>实例具有指定的初始容量和指定的加载因子。</td></tr><tr><td align="center"><strong>HashSet</strong>(Collection&lt;? extends E&gt; c)</td><td align="center">构造一个包含指定集合中元素的新集合。</td></tr></tbody></table><pre><code>// 实例化 HashMappublic HashSet() {    map = new HashMap&lt;&gt;();}// 实例化并赋值public HashSet(Collection&lt;? extends E&gt; c) {    map = new HashMap&lt;&gt;(Math.max((int) (c.size()/.75f) + 1, 16));    addAll(c);}// 初始化 HashMappublic HashSet(int initialCapacity, float loadFactor) {    map = new HashMap&lt;&gt;(initialCapacity, loadFactor);}// 初始化 HashMappublic HashSet(int initialCapacity) {    map = new HashMap&lt;&gt;(initialCapacity);}// 初始化 HashMap//  不对外公开的构造方法，default修饰，实际上是提供给LinkedHashSet使用//  dummy 参数无实际意义，仅作标识作用（为了和前面第三个构造方法进行区分）HashSet(int initialCapacity, float loadFactor, boolean dummy) {    map = new LinkedHashMap&lt;&gt;(initialCapacity, loadFactor);}</code></pre><h5 id="方法概要-4"><a href="#方法概要-4" class="headerlink" title="方法概要"></a>方法概要</h5><table><thead><tr><th align="center"><strong>变量和类型</strong></th><th align="center">方法</th><th align="center"><strong>描述</strong></th></tr></thead><tbody><tr><td align="center">boolean</td><td align="center"><strong>add</strong>(E e)</td><td align="center">如果指定的元素尚不存在，则将其添加到此集合中。</td></tr><tr><td align="center">void</td><td align="center"><strong>clear</strong>()</td><td align="center">从该集中删除所有元素。</td></tr><tr><td align="center">Object</td><td align="center"><strong>clone</strong>()</td><td align="center">返回此 <code>HashSet</code>实例的浅表副本：未克隆元素本身。</td></tr><tr><td align="center">boolean</td><td align="center"><strong>contains</strong>(Object o)</td><td align="center">如果此set包含指定的元素，则返回 <code>true</code> 。</td></tr><tr><td align="center">boolean</td><td align="center"><strong>isEmpty</strong>()</td><td align="center">如果此集合不包含任何元素，则返回 <code>true</code> 。</td></tr><tr><td align="center">Iterator<e></e></td><td align="center"><strong>iterator</strong>()</td><td align="center">返回此set中元素的迭代器。</td></tr><tr><td align="center">boolean</td><td align="center"><strong>remove</strong>(Object o)</td><td align="center">如果存在，则从该集合中移除指定的元素。</td></tr><tr><td align="center">int</td><td align="center"><strong>size</strong>()</td><td align="center">返回此集合中的元素数（基数）。</td></tr><tr><td align="center">Spliterator<e></e></td><td align="center"><strong>spliterator</strong>()</td><td align="center">在此集合中的元素上创建 <em>late-binding</em> 和<em>失败快速</em>  <code>Spliterator</code> 。</td></tr></tbody></table><p>具体方法在后文的 <em>HashMap</em> 中介绍</p><h4 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a><em>LinkedHashSet</em></h4><p>基于双向链表实现，只能顺序访问，可以快速地在链表中间插入和删除元素</p><p><em>LinkedList</em> 还可以用作栈、队列和双向队列</p><p><em>LinkedHashSet</em> 的底层实际是 <em>LinkedHashMap</em> 的套壳，使用 <em>LinkedHashMap</em> 的 key 来存储元素</p><h5 id="构造器-5"><a href="#构造器-5" class="headerlink" title="构造器"></a>构造器</h5><table><thead><tr><th align="center"><strong>构造器</strong></th><th align="center"><strong>描述</strong></th></tr></thead><tbody><tr><td align="center"><strong>LinkedHashSet</strong>()</td><td align="center">使用默认初始容量（16）和加载因子（0.75）构造一个新的空链接哈希集。</td></tr><tr><td align="center"><strong>LinkedHashSet</strong>(int initialCapacity)</td><td align="center">使用指定的初始容量和默认加载因子（0.75）构造一个新的空链接哈希集。</td></tr><tr><td align="center"><strong>LinkedHashSet</strong>(int initialCapacity, float loadFactor)</td><td align="center">使用指定的初始容量和加载因子构造一个新的空链接哈希集。</td></tr><tr><td align="center"><strong>LinkedHashSet</strong>(Collection&lt;? extends E&gt; c)</td><td align="center">构造一个新的链接哈希集，其具有与指定集合相同的元素。</td></tr></tbody></table><pre><code>// 构造方法全部都是调用Hashset的构造方法public LinkedHashSet(int initialCapacity, float loadFactor) {    super(initialCapacity, loadFactor, true);}public LinkedHashSet(int initialCapacity) {    super(initialCapacity, .75f, true);}public LinkedHashSet() {    super(16, .75f, true);}public LinkedHashSet(Collection&lt;? extends E&gt; c) {    super(Math.max(2*c.size(), 11), .75f, true);    addAll(c);}</code></pre><h5 id="方法概要-5"><a href="#方法概要-5" class="headerlink" title="方法概要"></a>方法概要</h5><table><thead><tr><th align="center"><strong>变量和类型</strong></th><th align="center">方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">Spliterator<e></e></td><td align="center"><strong>spliterator</strong>()</td><td align="center">在此集合中的元素上创建 <em>late-binding</em> 和<em>失败快速</em>  <code>Spliterator</code> 。</td></tr></tbody></table><p>具体方法在后文的 <em>LinkedHashMap</em> 中介绍</p><h3 id="Stack-amp-amp-Queue"><a href="#Stack-amp-amp-Queue" class="headerlink" title="Stack && Queue"></a><em>Stack</em> &amp;&amp; <em>Queue</em></h3><p><em>Java</em> 中有个叫做 <em>Stack</em> 的类，没有叫做 <em>Queue</em> 的类，只有叫做 <em>Queue</em> 的接口，<em>Stack</em> 类官方已经不推荐使用，所以如果要选择实现栈与队列，优先考虑效率更高的 <em>ArrayDeque</em>（次选是 LinkedList）</p><h4 id="ArrayDeque"><a href="#ArrayDeque" class="headerlink" title="ArrayDeque"></a><em>ArrayDeque</em></h4><p>底层通过数组实现，为了满足同时在数组两端插入或删除，该数组也是循环数组，数组的任何一点都可能被看作头或者尾</p><p><em>ArrayDeque</em> 是非线程安全的（not thread-safe），当多个线程同时使用的时候，需要程序员手动同步</p><p>该容器不允许放入 <code>null</code> 元素。</p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/03/16/62318d8a20deb.png" alt="ArrayDeque"></p><p>head 指向循环数组的第一个有效元素，tail 指向第一个可以插入元素的空位</p><h5 id="底层数据结构-4"><a href="#底层数据结构-4" class="headerlink" title="底层数据结构"></a>底层数据结构</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">transient Object[] elements;</span><br><span class="line"></span><br><span class="line">transient int head;</span><br><span class="line"></span><br><span class="line">transient int tail;</span><br></pre></td></tr></table></figure></div><h5 id="构造器-6"><a href="#构造器-6" class="headerlink" title="构造器"></a>构造器</h5><table><thead><tr><th align="center"><strong>构造器</strong></th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><strong>ArrayDeque</strong>()</td><td align="center">构造一个空数组deque，其初始容量足以容纳16个元素。</td></tr><tr><td align="center"><strong>ArrayDeque</strong>(int numElements)</td><td align="center">构造一个空数组deque，其初始容量足以容纳指定数量的元素。</td></tr><tr><td align="center"><strong>ArrayDeque</strong>(Collection&lt;? extends E&gt; c)</td><td align="center">按照集合的迭代器返回的顺序构造一个包含指定集合元素的双端队列。</td></tr></tbody></table><pre><code>// 空构造器public ArrayDeque() {    elements = new Object[16];}// 构造一个指定大小的数组public ArrayDeque(int numElements) {    elements =        new Object[(numElements &lt; 1) ? 1 :                   (numElements == Integer.MAX_VALUE) ? Integer.MAX_VALUE :                   numElements + 1];}// 构造一个包含 Collection 集合所有元素的数组public ArrayDeque(Collection&lt;? extends E&gt; c) {    this(c.size());    copyElements(c);}private void copyElements(Collection&lt;? extends E&gt; c) {    c.forEach(this::addLast);}</code></pre><h5 id="方法概要-6"><a href="#方法概要-6" class="headerlink" title="方法概要"></a>方法概要</h5><table><thead><tr><th align="center"><strong>变量和类型</strong></th><th align="center"><strong>方法</strong></th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">boolean</td><td align="center"><strong>add</strong>(E e)</td><td align="center">在此双端队列的末尾插入指定的元素。</td></tr><tr><td align="center">boolean</td><td align="center"><strong>addAll</strong>(Collection&lt;? extends E&gt; c)</td><td align="center">在此双端队列的末尾添加指定集合中的所有元素，就好像通过在每个双 <a class="link" href="https://www.apiref.com/java11-zh/java.base/java/util/ArrayDeque.html#addLast(E)">端子 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>上调用 <a href="https://www.apiref.com/java11-zh/java.base/java/util/ArrayDeque.html#addLast(E)"><code>addLast(E)</code>一样</a> ，按照集合的迭代器返回它们的顺序。</td></tr><tr><td align="center">void</td><td align="center"><strong>addFirst</strong>(E e)</td><td align="center">在此双端队列的前面插入指定的元素。</td></tr><tr><td align="center">void</td><td align="center"><strong>addLast</strong>(E e)</td><td align="center">在此双端队列的末尾插入指定的元素。</td></tr><tr><td align="center">void</td><td align="center"><strong>clear</strong>()</td><td align="center">从此双端队列中删除所有元素。</td></tr><tr><td align="center">ArrayDeque<e></e></td><td align="center"><strong>clone</strong>()</td><td align="center">返回此双端队列的副本。</td></tr><tr><td align="center">boolean</td><td align="center"><strong>contains</strong>(Object o)</td><td align="center">如果此双端队列包含指定的元素，则返回 <code>true</code> 。</td></tr><tr><td align="center">E</td><td align="center"><strong>element</strong>()</td><td align="center">检索但不删除此双端队列表示的队列的头部。</td></tr><tr><td align="center">void</td><td align="center"><strong>forEach</strong>(Consumer&lt;? super E&gt; action)</td><td align="center">对 <code>Iterable</code>每个元素执行给定操作，直到处理 <code>Iterable</code>所有元素或操作引发异常。</td></tr><tr><td align="center">E</td><td align="center"><strong>getFirst</strong>()</td><td align="center">检索但不删除此双端队列的第一个元素。</td></tr><tr><td align="center">E</td><td align="center"><strong>getLast</strong>()</td><td align="center">检索但不删除此双端队列的最后一个元素。</td></tr><tr><td align="center">boolean</td><td align="center"><strong>isEmpty</strong>()</td><td align="center">如果此双端队列不包含任何元素，则返回 <code>true</code> 。</td></tr><tr><td align="center">Iterator<e></e></td><td align="center"><strong>iterator</strong>()</td><td align="center">返回此双端队列中元素的迭代器。</td></tr><tr><td align="center">boolean</td><td align="center"><strong>offer</strong>(E e)</td><td align="center">在此双端队列的末尾插入指定的元素。</td></tr><tr><td align="center">boolean</td><td align="center"><strong>offerFirst</strong>(E e)</td><td align="center">在此双端队列的前面插入指定的元素。</td></tr><tr><td align="center">boolean</td><td align="center"><strong>offerLast</strong>(E e)</td><td align="center">在此双端队列的末尾插入指定的元素。</td></tr><tr><td align="center">E</td><td align="center"><strong>peek</strong>()</td><td align="center">检索但不删除此双端队列表示的队列的头部，如果此双端队列为空，则返回 <code>null</code> 。</td></tr><tr><td align="center">E</td><td align="center"><strong>poll</strong>()</td><td align="center">检索并删除此双端队列表示的队列的头部（换句话说，此双端队列的第一个元素），如果此双端队列为空，则返回 <code>null</code> 。</td></tr><tr><td align="center">E</td><td align="center"><strong>pop</strong>()</td><td align="center">从此双端队列表示的堆栈中弹出一个元素。</td></tr><tr><td align="center">void</td><td align="center"><strong>push</strong>(E e)</td><td align="center">将元素推送到此双端队列表示的堆栈上。</td></tr><tr><td align="center">E</td><td align="center"><strong>remove</strong>()</td><td align="center">检索并删除此双端队列表示的队列的头部。</td></tr><tr><td align="center">boolean</td><td align="center"><strong>remove</strong>(Object o)</td><td align="center">从此双端队列中删除指定元素的单个实例。</td></tr><tr><td align="center">boolean</td><td align="center"><strong>removeAll</strong>(Collection&lt;?&gt; c)</td><td align="center">删除此集合的所有元素，这些元素也包含在指定的集合中（可选操作）。</td></tr><tr><td align="center">E</td><td align="center"><strong>removeFirst</strong>()</td><td align="center">检索并删除此双端队列的第一个元素。</td></tr><tr><td align="center">boolean</td><td align="center"><strong>removeFirstOccurrence</strong>(Object o)</td><td align="center">删除此双端队列中第一次出现的指定元素（从头到尾遍历双端队列时）。</td></tr><tr><td align="center">boolean</td><td align="center"><strong>removeIf</strong>(Predicate&lt;? super E&gt; filter)</td><td align="center">删除此集合中满足给定谓词的所有元素。</td></tr><tr><td align="center">E</td><td align="center"><strong>removeLast</strong>()</td><td align="center">检索并删除此双端队列的最后一个元素。</td></tr><tr><td align="center">boolean</td><td align="center"><strong>removeLastOccurrence</strong>(Object o)</td><td align="center">删除此双端队列中最后一次出现的指定元素（从头到尾遍历双端队列时）。</td></tr><tr><td align="center">boolean</td><td align="center"><strong>retainAll</strong>(Collection&lt;?&gt; c)</td><td align="center">仅保留此集合中包含在指定集合中的元素（可选操作）。</td></tr><tr><td align="center">int</td><td align="center"><strong>size</strong>()</td><td align="center">返回此双端队列中的元素数。</td></tr><tr><td align="center">Spliterator<e></e></td><td align="center"><strong>spliterator</strong>()</td><td align="center">在此双端队列中的元素上创建<em>late-binding</em>和<em>失败快速</em> <code>Spliterator</code> 。</td></tr><tr><td align="center">Object[]</td><td align="center"><strong>toArray</strong>()</td><td align="center">以适当的顺序（从第一个元素到最后一个元素）返回一个包含此双端队列中所有元素的数组。</td></tr><tr><td align="center"><t> T[]</t></td><td align="center"><strong>toArray</strong>(T[] a)</td><td align="center">以适当的顺序（从第一个元素到最后一个元素）返回一个包含此双端队列中所有元素的数组; 返回数组的运行时类型是指定数组的运行时类型。</td></tr></tbody></table><h5 id="扩容函数"><a href="#扩容函数" class="headerlink" title="扩容函数"></a>扩容函数</h5><pre><code>private void grow(int needed) {    final int oldCapacity = elements.length;    int newCapacity;    // 如果容量小于 64，则扩大为双倍 + 2，否则扩大为 1.5 倍    int jump = (oldCapacity &lt; 64) ? (oldCapacity + 2) : (oldCapacity &gt;&gt; 1);    if (jump &lt; needed        || (newCapacity = (oldCapacity + jump)) - MAX_ARRAY_SIZE &gt; 0)        newCapacity = newCapacity(needed, jump);    final Object[] es = elements = Arrays.copyOf(elements, newCapacity);    if (tail &lt; head || (tail == head &amp;&amp; es[head] != null)) {        int newSpace = newCapacity - oldCapacity;        // 将头部元素拷贝到数组尾部，并将空间置为 null        System.arraycopy(es, head,                         es, head + newSpace,                         oldCapacity - head);        for (int i = head, to = (head += newSpace); i &lt; to; i++)            es[i] = null;    }}private int newCapacity(int needed, int jump) {    final int oldCapacity = elements.length, minCapacity;    if ((minCapacity = oldCapacity + needed) - MAX_ARRAY_SIZE &gt; 0) {        if (minCapacity &lt; 0)            throw new IllegalStateException("Sorry, deque too big");        return Integer.MAX_VALUE;    }    if (needed &gt; jump)        return minCapacity;    return (oldCapacity + jump - MAX_ARRAY_SIZE &lt; 0)        ? oldCapacity + jump        : MAX_ARRAY_SIZE;}</code></pre><h5 id="dec"><a href="#dec" class="headerlink" title="dec"></a>dec</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 计算循环索引，维持双端数组</span><br><span class="line">static final int dec(int i, int modulus) {</span><br><span class="line">    if (--i &lt; 0) i = modulus - 1;</span><br><span class="line">    return i;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="inc"><a href="#inc" class="headerlink" title="inc"></a>inc</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 计算循环索引，维持双端数组</span><br><span class="line">static final int inc(int i, int modulus) {</span><br><span class="line">    if (++i &gt;= modulus) i = 0;</span><br><span class="line">    return i;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="addFirst-1"><a href="#addFirst-1" class="headerlink" title="addFirst"></a>addFirst</h5><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/03/16/62318d91d31af.png" alt="addFirst"></p><pre><code>// 将元素插入数组头部public void addFirst(E e) {    if (e == null)        throw new NullPointerException();    final Object[] es = elements;    es[head = dec(head, es.length)] = e; // 计算循环索引，--head    if (head == tail)        grow(1); // 扩容}</code></pre><h5 id="addLast-1"><a href="#addLast-1" class="headerlink" title="addLast"></a>addLast</h5><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/03/16/62318d95975be.png" alt="addLast"></p><pre><code>// 将元素插入数组尾部public void addLast(E e) {    if (e == null)        throw new NullPointerException();    final Object[] es = elements;    es[tail] = e;    if (head == (tail = inc(tail, es.length))) // 计算循环索引，++tail        grow(1);}</code></pre><h5 id="addAll-2"><a href="#addAll-2" class="headerlink" title="addAll"></a>addAll</h5><p>将集合中的所有元素插入 <em>ArrayDeque</em> 的尾部</p><pre><code>public boolean addAll(Collection&lt;? extends E&gt; c) {    final int s, needed;    if ((needed = (s = size()) + c.size() + 1 - elements.length) &gt; 0)        grow(needed);    copyElements(c);    return size() &gt; s;}private void copyElements(Collection&lt;? extends E&gt; c) {    c.forEach(this::addLast);}</code></pre><h5 id="offerFirst-1"><a href="#offerFirst-1" class="headerlink" title="offerFirst"></a>offerFirst</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public boolean offerFirst(E e) {</span><br><span class="line">    addFirst(e);</span><br><span class="line">    return true;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="offerLast-1"><a href="#offerLast-1" class="headerlink" title="offerLast"></a>offerLast</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public boolean offerLast(E e) {</span><br><span class="line">    addLast(e);</span><br><span class="line">    return true;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="removeFirst-1"><a href="#removeFirst-1" class="headerlink" title="removeFirst"></a>removeFirst</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public E removeFirst() {</span><br><span class="line">    E e = pollFirst();</span><br><span class="line">    if (e == null)</span><br><span class="line">        throw new NoSuchElementException();</span><br><span class="line">    return e;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="removeLast-1"><a href="#removeLast-1" class="headerlink" title="removeLast"></a>removeLast</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public E removeLast() {</span><br><span class="line">    E e = pollLast();</span><br><span class="line">    if (e == null)</span><br><span class="line">        throw new NoSuchElementException();</span><br><span class="line">    return e;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="pollFirst-1"><a href="#pollFirst-1" class="headerlink" title="pollFirst"></a>pollFirst</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public E pollFirst() {</span><br><span class="line">    final Object[] es;</span><br><span class="line">    final int h;</span><br><span class="line">    E e = elementAt(es = elements, h = head);</span><br><span class="line">    if (e != null) {</span><br><span class="line">        es[h] = null;</span><br><span class="line">        head = inc(h, es.length);</span><br><span class="line">    }</span><br><span class="line">    return e; // 返回并删除</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="pollLast-1"><a href="#pollLast-1" class="headerlink" title="pollLast"></a>pollLast</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public E pollLast() {</span><br><span class="line">    final Object[] es;</span><br><span class="line">    final int t;</span><br><span class="line">    E e = elementAt(es = elements, t = dec(tail, es.length));</span><br><span class="line">    if (e != null)</span><br><span class="line">        es[tail = t] = null;</span><br><span class="line">    return e;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="getFirst-1"><a href="#getFirst-1" class="headerlink" title="getFirst"></a>getFirst</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public E getFirst() {</span><br><span class="line">    E e = elementAt(elements, head);</span><br><span class="line">    if (e == null)</span><br><span class="line">        throw new NoSuchElementException();</span><br><span class="line">    return e;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">static final &lt;E&gt; E elementAt(Object[] es, int i) {</span><br><span class="line">return (E) es[i];</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="getLast-1"><a href="#getLast-1" class="headerlink" title="getLast"></a>getLast</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public E getLast() {</span><br><span class="line">    final Object[] es = elements;</span><br><span class="line">    E e = elementAt(es, dec(tail, es.length));</span><br><span class="line">    if (e == null)</span><br><span class="line">        throw new NoSuchElementException();</span><br><span class="line">    return e;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">static final &lt;E&gt; E elementAt(Object[] es, int i) {</span><br><span class="line">return (E) es[i];</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="peekFirst-1"><a href="#peekFirst-1" class="headerlink" title="peekFirst"></a>peekFirst</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 取队首</span><br><span class="line">public E peekFirst() {</span><br><span class="line">    return elementAt(elements, head);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">static final &lt;E&gt; E elementAt(Object[] es, int i) {</span><br><span class="line">return (E) es[i];</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="peekLast-1"><a href="#peekLast-1" class="headerlink" title="peekLast"></a>peekLast</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public E peekLast() {</span><br><span class="line">    final Object[] es;</span><br><span class="line">    return elementAt(es = elements, dec(tail, es.length));</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">static final &lt;E&gt; E elementAt(Object[] es, int i) {</span><br><span class="line">return (E) es[i];</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">// 数组拷贝进行删除</span><br><span class="line">boolean delete(int i) {</span><br><span class="line">    final Object[] es = elements;</span><br><span class="line">    final int capacity = es.length;</span><br><span class="line">    final int h, t;</span><br><span class="line">    // number of elements before to-be-deleted elt</span><br><span class="line">    final int front = sub(i, h = head, capacity);</span><br><span class="line">    // number of elements after to-be-deleted elt</span><br><span class="line">    final int back = sub(t = tail, i, capacity) - 1;</span><br><span class="line">    if (front &lt; back) {</span><br><span class="line">        // move front elements forwards</span><br><span class="line">        if (h &lt;= i) {</span><br><span class="line">            System.arraycopy(es, h, es, h + 1, front);</span><br><span class="line">        } else { // Wrap around</span><br><span class="line">            System.arraycopy(es, 0, es, 1, i);</span><br><span class="line">            es[0] = es[capacity - 1];</span><br><span class="line">            System.arraycopy(es, h, es, h + 1, front - (i + 1));</span><br><span class="line">        }</span><br><span class="line">        es[h] = null;</span><br><span class="line">        head = inc(h, capacity);</span><br><span class="line">        return false;</span><br><span class="line">    } else {</span><br><span class="line">        // move back elements backwards</span><br><span class="line">        tail = dec(t, capacity);</span><br><span class="line">        if (i &lt;= tail) {</span><br><span class="line">            System.arraycopy(es, i + 1, es, i, back);</span><br><span class="line">        } else { // Wrap around</span><br><span class="line">            System.arraycopy(es, i + 1, es, i, capacity - (i + 1));</span><br><span class="line">            es[capacity - 1] = es[0];</span><br><span class="line">            System.arraycopy(es, 1, es, 0, t - 1);</span><br><span class="line">        }</span><br><span class="line">        es[tail] = null;</span><br><span class="line">        return true;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="removeFirstOccurrence-1"><a href="#removeFirstOccurrence-1" class="headerlink" title="removeFirstOccurrence"></a>removeFirstOccurrence</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public boolean removeFirstOccurrence(Object o) {</span><br><span class="line">    if (o != null) {</span><br><span class="line">        final Object[] es = elements;</span><br><span class="line">        for (int i = head, end = tail, to = (i &lt;= end) ? end : es.length;</span><br><span class="line">             ; i = 0, to = end) {</span><br><span class="line">            for (; i &lt; to; i++)</span><br><span class="line">                if (o.equals(es[i])) {</span><br><span class="line">                    delete(i);</span><br><span class="line">                    return true;</span><br><span class="line">                }</span><br><span class="line">            if (to == end) break;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    return false;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="removeLastOccurrence-1"><a href="#removeLastOccurrence-1" class="headerlink" title="removeLastOccurrence"></a>removeLastOccurrence</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public boolean removeLastOccurrence(Object o) {</span><br><span class="line">    if (o != null) {</span><br><span class="line">        final Object[] es = elements;</span><br><span class="line">        for (int i = tail, end = head, to = (i &gt;= end) ? end : 0;</span><br><span class="line">             ; i = es.length, to = end) {</span><br><span class="line">            for (i--; i &gt; to - 1; i--)</span><br><span class="line">                if (o.equals(es[i])) {</span><br><span class="line">                    delete(i);</span><br><span class="line">                    return true;</span><br><span class="line">                }</span><br><span class="line">            if (to == end) break;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    return false;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="add-2"><a href="#add-2" class="headerlink" title="add"></a>add</h5><p>将元素插入到 <em>ArrayDeque</em> 的尾部</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public boolean add(E e) {</span><br><span class="line">    addLast(e);</span><br><span class="line">    return true;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="offer-1"><a href="#offer-1" class="headerlink" title="offer"></a>offer</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public boolean offer(E e) {</span><br><span class="line">    return offerLast(e);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="remove-2"><a href="#remove-2" class="headerlink" title="remove"></a>remove</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public E remove() {</span><br><span class="line">    return removeFirst();</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="poll-1"><a href="#poll-1" class="headerlink" title="poll"></a>poll</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public E poll() {</span><br><span class="line">    return pollFirst();</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="element-1"><a href="#element-1" class="headerlink" title="element"></a>element</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public E element() {</span><br><span class="line">    return getFirst();</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="peek-1"><a href="#peek-1" class="headerlink" title="peek"></a>peek</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public E peek() {</span><br><span class="line">    return peekFirst();</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="push-1"><a href="#push-1" class="headerlink" title="push"></a>push</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public void push(E e) {</span><br><span class="line">    addFirst(e);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="pop-1"><a href="#pop-1" class="headerlink" title="pop"></a>pop</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public E pop() {</span><br><span class="line">    return removeFirst();</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h4 id="PriorityDeque"><a href="#PriorityDeque" class="headerlink" title="PriorityDeque"></a><em>PriorityDeque</em></h4><p>基于堆结构实现，可完成优先队列的操作</p><p><em>Java</em> 中的优先队列保证每次取最小元素，基于小根堆实现，而 <em>C++</em> 则是基于大根堆实现，默认返回最大元素，不过都可以根据需要自定义比较器在构造时传入，按需求进行返回</p><p><em>PriorityDeque</em> 实现了 <em>AbstractQueue</em> 抽象基类，间接实现了 <em>Queue</em> 接口，不允许放入 <code>null</code></p><p>底层通过数组实现的小根堆</p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/03/16/62318d9e1b1ff.png" alt="PriorityDeque"></p><h5 id="底层数据结构-5"><a href="#底层数据结构-5" class="headerlink" title="底层数据结构"></a>底层数据结构</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transient Object[] queue;</span><br></pre></td></tr></table></figure></div><h5 id="构造器-7"><a href="#构造器-7" class="headerlink" title="构造器"></a>构造器</h5><table><thead><tr><th align="center"><strong>构造器</strong></th><th align="center"><strong>描述</strong></th></tr></thead><tbody><tr><td align="center"><strong>PriorityQueue</strong>()</td><td align="center">使用默认初始容量（11）创建<code>PriorityQueue</code> ，根据其 natural ordering 对其元素进行排序。</td></tr><tr><td align="center"><strong>PriorityQueue</strong>(int initialCapacity)</td><td align="center">创建具有指定初始容量的<code>PriorityQueue</code> ，该容量根据其 natural ordering 对其元素进行排序。</td></tr><tr><td align="center"><strong>PriorityQueue</strong>(int initialCapacity, Comparator&lt;? super E&gt; comparator)</td><td align="center">创建具有指定初始容量的 <code>PriorityQueue</code> ，该容量根据指定的比较器对其元素进行排序。</td></tr><tr><td align="center"><strong>PriorityQueue</strong>(Collection&lt;? extends E&gt; c)</td><td align="center">创建包含指定集合中的元素的 <code>PriorityQueue</code> 。</td></tr><tr><td align="center"><strong>PriorityQueue</strong>(Comparator&lt;? super E&gt; comparator)</td><td align="center">创建具有默认初始容量的 <code>PriorityQueue</code> ，其元素根据指定的比较器进行排序。</td></tr><tr><td align="center"><strong>PriorityQueue</strong>(PriorityQueue&lt;? extends E&gt; c)</td><td align="center">创建包含指定优先级队列中的元素的 <code>PriorityQueue</code> 。</td></tr><tr><td align="center"><strong>PriorityQueue</strong>(SortedSet&lt;? extends E&gt; c)</td><td align="center">创建一个 <code>PriorityQueue</code>其中包含指定有序集合中的元素。</td></tr></tbody></table><pre><code>// 构造默认大小的 PriorityQueuepublic PriorityQueue() {    this(DEFAULT_INITIAL_CAPACITY, null);}// 构造指定大小的 PriorityQueuepublic PriorityQueue(int initialCapacity) {    this(initialCapacity, null);}// 构造自定义比较器的 PriorityQueuepublic PriorityQueue(Comparator&lt;? super E&gt; comparator) {    this(DEFAULT_INITIAL_CAPACITY, comparator);}// 构造指定大小，自定义比较器的 PriorityQueuepublic PriorityQueue(int initialCapacity,                     Comparator&lt;? super E&gt; comparator) {    // Note: This restriction of at least one is not actually needed,    // but continues for 1.5 compatibility    if (initialCapacity &lt; 1)        throw new IllegalArgumentException();    this.queue = new Object[initialCapacity];    this.comparator = comparator;}// 构造指定集合元素的 PriorityQueuepublic PriorityQueue(Collection&lt;? extends E&gt; c) {    // 排序集合    if (c instanceof SortedSet&lt;?&gt;) {        SortedSet&lt;? extends E&gt; ss = (SortedSet&lt;? extends E&gt;) c;        this.comparator = (Comparator&lt;? super E&gt;) ss.comparator();        initElementsFromCollection(ss);    }    // 优先队列    else if (c instanceof PriorityQueue&lt;?&gt;) {        PriorityQueue&lt;? extends E&gt; pq = (PriorityQueue&lt;? extends E&gt;) c;        this.comparator = (Comparator&lt;? super E&gt;) pq.comparator();        initFromPriorityQueue(pq);    }    else {        this.comparator = null;        initFromCollection(c);    }}// 通过优先队列构造优先队列public PriorityQueue(PriorityQueue&lt;? extends E&gt; c) {    this.comparator = (Comparator&lt;? super E&gt;) c.comparator();    initFromPriorityQueue(c);}// 通过排序集合构造优先队列public PriorityQueue(SortedSet&lt;? extends E&gt; c) {    this.comparator = (Comparator&lt;? super E&gt;) c.comparator();    initElementsFromCollection(c);}// 初始化private void initFromPriorityQueue(PriorityQueue&lt;? extends E&gt; c) {    if (c.getClass() == PriorityQueue.class) {        this.queue = ensureNonEmpty(c.toArray());        this.size = c.size();    } else {        initFromCollection(c);    }}// 初始化private void initElementsFromCollection(Collection&lt;? extends E&gt; c) {    Object[] es = c.toArray();    int len = es.length;    if (c.getClass() != ArrayList.class)        es = Arrays.copyOf(es, len, Object[].class);    if (len == 1 || this.comparator != null)        for (Object e : es)            if (e == null)                throw new NullPointerException();    this.queue = ensureNonEmpty(es);    this.size = len;}</code></pre><h5 id="方法概要-7"><a href="#方法概要-7" class="headerlink" title="方法概要"></a>方法概要</h5><table><thead><tr><th align="center"><strong>变量和类型</strong></th><th align="center">方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">boolean</td><td align="center"><strong>add</strong>(E e)</td><td align="center">将指定的元素插入此优先级队列。</td></tr><tr><td align="center">void</td><td align="center"><strong>clear</strong>()</td><td align="center">从此优先级队列中删除所有元素。</td></tr><tr><td align="center">Comparator&lt;? super E&gt;</td><td align="center"><strong>comparator</strong>()</td><td align="center">返回用于为了在这个队列中的元素，或比较<code>null</code>如果此队列根据所述排序 natural ordering 的元素。</td></tr><tr><td align="center">boolean</td><td align="center"><strong>contains</strong>(Object o)</td><td align="center">如果此队列包含指定的元素，则返回 <code>true</code> 。</td></tr><tr><td align="center">void</td><td align="center"><strong>forEach</strong>(Consumer&lt;? super E&gt; action)</td><td align="center">对 <code>Iterable</code>每个元素执行给定操作，直到处理 <code>Iterable</code>所有元素或操作引发异常。</td></tr><tr><td align="center">Iterator<e></e></td><td align="center"><strong>iterator</strong>()</td><td align="center">返回此队列中元素的迭代器。</td></tr><tr><td align="center">boolean</td><td align="center"><strong>offer</strong>(E e)</td><td align="center">将指定的元素插入此优先级队列。</td></tr><tr><td align="center">boolean</td><td align="center"><strong>remove</strong>(Object o)</td><td align="center">从此队列中删除指定元素的单个实例（如果存在）。</td></tr><tr><td align="center">boolean</td><td align="center"><strong>removeAll</strong>(Collection&lt;?&gt; c)</td><td align="center">删除此集合的所有元素，这些元素也包含在指定的集合中（可选操作）。</td></tr><tr><td align="center">boolean</td><td align="center"><strong>removeIf</strong>(Predicate&lt;? super E&gt; filter)</td><td align="center">删除此集合中满足给定谓词的所有元素。</td></tr><tr><td align="center">boolean</td><td align="center"><strong>retainAll</strong>(Collection&lt;?&gt; c)</td><td align="center">仅保留此集合中包含在指定集合中的元素（可选操作）。</td></tr><tr><td align="center">Spliterator<e></e></td><td align="center"><strong>spliterator</strong>()</td><td align="center">在此队列中的元素上创建 <em>late-binding</em> 和<em>故障快速</em> <code>Spliterator</code> 。</td></tr><tr><td align="center">Object[]</td><td align="center"><strong>toArray</strong>()</td><td align="center">返回包含此队列中所有元素的数组。</td></tr><tr><td align="center"><t> T[]</t></td><td align="center"><strong>toArray</strong>(T[] a)</td><td align="center">返回包含此队列中所有元素的数组; 返回数组的运行时类型是指定数组的运行时类型。</td></tr></tbody></table><h5 id="扩容函数-1"><a href="#扩容函数-1" class="headerlink" title="扩容函数"></a>扩容函数</h5><pre><code>// 创建一个更大的数组然后复制private void grow(int minCapacity) {    int oldCapacity = queue.length;    // Double size if small; else grow by 50%    int newCapacity = oldCapacity + ((oldCapacity &lt; 64) ?                                     (oldCapacity + 2) :                                     (oldCapacity &gt;&gt; 1));    // overflow-conscious code    if (newCapacity - MAX_ARRAY_SIZE &gt; 0)        newCapacity = hugeCapacity(minCapacity);    queue = Arrays.copyOf(queue, newCapacity);}private static int hugeCapacity(int minCapacity) {    if (minCapacity &lt; 0) // overflow        throw new OutOfMemoryError();    return (minCapacity &gt; MAX_ARRAY_SIZE) ?        Integer.MAX_VALUE :        MAX_ARRAY_SIZE;}</code></pre><h5 id="siftUp"><a href="#siftUp" class="headerlink" title="siftUp"></a>siftUp</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">// 上浮函数</span><br><span class="line">// 新插入的元素通过比较器不断比较当前点的 parent 找到相应的位置</span><br><span class="line">private void siftUp(int k, E x) {</span><br><span class="line">    if (comparator != null)</span><br><span class="line">        siftUpUsingComparator(k, x, queue, comparator);</span><br><span class="line">    else</span><br><span class="line">        siftUpComparable(k, x, queue);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">// 有自定义比较器</span><br><span class="line">private static &lt;T&gt; void siftUpUsingComparator(</span><br><span class="line">    int k, T x, Object[] es, Comparator&lt;? super T&gt; cmp) {</span><br><span class="line">    while (k &gt; 0) {</span><br><span class="line">        int parent = (k - 1) &gt;&gt;&gt; 1;</span><br><span class="line">        Object e = es[parent];</span><br><span class="line">        if (cmp.compare(x, (T) e) &gt;= 0)</span><br><span class="line">            break;</span><br><span class="line">        es[k] = e;</span><br><span class="line">        k = parent;</span><br><span class="line">    }</span><br><span class="line">    es[k] = x;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">// 无自定义比较器</span><br><span class="line">private static &lt;T&gt; void siftUpComparable(int k, T x, Object[] es) {</span><br><span class="line">    Comparable&lt;? super T&gt; key = (Comparable&lt;? super T&gt;) x;</span><br><span class="line">    while (k &gt; 0) {</span><br><span class="line">        int parent = (k - 1) &gt;&gt;&gt; 1;</span><br><span class="line">        Object e = es[parent];</span><br><span class="line">        if (key.compareTo((T) e) &gt;= 0)</span><br><span class="line">            break;</span><br><span class="line">        es[k] = e;</span><br><span class="line">        k = parent;</span><br><span class="line">    }</span><br><span class="line">    es[k] = key;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="siftDown"><a href="#siftDown" class="headerlink" title="siftDown"></a>siftDown</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">// 下沉函数</span><br><span class="line">// 返回根元素，末尾元素赋给根元素，数组长度减一，根元素不断下沉直至找到对应位置</span><br><span class="line">private void siftDown(int k, E x) {</span><br><span class="line">    if (comparator != null)</span><br><span class="line">        siftDownUsingComparator(k, x, queue, size, comparator);</span><br><span class="line">    else</span><br><span class="line">        siftDownComparable(k, x, queue, size);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">private static &lt;T&gt; void siftDownUsingComparator(</span><br><span class="line">    int k, T x, Object[] es, int n, Comparator&lt;? super T&gt; cmp) {</span><br><span class="line">    // assert n &gt; 0;</span><br><span class="line">    int half = n &gt;&gt;&gt; 1;</span><br><span class="line">    while (k &lt; half) {</span><br><span class="line">        int child = (k &lt;&lt; 1) + 1;</span><br><span class="line">        Object c = es[child];</span><br><span class="line">        int right = child + 1;</span><br><span class="line">        if (right &lt; n &amp;&amp; cmp.compare((T) c, (T) es[right]) &gt; 0)</span><br><span class="line">            c = es[child = right];</span><br><span class="line">        if (cmp.compare(x, (T) c) &lt;= 0)</span><br><span class="line">            break;</span><br><span class="line">        es[k] = c;</span><br><span class="line">        k = child;</span><br><span class="line">    }</span><br><span class="line">    es[k] = x;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">private static &lt;T&gt; void siftDownComparable(int k, T x, Object[] es, int n) {</span><br><span class="line">    // assert n &gt; 0;</span><br><span class="line">    Comparable&lt;? super T&gt; key = (Comparable&lt;? super T&gt;)x;</span><br><span class="line">    int half = n &gt;&gt;&gt; 1;           // loop while a non-leaf</span><br><span class="line">    while (k &lt; half) {</span><br><span class="line">        int child = (k &lt;&lt; 1) + 1; // assume left child is least</span><br><span class="line">        Object c = es[child];</span><br><span class="line">        int right = child + 1;</span><br><span class="line">        if (right &lt; n &amp;&amp;</span><br><span class="line">            ((Comparable&lt;? super T&gt;) c).compareTo((T) es[right]) &gt; 0)</span><br><span class="line">            c = es[child = right];</span><br><span class="line">        if (key.compareTo((T) c) &lt;= 0)</span><br><span class="line">            break;</span><br><span class="line">        es[k] = c;</span><br><span class="line">        k = child;</span><br><span class="line">    }</span><br><span class="line">    es[k] = key;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h5 id="add-3"><a href="#add-3" class="headerlink" title="add"></a>add</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public boolean add(E e) {</span><br><span class="line">    return offer(e);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="offer-2"><a href="#offer-2" class="headerlink" title="offer"></a>offer</h5><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/03/16/62318e2beb2b7.png" alt="offer"></p><pre><code>public boolean offer(E e) {    if (e == null)        throw new NullPointerException();    modCount++;    int i = size;    if (i &gt;= queue.length)        grow(i + 1);    siftUp(i, e);    size = i + 1;    return true;}</code></pre><h5 id="peek-2"><a href="#peek-2" class="headerlink" title="peek"></a>peek</h5><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/03/16/62318e34bee5d.png" alt="peek"></p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public E peek() {</span><br><span class="line">    return (E) queue[0];</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="indexOf-2"><a href="#indexOf-2" class="headerlink" title="indexOf"></a>indexOf</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 私有函数</span><br><span class="line">private int indexOf(Object o) {</span><br><span class="line">    if (o != null) {</span><br><span class="line">        final Object[] es = queue;</span><br><span class="line">        for (int i = 0, n = size; i &lt; n; i++)</span><br><span class="line">            if (o.equals(es[i]))</span><br><span class="line">                return i;</span><br><span class="line">    }</span><br><span class="line">    return -1;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="removeAt"><a href="#removeAt" class="headerlink" title="removeAt"></a>removeAt</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 移除相应索引的元素</span><br><span class="line">E removeAt(int i) {</span><br><span class="line">    // assert i &gt;= 0 &amp;&amp; i &lt; size;</span><br><span class="line">    final Object[] es = queue;</span><br><span class="line">    modCount++;</span><br><span class="line">    int s = --size;</span><br><span class="line">    if (s == i) // 移除最后一个元素</span><br><span class="line">        es[i] = null;</span><br><span class="line">    else {</span><br><span class="line">        E moved = (E) es[s];</span><br><span class="line">        es[s] = null;</span><br><span class="line">        siftDown(i, moved);</span><br><span class="line">        if (es[i] == moved) {</span><br><span class="line">            siftUp(i, moved);</span><br><span class="line">            if (es[i] != moved)</span><br><span class="line">                return moved;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    return null;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="remove-3"><a href="#remove-3" class="headerlink" title="remove"></a>remove</h5><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/03/16/62318e397cfde.png" alt="remove"></p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public boolean remove(Object o) {</span><br><span class="line">    int i = indexOf(o);</span><br><span class="line">    if (i == -1)</span><br><span class="line">        return false;</span><br><span class="line">    else {</span><br><span class="line">        removeAt(i);</span><br><span class="line">        return true;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="removeEq"><a href="#removeEq" class="headerlink" title="removeEq"></a>removeEq</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">void removeEq(Object o) {</span><br><span class="line">    final Object[] es = queue;</span><br><span class="line">    for (int i = 0, n = size; i &lt; n; i++) {</span><br><span class="line">        if (o == es[i]) {</span><br><span class="line">            removeAt(i);</span><br><span class="line">            break;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="poll-2"><a href="#poll-2" class="headerlink" title="poll"></a>poll</h5><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/03/16/62318e3e77e39.png" alt="poll"></p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public E poll() {</span><br><span class="line">    final Object[] es;</span><br><span class="line">    final E result;</span><br><span class="line"></span><br><span class="line">    if ((result = (E) ((es = queue)[0])) != null) {</span><br><span class="line">        modCount++;</span><br><span class="line">        final int n;</span><br><span class="line">        final E x = (E) es[(n = --size)];</span><br><span class="line">        es[n] = null;</span><br><span class="line">        if (n &gt; 0) {</span><br><span class="line">            final Comparator&lt;? super E&gt; cmp;</span><br><span class="line">            if ((cmp = comparator) == null)</span><br><span class="line">                siftDownComparable(0, x, es, n);</span><br><span class="line">            else</span><br><span class="line">                siftDownUsingComparator(0, x, es, n, cmp);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    return result;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h2 id="Map-容器"><a href="#Map-容器" class="headerlink" title="Map 容器"></a><em>Map</em> 容器</h2><h3 id="结构图-1"><a href="#结构图-1" class="headerlink" title="结构图"></a>结构图</h3><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/03/16/62318e4401db9.png" alt="结构图"></p><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a><em>Map</em></h3><h4 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a><em>TreeMap</em></h4><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/03/16/62318e48eb39c.png" alt="TreeMap"></p><p>基于红黑树实现，时间复杂度为 <em>O(lgn)</em></p><p>出于性能原因，<em>TreeMap</em> 是非同步的</p><p>实现 <em>AbstractMap</em> 抽象基类，间接实现 <em>Map</em> 接口</p><h5 id="底层数据结构-6"><a href="#底层数据结构-6" class="headerlink" title="底层数据结构"></a>底层数据结构</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">private transient Entry&lt;K,V&gt; root;</span><br><span class="line"></span><br><span class="line">private transient int size = 0;</span><br><span class="line"></span><br><span class="line">private transient int modCount = 0;</span><br></pre></td></tr></table></figure></div><h5 id="构造器-8"><a href="#构造器-8" class="headerlink" title="构造器"></a>构造器</h5><table><thead><tr><th align="center"><strong>构造器</strong></th><th align="center"><strong>描述</strong></th></tr></thead><tbody><tr><td align="center"><strong>TreeMap</strong>()</td><td align="center">使用其键的自然顺序构造一个新的空树图。</td></tr><tr><td align="center"><strong>TreeMap</strong>(Comparator&lt;? super K&gt; comparator)</td><td align="center">构造一个新的空树图，根据给定的比较器排序。</td></tr><tr><td align="center"><strong>TreeMap</strong>(Map&lt;? extends K,? extends V&gt; m)</td><td align="center">构造一个新的树映射，其中包含与给定映射相同的映射，根据其键的 <em>自然顺序排序</em> 。</td></tr><tr><td align="center"><strong>TreeMap</strong>(SortedMap&lt;K,? extends V&gt; m)</td><td align="center">构造一个包含相同映射的新树映射，并使用与指定有序映射相同的顺序。</td></tr></tbody></table><pre><code>public TreeMap() {    comparator = null;}public TreeMap(Comparator&lt;? super K&gt; comparator) {    this.comparator = comparator;}public TreeMap(Map&lt;? extends K, ? extends V&gt; m) {    comparator = null;    putAll(m);}public TreeMap(SortedMap&lt;K, ? extends V&gt; m) {    comparator = m.comparator();    try {        buildFromSorted(m.size(), m.entrySet().iterator(), null, null);    } catch (java.io.IOException | ClassNotFoundException cannotHappen) {    }}</code></pre><h5 id="方法概要-8"><a href="#方法概要-8" class="headerlink" title="方法概要"></a>方法概要</h5><table><thead><tr><th align="center"><strong>变量和类型</strong></th><th align="center"><strong>方法</strong></th><th align="center"><strong>描述</strong></th></tr></thead><tbody><tr><td align="center">Map.Entry&lt;K,V&gt;</td><td align="center"><strong>ceilingEntry</strong>(K key)</td><td align="center">返回与大于或等于给定键的最小键关联的键 - 值映射，如果没有此键，则 <code>null</code> 。</td></tr><tr><td align="center">K</td><td align="center"><strong>ceilingKey</strong>(K key)</td><td align="center">返回大于或等于给定键的 <code>null</code>键，如果没有这样的键，则 <code>null</code> 。</td></tr><tr><td align="center">void</td><td align="center"><strong>clear</strong>()</td><td align="center">从此映射中删除所有映射。</td></tr><tr><td align="center">Object</td><td align="center"><strong>clone</strong>()</td><td align="center">返回此 <code>TreeMap</code>实例的浅表副本。</td></tr><tr><td align="center">boolean</td><td align="center"><strong>containsKey</strong>(Object key)</td><td align="center">如果此映射包含指定键的映射，则返回 <code>true</code> 。</td></tr><tr><td align="center">boolean</td><td align="center"><strong>containsValue</strong>(Object value)</td><td align="center">如果此映射将一个或多个键映射到指定值，则返回 <code>true</code> 。</td></tr><tr><td align="center">NavigableSet<k></k></td><td align="center"><strong>descendingKeySet</strong>()</td><td align="center">返回此映射中包含的键的反向顺序 <code>NavigableSet</code> 视图。</td></tr><tr><td align="center">NavigableMap&lt;K,V&gt;</td><td align="center"><strong>descendingMap</strong>()</td><td align="center">返回此映射中包含的映射的逆序视图。</td></tr><tr><td align="center">Set&lt;Map.Entry&lt;K,V&gt;&gt;</td><td align="center"><strong>entrySet</strong>()</td><td align="center">返回此映射中包含的映射的 <code>Set</code> 视图。</td></tr><tr><td align="center">Map.Entry&lt;K,V&gt;</td><td align="center"><strong>firstEntry</strong>()</td><td align="center">返回与此映射中的最小键关联的键 - 值映射，如果映射为空，则 <code>null</code> 。</td></tr><tr><td align="center">K</td><td align="center"><strong>firstKey</strong>()</td><td align="center">返回此映射中当前的第一个（最低）键。</td></tr><tr><td align="center">Map.Entry&lt;K,V&gt;</td><td align="center"><strong>floorEntry</strong>(K key)</td><td align="center">返回与小于或等于给定键的最大键关联的键 - 值映射，如果没有此键，则 <code>null</code> 。</td></tr><tr><td align="center">K</td><td align="center"><strong>floorKey</strong>(K key)</td><td align="center">返回小于或等于给定键的最大键，如果没有这样的键，则 <code>null</code> 。</td></tr><tr><td align="center">V</td><td align="center"><strong>get</strong>(Object key)</td><td align="center">返回指定键映射到的值，如果此映射不包含键的映射，则返回 <code>null</code> 。</td></tr><tr><td align="center">SortedMap&lt;K,V&gt;</td><td align="center"><strong>headMap</strong>(K toKey)</td><td align="center">返回此映射的部分视图，其键严格小于 <code>toKey</code> 。</td></tr><tr><td align="center">NavigableMap&lt;K,V&gt;</td><td align="center"><strong>headMap</strong>(K toKey, boolean inclusive)</td><td align="center">返回此映射的部分视图，其键小于（或等于，如果 <code>inclusive</code>为真） <code>toKey</code> 。</td></tr><tr><td align="center">Map.Entry&lt;K,V&gt;</td><td align="center"><strong>higherEntry</strong>(K key)</td><td align="center">返回与严格大于给定键的最小键关联的键 - 值映射，如果没有此键，则 <code>null</code> 。</td></tr><tr><td align="center">K</td><td align="center"><strong>higherKey</strong>(K key)</td><td align="center">返回严格大于给定键的最小键，如果没有这样的键，则返回 <code>null</code> 。</td></tr><tr><td align="center">Set<k></k></td><td align="center"><strong>keySet</strong>()</td><td align="center">返回此映射中包含的键的 <code>Set</code> 视图。</td></tr><tr><td align="center">Map.Entry&lt;K,V&gt;</td><td align="center"><strong>lastEntry</strong>()</td><td align="center">返回与此映射中的最大键关联的键 - 值映射，如果映射为空，则 <code>null</code> 。</td></tr><tr><td align="center">K</td><td align="center"><strong>lastKey</strong>()</td><td align="center">返回此映射中当前的最后一个（最高）键。</td></tr><tr><td align="center">Map.Entry&lt;K,V&gt;</td><td align="center"><strong>lowerEntry</strong>(K key)</td><td align="center">返回与严格小于给定键的最大键相关联的键 - 值映射，如果没有这样的键，则 <code>null</code> 。</td></tr><tr><td align="center">K</td><td align="center"><strong>lowerKey</strong>(K key)</td><td align="center">返回严格小于给定键的最大键，如果没有这样键，则返回 <code>null</code> 。</td></tr><tr><td align="center">NavigableSet<k></k></td><td align="center"><strong>navigableKeySet</strong>()</td><td align="center">返回此映射中包含的键的 <code>NavigableSet</code>视图。</td></tr><tr><td align="center">Map.Entry&lt;K,V&gt;</td><td align="center"><strong>pollFirstEntry</strong>()</td><td align="center">删除并返回与此映射中的最小键关联的键 - 值映射，如果映射为空，则 <code>null</code> 。</td></tr><tr><td align="center">Map.Entry&lt;K,V&gt;</td><td align="center"><strong>pollLastEntry</strong>()</td><td align="center">删除并返回与此映射中的最大键关联的键 - 值映射，如果映射为空，则 <code>null</code> 。</td></tr><tr><td align="center">V</td><td align="center"><strong>put</strong>(K key, V value)</td><td align="center">将指定的值与此映射中的指定键相关联。</td></tr><tr><td align="center">void</td><td align="center"><strong>putAll</strong>(Map&lt;? extends K,? extends V&gt; map)</td><td align="center">将指定映射中的所有映射复制到此映射。</td></tr><tr><td align="center">V</td><td align="center"><strong>remove</strong>(Object key)</td><td align="center">如果存在，则从此TreeMap中删除此键的映射。</td></tr><tr><td align="center">int</td><td align="center"><strong>size</strong>()</td><td align="center">返回此映射中键 - 值映射的数量。</td></tr><tr><td align="center">NavigableMap&lt;K,V&gt;</td><td align="center"><strong>subMap</strong>(K fromKey, boolean fromInclusive, K toKey, boolean toInclusive)</td><td align="center">返回此映射部分的视图，其键范围为 <code>fromKey</code>至 <code>toKey</code> 。</td></tr><tr><td align="center">SortedMap&lt;K,V&gt;</td><td align="center"><strong>subMap</strong>(K fromKey, K toKey)</td><td align="center">返回此映射部分的视图，其键的范围从 <code>fromKey</code> （包括 <code>toKey</code> ）到 <code>toKey</code> （独占）。</td></tr><tr><td align="center">SortedMap&lt;K,V&gt;</td><td align="center"><strong>tailMap</strong>(K fromKey)</td><td align="center">返回此映射的部分视图，其键大于或等于 <code>fromKey</code> 。</td></tr><tr><td align="center">NavigableMap&lt;K,V&gt;</td><td align="center"><strong>tailMap</strong>(K fromKey, boolean inclusive)</td><td align="center">返回此映射的部分视图，其键大于（或等于，如果 <code>inclusive</code>为真） <code>fromKey</code> 。</td></tr><tr><td align="center">Collection<v></v></td><td align="center"><strong>values</strong>()</td><td align="center">返回此映射中包含的值的 <code>Collection</code> 视图。</td></tr></tbody></table><h5 id="rotateLeft"><a href="#rotateLeft" class="headerlink" title="rotateLeft"></a>rotateLeft</h5><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/03/16/62318e5381772.png" alt="rotateLeft"></p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// 左旋</span><br><span class="line">private void rotateLeft(Entry&lt;K,V&gt; p) {</span><br><span class="line">    if (p != null) {</span><br><span class="line">        Entry&lt;K,V&gt; r = p.right;</span><br><span class="line">        p.right = r.left;</span><br><span class="line">        if (r.left != null)</span><br><span class="line">            r.left.parent = p;</span><br><span class="line">        r.parent = p.parent;</span><br><span class="line">        if (p.parent == null)</span><br><span class="line">            root = r;</span><br><span class="line">        else if (p.parent.left == p)</span><br><span class="line">            p.parent.left = r;</span><br><span class="line">        else</span><br><span class="line">            p.parent.right = r;</span><br><span class="line">        r.left = p;</span><br><span class="line">        p.parent = r;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="rotateRight"><a href="#rotateRight" class="headerlink" title="rotateRight"></a>rotateRight</h5><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/03/16/62318e58e4eaa.png" alt="rotateRight"></p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 右旋</span><br><span class="line">private void rotateRight(Entry&lt;K,V&gt; p) {</span><br><span class="line">    if (p != null) {</span><br><span class="line">        Entry&lt;K,V&gt; l = p.left;</span><br><span class="line">        p.left = l.right;</span><br><span class="line">        if (l.right != null) l.right.parent = p;</span><br><span class="line">        l.parent = p.parent;</span><br><span class="line">        if (p.parent == null)</span><br><span class="line">            root = l;</span><br><span class="line">        else if (p.parent.right == p)</span><br><span class="line">            p.parent.right = l;</span><br><span class="line">        else p.parent.left = l;</span><br><span class="line">        l.right = p;</span><br><span class="line">        p.parent = l;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="colorOf"><a href="#colorOf" class="headerlink" title="colorOf"></a>colorOf</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 查看节点颜色</span><br><span class="line">private static &lt;K,V&gt; boolean colorOf(Entry&lt;K,V&gt; p) {</span><br><span class="line">    return (p == null ? BLACK : p.color);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="parentOf"><a href="#parentOf" class="headerlink" title="parentOf"></a>parentOf</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 查看节点双亲</span><br><span class="line">private static &lt;K,V&gt; Entry&lt;K,V&gt; parentOf(Entry&lt;K,V&gt; p) {</span><br><span class="line">    return (p == null ? null: p.parent);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="setColor"><a href="#setColor" class="headerlink" title="setColor"></a>setColor</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 设置节点颜色</span><br><span class="line">private static &lt;K,V&gt; void setColor(Entry&lt;K,V&gt; p, boolean c) {</span><br><span class="line">    if (p != null)</span><br><span class="line">        p.color = c;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="leftOf"><a href="#leftOf" class="headerlink" title="leftOf"></a>leftOf</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 左孩子</span><br><span class="line">private static &lt;K,V&gt; Entry&lt;K,V&gt; leftOf(Entry&lt;K,V&gt; p) {</span><br><span class="line">    return (p == null) ? null: p.left;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="rightOf"><a href="#rightOf" class="headerlink" title="rightOf"></a>rightOf</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 右孩子</span><br><span class="line">private static &lt;K,V&gt; Entry&lt;K,V&gt; rightOf(Entry&lt;K,V&gt; p) {</span><br><span class="line">    return (p == null) ? null: p.right;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="fixAfterInsertion"><a href="#fixAfterInsertion" class="headerlink" title="fixAfterInsertion"></a>fixAfterInsertion</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">// 插入后的调整函数</span><br><span class="line">private void fixAfterInsertion(Entry&lt;K,V&gt; x) {</span><br><span class="line">    x.color = RED;</span><br><span class="line"></span><br><span class="line">    while (x != null &amp;&amp; x != root &amp;&amp; x.parent.color == RED) {</span><br><span class="line">        if (parentOf(x) == leftOf(parentOf(parentOf(x)))) {</span><br><span class="line">            Entry&lt;K,V&gt; y = rightOf(parentOf(parentOf(x)));</span><br><span class="line">            if (colorOf(y) == RED) {</span><br><span class="line">                setColor(parentOf(x), BLACK);</span><br><span class="line">                setColor(y, BLACK);</span><br><span class="line">                setColor(parentOf(parentOf(x)), RED);</span><br><span class="line">                x = parentOf(parentOf(x));</span><br><span class="line">            } else {</span><br><span class="line">                if (x == rightOf(parentOf(x))) {</span><br><span class="line">                    x = parentOf(x);</span><br><span class="line">                    rotateLeft(x);</span><br><span class="line">                }</span><br><span class="line">                setColor(parentOf(x), BLACK);</span><br><span class="line">                setColor(parentOf(parentOf(x)), RED);</span><br><span class="line">                rotateRight(parentOf(parentOf(x)));</span><br><span class="line">            }</span><br><span class="line">        } else {</span><br><span class="line">            Entry&lt;K,V&gt; y = leftOf(parentOf(parentOf(x)));</span><br><span class="line">            if (colorOf(y) == RED) {</span><br><span class="line">                setColor(parentOf(x), BLACK);</span><br><span class="line">                setColor(y, BLACK);</span><br><span class="line">                setColor(parentOf(parentOf(x)), RED);</span><br><span class="line">                x = parentOf(parentOf(x));</span><br><span class="line">            } else {</span><br><span class="line">                if (x == leftOf(parentOf(x))) {</span><br><span class="line">                    x = parentOf(x);</span><br><span class="line">                    rotateRight(x);</span><br><span class="line">                }</span><br><span class="line">                setColor(parentOf(x), BLACK);</span><br><span class="line">                setColor(parentOf(parentOf(x)), RED);</span><br><span class="line">                rotateLeft(parentOf(parentOf(x)));</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    root.color = BLACK;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="fixAfterDeletion"><a href="#fixAfterDeletion" class="headerlink" title="fixAfterDeletion"></a>fixAfterDeletion</h5><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/03/16/62318e600c864.png" alt="fixAfterDeletion"></p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">// 删除后的调整函数</span><br><span class="line">private void fixAfterDeletion(Entry&lt;K,V&gt; x) {</span><br><span class="line">    while (x != root &amp;&amp; colorOf(x) == BLACK) {</span><br><span class="line">        if (x == leftOf(parentOf(x))) {</span><br><span class="line">            Entry&lt;K,V&gt; sib = rightOf(parentOf(x));</span><br><span class="line"></span><br><span class="line">            if (colorOf(sib) == RED) {</span><br><span class="line">                setColor(sib, BLACK);</span><br><span class="line">                setColor(parentOf(x), RED);</span><br><span class="line">                rotateLeft(parentOf(x));</span><br><span class="line">                sib = rightOf(parentOf(x));</span><br><span class="line">            }</span><br><span class="line">    </span><br><span class="line">            if (colorOf(leftOf(sib))  == BLACK &amp;&amp;</span><br><span class="line">                colorOf(rightOf(sib)) == BLACK) {</span><br><span class="line">                setColor(sib, RED);</span><br><span class="line">                x = parentOf(x);</span><br><span class="line">            } else {</span><br><span class="line">                if (colorOf(rightOf(sib)) == BLACK) {</span><br><span class="line">                    setColor(leftOf(sib), BLACK);</span><br><span class="line">                    setColor(sib, RED);</span><br><span class="line">                    rotateRight(sib);</span><br><span class="line">                    sib = rightOf(parentOf(x));</span><br><span class="line">                }</span><br><span class="line">                setColor(sib, colorOf(parentOf(x)));</span><br><span class="line">                setColor(parentOf(x), BLACK);</span><br><span class="line">                setColor(rightOf(sib), BLACK);</span><br><span class="line">                rotateLeft(parentOf(x));</span><br><span class="line">                x = root;</span><br><span class="line">            }</span><br><span class="line">        } else { // symmetric</span><br><span class="line">            Entry&lt;K,V&gt; sib = leftOf(parentOf(x));</span><br><span class="line">    </span><br><span class="line">            if (colorOf(sib) == RED) {</span><br><span class="line">                setColor(sib, BLACK);</span><br><span class="line">                setColor(parentOf(x), RED);</span><br><span class="line">                rotateRight(parentOf(x));</span><br><span class="line">                sib = leftOf(parentOf(x));</span><br><span class="line">            }</span><br><span class="line">    </span><br><span class="line">            if (colorOf(rightOf(sib)) == BLACK &amp;&amp;</span><br><span class="line">                colorOf(leftOf(sib)) == BLACK) {</span><br><span class="line">                setColor(sib, RED);</span><br><span class="line">                x = parentOf(x);</span><br><span class="line">            } else {</span><br><span class="line">                if (colorOf(leftOf(sib)) == BLACK) {</span><br><span class="line">                    setColor(rightOf(sib), BLACK);</span><br><span class="line">                    setColor(sib, RED);</span><br><span class="line">                    rotateLeft(sib);</span><br><span class="line">                    sib = leftOf(parentOf(x));</span><br><span class="line">                }</span><br><span class="line">                setColor(sib, colorOf(parentOf(x)));</span><br><span class="line">                setColor(parentOf(x), BLACK);</span><br><span class="line">                setColor(leftOf(sib), BLACK);</span><br><span class="line">                rotateRight(parentOf(x));</span><br><span class="line">                x = root;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    setColor(x, BLACK);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="getEntry"><a href="#getEntry" class="headerlink" title="getEntry"></a>getEntry</h5><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/03/16/62318e66341c0.png" alt="getEntry"></p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// 取节点</span><br><span class="line">final Entry&lt;K,V&gt; getEntry(Object key) {</span><br><span class="line">    // Offload comparator-based version for sake of performance</span><br><span class="line">    if (comparator != null)</span><br><span class="line">        return getEntryUsingComparator(key);</span><br><span class="line">    if (key == null)</span><br><span class="line">        throw new NullPointerException();</span><br><span class="line">    @SuppressWarnings("unchecked")</span><br><span class="line">        Comparable&lt;? super K&gt; k = (Comparable&lt;? super K&gt;) key;</span><br><span class="line">    Entry&lt;K,V&gt; p = root;</span><br><span class="line">    while (p != null) {</span><br><span class="line">        int cmp = k.compareTo(p.key);</span><br><span class="line">        if (cmp &lt; 0)</span><br><span class="line">            p = p.left;</span><br><span class="line">        else if (cmp &gt; 0)</span><br><span class="line">            p = p.right;</span><br><span class="line">        else</span><br><span class="line">            return p;</span><br><span class="line">    }</span><br><span class="line">    return null;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="getEntryUsingComparator"><a href="#getEntryUsingComparator" class="headerlink" title="getEntryUsingComparator"></a>getEntryUsingComparator</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// 使用比较器取节点</span><br><span class="line">final Entry&lt;K,V&gt; getEntryUsingComparator(Object key) {</span><br><span class="line">    @SuppressWarnings("unchecked")</span><br><span class="line">        K k = (K) key;</span><br><span class="line">    Comparator&lt;? super K&gt; cpr = comparator;</span><br><span class="line">    if (cpr != null) {</span><br><span class="line">        Entry&lt;K,V&gt; p = root;</span><br><span class="line">        while (p != null) {</span><br><span class="line">            int cmp = cpr.compare(k, p.key);</span><br><span class="line">            if (cmp &lt; 0)</span><br><span class="line">                p = p.left;</span><br><span class="line">            else if (cmp &gt; 0)</span><br><span class="line">                p = p.right;</span><br><span class="line">            else</span><br><span class="line">                return p;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    return null;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="getFirstEntry"><a href="#getFirstEntry" class="headerlink" title="getFirstEntry"></a>getFirstEntry</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">final Entry&lt;K,V&gt; getFirstEntry() {</span><br><span class="line">    Entry&lt;K,V&gt; p = root;</span><br><span class="line">    if (p != null)</span><br><span class="line">        while (p.left != null)</span><br><span class="line">            p = p.left;</span><br><span class="line">    return p;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="getLastEntry"><a href="#getLastEntry" class="headerlink" title="getLastEntry"></a>getLastEntry</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">final Entry&lt;K,V&gt; getLastEntry() {</span><br><span class="line">    Entry&lt;K,V&gt; p = root;</span><br><span class="line">    if (p != null)</span><br><span class="line">        while (p.right != null)</span><br><span class="line">            p = p.right;</span><br><span class="line">    return p;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="get-2"><a href="#get-2" class="headerlink" title="get"></a>get</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 根据指定的 key 返回相应的 value</span><br><span class="line">public V get(Object key) {</span><br><span class="line">    Entry&lt;K,V&gt; p = getEntry(key);</span><br><span class="line">    return (p==null ? null : p.value);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="firstKey"><a href="#firstKey" class="headerlink" title="firstKey"></a>firstKey</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public K firstKey() {</span><br><span class="line">    return key(getFirstEntry());</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="lastKey"><a href="#lastKey" class="headerlink" title="lastKey"></a>lastKey</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public K lastKey() {</span><br><span class="line">    return key(getLastEntry());</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="buildFromSorted"><a href="#buildFromSorted" class="headerlink" title="buildFromSorted"></a>buildFromSorted</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">private void buildFromSorted(int size, Iterator&lt;?&gt; it,</span><br><span class="line">                             java.io.ObjectInputStream str,</span><br><span class="line">                             V defaultVal)</span><br><span class="line">    throws  java.io.IOException, ClassNotFoundException {</span><br><span class="line">    this.size = size;</span><br><span class="line">    root = buildFromSorted(0, 0, size-1, computeRedLevel(size),</span><br><span class="line">                           it, str, defaultVal);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">private final Entry&lt;K,V&gt; buildFromSorted(int level, int lo, int hi,</span><br><span class="line">                                         int redLevel,</span><br><span class="line">                                         Iterator&lt;?&gt; it,</span><br><span class="line">                                         java.io.ObjectInputStream str,</span><br><span class="line">                                         V defaultVal)</span><br><span class="line">    throws  java.io.IOException, ClassNotFoundException {</span><br><span class="line">    /*</span><br><span class="line">     * Strategy: The root is the middlemost element. To get to it, we</span><br><span class="line">     * have to first recursively construct the entire left subtree,</span><br><span class="line">     * so as to grab all of its elements. We can then proceed with right</span><br><span class="line">     * subtree.</span><br><span class="line">     *</span><br><span class="line">     * The lo and hi arguments are the minimum and maximum</span><br><span class="line">     * indices to pull out of the iterator or stream for current subtree.</span><br><span class="line">     * They are not actually indexed, we just proceed sequentially,</span><br><span class="line">     * ensuring that items are extracted in corresponding order.</span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line">    if (hi &lt; lo) return null;</span><br><span class="line"></span><br><span class="line">    int mid = (lo + hi) &gt;&gt;&gt; 1;</span><br><span class="line"></span><br><span class="line">    Entry&lt;K,V&gt; left  = null;</span><br><span class="line">    if (lo &lt; mid)</span><br><span class="line">        left = buildFromSorted(level+1, lo, mid - 1, redLevel,</span><br><span class="line">                               it, str, defaultVal);</span><br><span class="line"></span><br><span class="line">    // extract key and/or value from iterator or stream</span><br><span class="line">    K key;</span><br><span class="line">    V value;</span><br><span class="line">    if (it != null) {</span><br><span class="line">        if (defaultVal==null) {</span><br><span class="line">            Map.Entry&lt;?,?&gt; entry = (Map.Entry&lt;?,?&gt;)it.next();</span><br><span class="line">            key = (K)entry.getKey();</span><br><span class="line">            value = (V)entry.getValue();</span><br><span class="line">        } else {</span><br><span class="line">            key = (K)it.next();</span><br><span class="line">            value = defaultVal;</span><br><span class="line">        }</span><br><span class="line">    } else { // use stream</span><br><span class="line">        key = (K) str.readObject();</span><br><span class="line">        value = (defaultVal != null ? defaultVal : (V) str.readObject());</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    Entry&lt;K,V&gt; middle =  new Entry&lt;&gt;(key, value, null);</span><br><span class="line"></span><br><span class="line">    // color nodes in non-full bottommost level red</span><br><span class="line">    if (level == redLevel)</span><br><span class="line">        middle.color = RED;</span><br><span class="line"></span><br><span class="line">    if (left != null) {</span><br><span class="line">        middle.left = left;</span><br><span class="line">        left.parent = middle;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    if (mid &lt; hi) {</span><br><span class="line">        Entry&lt;K,V&gt; right = buildFromSorted(level+1, mid+1, hi, redLevel,</span><br><span class="line">                                           it, str, defaultVal);</span><br><span class="line">        middle.right = right;</span><br><span class="line">        right.parent = middle;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    return middle;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="putAll"><a href="#putAll" class="headerlink" title="putAll"></a>putAll</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public void putAll(Map&lt;? extends K, ? extends V&gt; map) {</span><br><span class="line">    int mapSize = map.size();</span><br><span class="line">    if (size==0 &amp;&amp; mapSize!=0 &amp;&amp; map instanceof SortedMap) {</span><br><span class="line">        Comparator&lt;?&gt; c = ((SortedMap&lt;?,?&gt;)map).comparator();</span><br><span class="line">        if (c == comparator || (c != null &amp;&amp; c.equals(comparator))) {</span><br><span class="line">            ++modCount;</span><br><span class="line">            try {</span><br><span class="line">                buildFromSorted(mapSize, map.entrySet().iterator(),</span><br><span class="line">                                null, null);</span><br><span class="line">            } catch (java.io.IOException | ClassNotFoundException cannotHappen) {</span><br><span class="line">            }</span><br><span class="line">            return;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    super.putAll(map);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="put"><a href="#put" class="headerlink" title="put"></a>put</h5><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/03/16/62318e6e5c431.png" alt="put"></p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">public V put(K key, V value) {</span><br><span class="line">    Entry&lt;K,V&gt; t = root;</span><br><span class="line">    if (t == null) {</span><br><span class="line">        compare(key, key); // type (and possibly null) check</span><br><span class="line"></span><br><span class="line">        root = new Entry&lt;&gt;(key, value, null);</span><br><span class="line">        size = 1;</span><br><span class="line">        modCount++;</span><br><span class="line">        return null;</span><br><span class="line">    }</span><br><span class="line">    int cmp;</span><br><span class="line">    Entry&lt;K,V&gt; parent;</span><br><span class="line">    // split comparator and comparable paths</span><br><span class="line">    Comparator&lt;? super K&gt; cpr = comparator; // 自定义构造器</span><br><span class="line">    // 进行查找看是否已经存在这一键值对</span><br><span class="line">    if (cpr != null) {</span><br><span class="line">        do {</span><br><span class="line">            parent = t;</span><br><span class="line">            cmp = cpr.compare(key, t.key);</span><br><span class="line">            if (cmp &lt; 0)</span><br><span class="line">                t = t.left; // 向左找</span><br><span class="line">            else if (cmp &gt; 0)</span><br><span class="line">                t = t.right; // 向右找</span><br><span class="line">            else</span><br><span class="line">                return t.setValue(value);</span><br><span class="line">        } while (t != null);</span><br><span class="line">    }</span><br><span class="line">    else {</span><br><span class="line">        if (key == null)</span><br><span class="line">            throw new NullPointerException();</span><br><span class="line">        @SuppressWarnings("unchecked")</span><br><span class="line">            Comparable&lt;? super K&gt; k = (Comparable&lt;? super K&gt;) key;</span><br><span class="line">        do {</span><br><span class="line">            parent = t;</span><br><span class="line">            cmp = k.compareTo(t.key);</span><br><span class="line">            if (cmp &lt; 0)</span><br><span class="line">                t = t.left;</span><br><span class="line">            else if (cmp &gt; 0)</span><br><span class="line">                t = t.right;</span><br><span class="line">            else</span><br><span class="line">                return t.setValue(value);</span><br><span class="line">        } while (t != null);</span><br><span class="line">    }</span><br><span class="line">    Entry&lt;K,V&gt; e = new Entry&lt;&gt;(key, value, parent); // 创建新键值对</span><br><span class="line">    if (cmp &lt; 0)</span><br><span class="line">        parent.left = e;</span><br><span class="line">    else</span><br><span class="line">        parent.right = e;</span><br><span class="line">    fixAfterInsertion(e); // 调整</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">    return null;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="deleteEntry"><a href="#deleteEntry" class="headerlink" title="deleteEntry"></a>deleteEntry</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">// 删除节点</span><br><span class="line">private void deleteEntry(Entry&lt;K,V&gt; p) {</span><br><span class="line">    modCount++;</span><br><span class="line">    size--;</span><br><span class="line"></span><br><span class="line">    // If strictly internal, copy successor's element to p and then make p</span><br><span class="line">    // point to successor.</span><br><span class="line">    if (p.left != null &amp;&amp; p.right != null) {</span><br><span class="line">        Entry&lt;K,V&gt; s = successor(p);</span><br><span class="line">        p.key = s.key;</span><br><span class="line">        p.value = s.value;</span><br><span class="line">        p = s;</span><br><span class="line">    } // p has 2 children</span><br><span class="line"></span><br><span class="line">    // Start fixup at replacement node, if it exists.</span><br><span class="line">    Entry&lt;K,V&gt; replacement = (p.left != null ? p.left : p.right);</span><br><span class="line"></span><br><span class="line">    if (replacement != null) {</span><br><span class="line">        // Link replacement to parent</span><br><span class="line">        replacement.parent = p.parent;</span><br><span class="line">        if (p.parent == null)</span><br><span class="line">            root = replacement;</span><br><span class="line">        else if (p == p.parent.left)</span><br><span class="line">            p.parent.left  = replacement;</span><br><span class="line">        else</span><br><span class="line">            p.parent.right = replacement;</span><br><span class="line"></span><br><span class="line">        // Null out links so they are OK to use by fixAfterDeletion.</span><br><span class="line">        p.left = p.right = p.parent = null;</span><br><span class="line"></span><br><span class="line">        // Fix replacement</span><br><span class="line">        if (p.color == BLACK)</span><br><span class="line">            fixAfterDeletion(replacement);</span><br><span class="line">    } else if (p.parent == null) { // return if we are the only node.</span><br><span class="line">        root = null;</span><br><span class="line">    } else { //  No children. Use self as phantom replacement and unlink.</span><br><span class="line">        if (p.color == BLACK)</span><br><span class="line">            fixAfterDeletion(p);</span><br><span class="line"></span><br><span class="line">        if (p.parent != null) {</span><br><span class="line">            if (p == p.parent.left)</span><br><span class="line">                p.parent.left = null;</span><br><span class="line">            else if (p == p.parent.right)</span><br><span class="line">                p.parent.right = null;</span><br><span class="line">            p.parent = null;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="remove-4"><a href="#remove-4" class="headerlink" title="remove"></a>remove</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public V remove(Object key) {</span><br><span class="line">    Entry&lt;K,V&gt; p = getEntry(key);</span><br><span class="line">    if (p == null)</span><br><span class="line">        return null;</span><br><span class="line"></span><br><span class="line">    V oldValue = p.value;</span><br><span class="line">    deleteEntry(p);</span><br><span class="line">    return oldValue;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h4 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a><em>HashMap</em></h4><p>基于哈希表实现，由数组 + 链表 + 红黑树组成</p><h5 id="底层数据结构-7"><a href="#底层数据结构-7" class="headerlink" title="底层数据结构"></a>底层数据结构</h5><pre><code>static class Node&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; {    final int hash;    final K key;    V value;    Node&lt;K,V&gt; next;    Node(int hash, K key, V value, Node&lt;K,V&gt; next) {        this.hash = hash;        this.key = key;        this.value = value;        this.next = next;    }    public final K getKey()        { return key; }    public final V getValue()      { return value; }    public final String toString() { return key + "=" + value; }    public final int hashCode() {        return Objects.hashCode(key) ^ Objects.hashCode(value);    }    public final V setValue(V newValue) {        V oldValue = value;        value = newValue;        return oldValue;    }    public final boolean equals(Object o) {        if (o == this)            return true;        if (o instanceof Map.Entry) {            Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;            if (Objects.equals(key, e.getKey()) &amp;&amp;                Objects.equals(value, e.getValue()))                return true;        }        return false;    }}transient Node&lt;K,V&gt;[] table;transient Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet;transient int size;transient int modCount;</code></pre><h5 id="构造器-9"><a href="#构造器-9" class="headerlink" title="构造器"></a>构造器</h5><table><thead><tr><th align="center">构造器</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">HashMap()</td><td align="center">使用默认初始容量（16）和默认加载因子（0.75）构造一个空 <code>HashMap</code> 。</td></tr><tr><td align="center">HashMap(int initialCapacity)</td><td align="center">使用指定的初始容量和默认加载因子（0.75）构造一个空 <code>HashMap</code> 。</td></tr><tr><td align="center">HashMap(int initialCapacity, float loadFactor)</td><td align="center">使用指定的初始容量和加载因子构造一个空 <code>HashMap</code> 。</td></tr><tr><td align="center">HashMap(Map&lt;? extends K,? extends V&gt; m)</td><td align="center">构造一个新的 <code>HashMap</code> ，其映射与指定的 <code>Map</code>相同。</td></tr></tbody></table><pre><code>public HashMap(int initialCapacity, float loadFactor) {    if (initialCapacity &lt; 0)        throw new IllegalArgumentException("Illegal initial capacity: " +                                           initialCapacity);    if (initialCapacity &gt; MAXIMUM_CAPACITY)        initialCapacity = MAXIMUM_CAPACITY;    if (loadFactor &lt;= 0 || Float.isNaN(loadFactor))        throw new IllegalArgumentException("Illegal load factor: " +                                           loadFactor);    this.loadFactor = loadFactor;    this.threshold = tableSizeFor(initialCapacity);}public HashMap(int initialCapacity) {    this(initialCapacity, DEFAULT_LOAD_FACTOR);}public HashMap() {    this.loadFactor = DEFAULT_LOAD_FACTOR; // all other fields defaulted}public HashMap(Map&lt;? extends K, ? extends V&gt; m) {    this.loadFactor = DEFAULT_LOAD_FACTOR;    putMapEntries(m, false);}</code></pre><h5 id="方法概要-9"><a href="#方法概要-9" class="headerlink" title="方法概要"></a>方法概要</h5><table><thead><tr><th align="center">变量和类型</th><th align="center">方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">void</td><td align="center"><strong>clear</strong>()</td><td align="center">从此映射中删除所有映射。</td></tr><tr><td align="center">Object</td><td align="center"><strong>clone</strong>()</td><td align="center">返回此 <code>HashMap</code>实例的浅表副本：未克隆键和值本身。</td></tr><tr><td align="center">V</td><td align="center"><strong>compute</strong>(K key, BiFunction&lt;? super K,? super V,? extends V&gt; remappingFunction)</td><td align="center">尝试计算指定键及其当前映射值的映射（如果没有当前映射， <code>null</code> ）。</td></tr><tr><td align="center">V</td><td align="center"><strong>computeIfAbsent</strong>(K key, Function&lt;? super K,? extends V&gt; mappingFunction)</td><td align="center">如果指定的键尚未与值关联（或映射到 <code>null</code> ），则尝试使用给定的映射函数计算其值并将其输入此映射，除非 <code>null</code> 。</td></tr><tr><td align="center">V</td><td align="center"><strong>computeIfPresent</strong>(K key, BiFunction&lt;? super K,? super V,? extends V&gt; remappingFunction)</td><td align="center">如果指定键的值存在且为非null，则尝试在给定键及其当前映射值的情况下计算新映射。</td></tr><tr><td align="center">boolean</td><td align="center"><strong>containsKey</strong>(Object key)</td><td align="center">如果此映射包含指定键的映射，则返回 <code>true</code> 。</td></tr><tr><td align="center">boolean</td><td align="center"><strong>containsValue</strong>(Object value)</td><td align="center">如果此映射将一个或多个键映射到指定值，则返回 <code>true</code> 。</td></tr><tr><td align="center">Set&lt;Map.Entry&lt;K,V&gt;&gt;</td><td align="center"><strong>entrySet</strong>()</td><td align="center">返回此映射中包含的映射的 <code>Set</code> 视图。</td></tr><tr><td align="center">V</td><td align="center"><strong>get</strong>(Object key)</td><td align="center">返回指定键映射到的值，如果此映射不包含键的映射，则返回 <code>null</code> 。</td></tr><tr><td align="center">boolean</td><td align="center"><strong>isEmpty</strong>()</td><td align="center">如果此映射不包含键 - 值映射，则返回 <code>true</code> 。</td></tr><tr><td align="center">Set<k></k></td><td align="center"><strong>keySet</strong>()</td><td align="center">返回此映射中包含的键的 <code>Set</code> 视图。</td></tr><tr><td align="center">V</td><td align="center"><strong>merge</strong>(K key, V value, BiFunction&lt;? super V,? super V,? extends V&gt; remappingFunction)</td><td align="center">如果指定的键尚未与值关联或与null关联，则将其与给定的非空值关联。</td></tr><tr><td align="center">V</td><td align="center"><strong>put</strong>(K key, V value)</td><td align="center">将指定的值与此映射中的指定键相关联。</td></tr><tr><td align="center">void</td><td align="center"><strong>putAll</strong>(Map&lt;? extends K,? extends V&gt; m)</td><td align="center">将指定映射中的所有映射复制到此映射。</td></tr><tr><td align="center">V</td><td align="center"><strong>remove</strong>(Object key)</td><td align="center">从此映射中删除指定键的映射（如果存在）。</td></tr><tr><td align="center">int</td><td align="center"><strong>size</strong>()</td><td align="center">返回此映射中键 - 值映射的数量。</td></tr><tr><td align="center">Collection<v></v></td><td align="center"><strong>values</strong>()</td><td align="center">返回此映射中包含的值的 <code>Collection</code> 视图。</td></tr></tbody></table><h5 id="扩容函数-2"><a href="#扩容函数-2" class="headerlink" title="扩容函数"></a>扩容函数</h5><pre><code>final Node&lt;K,V&gt;[] resize() {    Node&lt;K,V&gt;[] oldTab = table;    int oldCap = (oldTab == null) ? 0 : oldTab.length;    int oldThr = threshold;    int newCap, newThr = 0;    if (oldCap &gt; 0) {        if (oldCap &gt;= MAXIMUM_CAPACITY) {            threshold = Integer.MAX_VALUE;            return oldTab;        }        else if ((newCap = oldCap &lt;&lt; 1) &lt; MAXIMUM_CAPACITY &amp;&amp;                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)            newThr = oldThr &lt;&lt; 1; // double threshold    }    else if (oldThr &gt; 0) // initial capacity was placed in threshold        newCap = oldThr;    else {               // zero initial threshold signifies using defaults        newCap = DEFAULT_INITIAL_CAPACITY;        newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);    }    if (newThr == 0) {        float ft = (float)newCap * loadFactor;        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (float)MAXIMUM_CAPACITY ?                  (int)ft : Integer.MAX_VALUE);    }    threshold = newThr;    @SuppressWarnings({"rawtypes","unchecked"})    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])new Node[newCap];    table = newTab;    if (oldTab != null) {        for (int j = 0; j &lt; oldCap; ++j) {            Node&lt;K,V&gt; e;            if ((e = oldTab[j]) != null) {                oldTab[j] = null;                if (e.next == null)                    newTab[e.hash &amp; (newCap - 1)] = e;                else if (e instanceof TreeNode)                    ((TreeNode&lt;K,V&gt;)e).split(this, newTab, j, oldCap);                else { // preserve order                    Node&lt;K,V&gt; loHead = null, loTail = null;                    Node&lt;K,V&gt; hiHead = null, hiTail = null;                    Node&lt;K,V&gt; next;                    do {                        next = e.next;                        if ((e.hash &amp; oldCap) == 0) {                            if (loTail == null)                                loHead = e;                            else                                loTail.next = e;                            loTail = e;                        }                        else {                            if (hiTail == null)                                hiHead = e;                            else                                hiTail.next = e;                            hiTail = e;                        }                    } while ((e = next) != null);                    if (loTail != null) {                        loTail.next = null;                        newTab[j] = loHead;                    }                    if (hiTail != null) {                        hiTail.next = null;                        newTab[j + oldCap] = hiHead;                    }                }            }        }    }    return newTab;}</code></pre><h5 id="getNode"><a href="#getNode" class="headerlink" title="getNode"></a>getNode</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 取节点</span><br><span class="line">final Node&lt;K,V&gt; getNode(int hash, Object key) {</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; int n; K k;</span><br><span class="line">    if ((tab = table) != null &amp;&amp; (n = tab.length) &gt; 0 &amp;&amp;</span><br><span class="line">        (first = tab[(n - 1) &amp; hash]) != null) {</span><br><span class="line">        if (first.hash == hash &amp;&amp; // always check first node</span><br><span class="line">            ((k = first.key) == key || (key != null &amp;&amp; key.equals(k))))</span><br><span class="line">            return first;</span><br><span class="line">        if ((e = first.next) != null) {</span><br><span class="line">            if (first instanceof TreeNode)</span><br><span class="line">                return ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">            do {</span><br><span class="line">                if (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))</span><br><span class="line">                    return e;</span><br><span class="line">            } while ((e = e.next) != null);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    return null;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="get-3"><a href="#get-3" class="headerlink" title="get"></a>get</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public V get(Object key) {</span><br><span class="line">    Node&lt;K,V&gt; e;</span><br><span class="line">    return (e = getNode(hash(key), key)) == null ? null : e.value;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="containsKey"><a href="#containsKey" class="headerlink" title="containsKey"></a>containsKey</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public boolean containsKey(Object key) {</span><br><span class="line">    return getNode(hash(key), key) != null;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="putVal"><a href="#putVal" class="headerlink" title="putVal"></a>putVal</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">final V putVal(int hash, K key, V value, boolean onlyIfAbsent,</span><br><span class="line">               boolean evict) {</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, i;</span><br><span class="line">    if ((tab = table) == null || (n = tab.length) == 0)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">    if ((p = tab[i = (n - 1) &amp; hash]) == null)</span><br><span class="line">        tab[i] = newNode(hash, key, value, null);</span><br><span class="line">    else {</span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line">        if (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != null &amp;&amp; key.equals(k))))</span><br><span class="line">            e = p;</span><br><span class="line">        else if (p instanceof TreeNode)</span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, hash, key, value);</span><br><span class="line">        else {</span><br><span class="line">            for (int binCount = 0; ; ++binCount) {</span><br><span class="line">                if ((e = p.next) == null) {</span><br><span class="line">                    p.next = newNode(hash, key, value, null);</span><br><span class="line">                    if (binCount &gt;= TREEIFY_THRESHOLD - 1) // -1 for 1st</span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    break;</span><br><span class="line">                }</span><br><span class="line">                if (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))</span><br><span class="line">                    break;</span><br><span class="line">                p = e;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        if (e != null) { // existing mapping for key</span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            if (!onlyIfAbsent || oldValue == null)</span><br><span class="line">                e.value = value;</span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            return oldValue;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    ++modCount;</span><br><span class="line">    if (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    return null;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="putMapEntries"><a href="#putMapEntries" class="headerlink" title="putMapEntries"></a>putMapEntries</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">final void putMapEntries(Map&lt;? extends K, ? extends V&gt; m, boolean evict) {</span><br><span class="line">    int s = m.size();</span><br><span class="line">    if (s &gt; 0) {</span><br><span class="line">        if (table == null) { // pre-size</span><br><span class="line">            float ft = ((float)s / loadFactor) + 1.0F;</span><br><span class="line">            int t = ((ft &lt; (float)MAXIMUM_CAPACITY) ?</span><br><span class="line">                     (int)ft : MAXIMUM_CAPACITY);</span><br><span class="line">            if (t &gt; threshold)</span><br><span class="line">                threshold = tableSizeFor(t);</span><br><span class="line">        }</span><br><span class="line">        else if (s &gt; threshold)</span><br><span class="line">            resize();</span><br><span class="line">        for (Map.Entry&lt;? extends K, ? extends V&gt; e : m.entrySet()) {</span><br><span class="line">            K key = e.getKey();</span><br><span class="line">            V value = e.getValue();</span><br><span class="line">            putVal(hash(key), key, value, false, evict);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="put-1"><a href="#put-1" class="headerlink" title="put"></a>put</h5><pre><code>public V put(K key, V value) {    return putVal(hash(key), key, value, false, true);}</code></pre><h5 id="putAll-1"><a href="#putAll-1" class="headerlink" title="putAll"></a>putAll</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public void putAll(Map&lt;? extends K, ? extends V&gt; m) {</span><br><span class="line">    putMapEntries(m, true);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="removeNode"><a href="#removeNode" class="headerlink" title="removeNode"></a>removeNode</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">final Node&lt;K,V&gt; removeNode(int hash, Object key, Object value,</span><br><span class="line">                           boolean matchValue, boolean movable) {</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, index;</span><br><span class="line">    if ((tab = table) != null &amp;&amp; (n = tab.length) &gt; 0 &amp;&amp;</span><br><span class="line">        (p = tab[index = (n - 1) &amp; hash]) != null) {</span><br><span class="line">        Node&lt;K,V&gt; node = null, e; K k; V v;</span><br><span class="line">        if (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != null &amp;&amp; key.equals(k))))</span><br><span class="line">            node = p;</span><br><span class="line">        else if ((e = p.next) != null) {</span><br><span class="line">            if (p instanceof TreeNode)</span><br><span class="line">                node = ((TreeNode&lt;K,V&gt;)p).getTreeNode(hash, key);</span><br><span class="line">            else {</span><br><span class="line">                do {</span><br><span class="line">                    if (e.hash == hash &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key ||</span><br><span class="line">                         (key != null &amp;&amp; key.equals(k)))) {</span><br><span class="line">                        node = e;</span><br><span class="line">                        break;</span><br><span class="line">                    }</span><br><span class="line">                    p = e;</span><br><span class="line">                } while ((e = e.next) != null);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        if (node != null &amp;&amp; (!matchValue || (v = node.value) == value ||</span><br><span class="line">                             (value != null &amp;&amp; value.equals(v)))) {</span><br><span class="line">            if (node instanceof TreeNode)</span><br><span class="line">                ((TreeNode&lt;K,V&gt;)node).removeTreeNode(this, tab, movable);</span><br><span class="line">            else if (node == p)</span><br><span class="line">                tab[index] = node.next;</span><br><span class="line">            else</span><br><span class="line">                p.next = node.next;</span><br><span class="line">            ++modCount;</span><br><span class="line">            --size;</span><br><span class="line">            afterNodeRemoval(node);</span><br><span class="line">            return node;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    return null;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="remove-5"><a href="#remove-5" class="headerlink" title="remove"></a>remove</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public V remove(Object key) {</span><br><span class="line">    Node&lt;K,V&gt; e;</span><br><span class="line">    return (e = removeNode(hash(key), key, null, false, true)) == null ?</span><br><span class="line">        null : e.value;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="containsValue"><a href="#containsValue" class="headerlink" title="containsValue"></a>containsValue</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public boolean containsValue(Object value) {</span><br><span class="line">    Node&lt;K,V&gt;[] tab; V v;</span><br><span class="line">    if ((tab = table) != null &amp;&amp; size &gt; 0) {</span><br><span class="line">        for (Node&lt;K,V&gt; e : tab) {</span><br><span class="line">            for (; e != null; e = e.next) {</span><br><span class="line">                if ((v = e.value) == value ||</span><br><span class="line">                    (value != null &amp;&amp; value.equals(v)))</span><br><span class="line">                    return true;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    return false;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="keySet"><a href="#keySet" class="headerlink" title="keySet"></a>keySet</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">// 返回 key 的集合</span><br><span class="line">public Set&lt;K&gt; keySet() {</span><br><span class="line">    Set&lt;K&gt; ks = keySet;</span><br><span class="line">    if (ks == null) {</span><br><span class="line">        ks = new KeySet();</span><br><span class="line">        keySet = ks;</span><br><span class="line">    }</span><br><span class="line">    return ks;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">final class KeySet extends AbstractSet&lt;K&gt; {</span><br><span class="line">    public final int size()                 { return size; }</span><br><span class="line">    public final void clear()               { HashMap.this.clear(); }</span><br><span class="line">    public final Iterator&lt;K&gt; iterator()     { return new KeyIterator(); }</span><br><span class="line">    public final boolean contains(Object o) { return containsKey(o); }</span><br><span class="line">    public final boolean remove(Object key) {</span><br><span class="line">        return removeNode(hash(key), key, null, false, true) != null;</span><br><span class="line">    }</span><br><span class="line">    public final Spliterator&lt;K&gt; spliterator() {</span><br><span class="line">        return new KeySpliterator&lt;&gt;(HashMap.this, 0, -1, 0, 0);</span><br><span class="line">    }</span><br><span class="line">    public final void forEach(Consumer&lt;? super K&gt; action) {</span><br><span class="line">        Node&lt;K,V&gt;[] tab;</span><br><span class="line">        if (action == null)</span><br><span class="line">            throw new NullPointerException();</span><br><span class="line">        if (size &gt; 0 &amp;&amp; (tab = table) != null) {</span><br><span class="line">            int mc = modCount;</span><br><span class="line">            for (Node&lt;K,V&gt; e : tab) {</span><br><span class="line">                for (; e != null; e = e.next)</span><br><span class="line">                    action.accept(e.key);</span><br><span class="line">            }</span><br><span class="line">            if (modCount != mc)</span><br><span class="line">                throw new ConcurrentModificationException();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="values"><a href="#values" class="headerlink" title="values"></a>values</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">// 返回 value 的集合</span><br><span class="line">public Collection&lt;V&gt; values() {</span><br><span class="line">    Collection&lt;V&gt; vs = values;</span><br><span class="line">    if (vs == null) {</span><br><span class="line">        vs = new Values();</span><br><span class="line">        values = vs;</span><br><span class="line">    }</span><br><span class="line">    return vs;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">final class Values extends AbstractCollection&lt;V&gt; {</span><br><span class="line">    public final int size()                 { return size; }</span><br><span class="line">    public final void clear()               { HashMap.this.clear(); }</span><br><span class="line">    public final Iterator&lt;V&gt; iterator()     { return new ValueIterator(); }</span><br><span class="line">    public final boolean contains(Object o) { return containsValue(o); }</span><br><span class="line">    public final Spliterator&lt;V&gt; spliterator() {</span><br><span class="line">        return new ValueSpliterator&lt;&gt;(HashMap.this, 0, -1, 0, 0);</span><br><span class="line">    }</span><br><span class="line">    public final void forEach(Consumer&lt;? super V&gt; action) {</span><br><span class="line">        Node&lt;K,V&gt;[] tab;</span><br><span class="line">        if (action == null)</span><br><span class="line">            throw new NullPointerException();</span><br><span class="line">        if (size &gt; 0 &amp;&amp; (tab = table) != null) {</span><br><span class="line">            int mc = modCount;</span><br><span class="line">            for (Node&lt;K,V&gt; e : tab) {</span><br><span class="line">                for (; e != null; e = e.next)</span><br><span class="line">                    action.accept(e.value);</span><br><span class="line">            }</span><br><span class="line">            if (modCount != mc)</span><br><span class="line">                throw new ConcurrentModificationException();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="entrySet"><a href="#entrySet" class="headerlink" title="entrySet"></a>entrySet</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">// 返回节点的 set 集合</span><br><span class="line">public Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet() {</span><br><span class="line">    Set&lt;Map.Entry&lt;K,V&gt;&gt; es;</span><br><span class="line">    return (es = entrySet) == null ? (entrySet = new EntrySet()) : es;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">final class EntrySet extends AbstractSet&lt;Map.Entry&lt;K,V&gt;&gt; {</span><br><span class="line">    public final int size()                 { return size; }</span><br><span class="line">    public final void clear()               { HashMap.this.clear(); }</span><br><span class="line">    public final Iterator&lt;Map.Entry&lt;K,V&gt;&gt; iterator() {</span><br><span class="line">        return new EntryIterator();</span><br><span class="line">    }</span><br><span class="line">    public final boolean contains(Object o) {</span><br><span class="line">        if (!(o instanceof Map.Entry))</span><br><span class="line">            return false;</span><br><span class="line">        Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;) o;</span><br><span class="line">        Object key = e.getKey();</span><br><span class="line">        Node&lt;K,V&gt; candidate = getNode(hash(key), key);</span><br><span class="line">        return candidate != null &amp;&amp; candidate.equals(e);</span><br><span class="line">    }</span><br><span class="line">    public final boolean remove(Object o) {</span><br><span class="line">        if (o instanceof Map.Entry) {</span><br><span class="line">            Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;) o;</span><br><span class="line">            Object key = e.getKey();</span><br><span class="line">            Object value = e.getValue();</span><br><span class="line">            return removeNode(hash(key), key, value, true, true) != null;</span><br><span class="line">        }</span><br><span class="line">        return false;</span><br><span class="line">    }</span><br><span class="line">    public final Spliterator&lt;Map.Entry&lt;K,V&gt;&gt; spliterator() {</span><br><span class="line">        return new EntrySpliterator&lt;&gt;(HashMap.this, 0, -1, 0, 0);</span><br><span class="line">    }</span><br><span class="line">    public final void forEach(Consumer&lt;? super Map.Entry&lt;K,V&gt;&gt; action) {</span><br><span class="line">        Node&lt;K,V&gt;[] tab;</span><br><span class="line">        if (action == null)</span><br><span class="line">            throw new NullPointerException();</span><br><span class="line">        if (size &gt; 0 &amp;&amp; (tab = table) != null) {</span><br><span class="line">            int mc = modCount;</span><br><span class="line">            for (Node&lt;K,V&gt; e : tab) {</span><br><span class="line">                for (; e != null; e = e.next)</span><br><span class="line">                    action.accept(e);</span><br><span class="line">            }</span><br><span class="line">            if (modCount != mc)</span><br><span class="line">                throw new ConcurrentModificationException();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h4 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a><em>LinkedHashMap</em></h4><p>使用双向链表来维护元素的顺序</p><p>继承了 <em>HashMap</em>， 实现了 <em>Map</em> 接口，允许放入 <code>null</code>，也允许插入 value 为 <code>null </code> 的元素</p><p>可以将 <em>LinkedHashMap</em> 看作是采用 <em>LinkedList</em> 增强的 <em>HashMap</em></p><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/03/16/62318e7ca4ae8.png" alt="LinkedHashMap"></p><h5 id="底层数据结构-8"><a href="#底层数据结构-8" class="headerlink" title="底层数据结构"></a>底层数据结构</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">transient LinkedHashMap.Entry&lt;K,V&gt; head;</span><br><span class="line"></span><br><span class="line">transient LinkedHashMap.Entry&lt;K,V&gt; tail;</span><br></pre></td></tr></table></figure></div><h5 id="构造器-10"><a href="#构造器-10" class="headerlink" title="构造器"></a>构造器</h5><table><thead><tr><th align="center">构造器</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">LinkedHashMap()</td><td align="center">使用默认初始容量（16）和加载因子（0.75）构造一个空的插入排序 <code>LinkedHashMap</code>实例。</td></tr><tr><td align="center">LinkedHashMap(int initialCapacity)</td><td align="center">构造一个具有指定初始容量和默认加载因子（0.75）的空插入排序 <code>LinkedHashMap</code>实例。</td></tr><tr><td align="center">LinkedHashMap(int initialCapacity, float loadFactor)</td><td align="center">使用指定的初始容量和加载因子构造一个空的插入排序 <code>LinkedHashMap</code>实例。</td></tr><tr><td align="center">LinkedHashMap(int initialCapacity, float loadFactor, boolean accessOrder)</td><td align="center">使用指定的初始容量，加载因子和排序模式构造一个空的 <code>LinkedHashMap</code>实例。</td></tr><tr><td align="center">LinkedHashMap(Map&lt;? extends K,? extends V&gt; m)</td><td align="center">构造一个插入有序的 <code>LinkedHashMap</code>实例，其实例与指定的映射相同。</td></tr></tbody></table><pre><code>public LinkedHashMap(int initialCapacity, float loadFactor) {    super(initialCapacity, loadFactor);    accessOrder = false;}public LinkedHashMap(int initialCapacity) {    super(initialCapacity);    accessOrder = false;}public LinkedHashMap() {    super();    accessOrder = false;}public LinkedHashMap(Map&lt;? extends K, ? extends V&gt; m) {    super();    accessOrder = false;    putMapEntries(m, false);}public LinkedHashMap(int initialCapacity,                     float loadFactor,                     boolean accessOrder) {    super(initialCapacity, loadFactor);    this.accessOrder = accessOrder;}</code></pre><h5 id="方法概要-10"><a href="#方法概要-10" class="headerlink" title="方法概要"></a>方法概要</h5><table><thead><tr><th align="center">变量和类型</th><th align="center">方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">boolean</td><td align="center"><strong>containsValue</strong>(Object value)</td><td align="center">如果此映射将一个或多个键映射到指定值，则返回 <code>true</code> 。</td></tr><tr><td align="center">Set&lt;Map.Entry&lt;K,V&gt;&gt;</td><td align="center"><strong>entrySet</strong>()</td><td align="center">返回此映射中包含的映射的<code>Set</code>视图。</td></tr><tr><td align="center">V</td><td align="center"><strong>get</strong>(Object key)</td><td align="center">返回指定键映射到的值，如果此映射不包含键的映射，则返回 <code>null</code> 。</td></tr><tr><td align="center">Set<k></k></td><td align="center"><strong>keySet</strong>()</td><td align="center">返回此映射中包含的键的<code>Set</code>视图。</td></tr><tr><td align="center">protected boolean</td><td align="center"><strong>removeEldestEntry</strong>(Map.Entry&lt;K,V&gt; eldest)</td><td align="center">如果此地图应删除其最 <code>true</code>则返回 <code>true</code> 。</td></tr><tr><td align="center">Collection<v></v></td><td align="center"><strong>values</strong>()</td><td align="center">返回此映射中包含的值的 <code>Collection</code> 视图。</td></tr></tbody></table><h5 id="containsValue-1"><a href="#containsValue-1" class="headerlink" title="containsValue"></a>containsValue</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public boolean containsValue(Object value) {</span><br><span class="line">    for (LinkedHashMap.Entry&lt;K,V&gt; e = head; e != null; e = e.after) {</span><br><span class="line">        V v = e.value;</span><br><span class="line">        if (v == value || (value != null &amp;&amp; value.equals(v)))</span><br><span class="line">            return true;</span><br><span class="line">    }</span><br><span class="line">    return false;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="get-4"><a href="#get-4" class="headerlink" title="get"></a>get</h5><pre><code>public V get(Object key) {    Node&lt;K,V&gt; e;    if ((e = getNode(hash(key), key)) == null)        return null;    if (accessOrder)        afterNodeAccess(e);    return e.value;}</code></pre><h5 id="afterNodeAccess"><a href="#afterNodeAccess" class="headerlink" title="afterNodeAccess"></a>afterNodeAccess</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">// 插入节点</span><br><span class="line">void afterNodeAccess(Node&lt;K,V&gt; e) { // move node to last</span><br><span class="line">    LinkedHashMap.Entry&lt;K,V&gt; last;</span><br><span class="line">    if (accessOrder &amp;&amp; (last = tail) != e) {</span><br><span class="line">        LinkedHashMap.Entry&lt;K,V&gt; p =</span><br><span class="line">            (LinkedHashMap.Entry&lt;K,V&gt;)e, b = p.before, a = p.after;</span><br><span class="line">        p.after = null;</span><br><span class="line">        if (b == null)</span><br><span class="line">            head = a;</span><br><span class="line">        else</span><br><span class="line">            b.after = a;</span><br><span class="line">        if (a != null)</span><br><span class="line">            a.before = b;</span><br><span class="line">        else</span><br><span class="line">            last = b;</span><br><span class="line">        if (last == null)</span><br><span class="line">            head = p;</span><br><span class="line">        else {</span><br><span class="line">            p.before = last;</span><br><span class="line">            last.after = p;</span><br><span class="line">        }</span><br><span class="line">        tail = p;</span><br><span class="line">        ++modCount;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="keySet-1"><a href="#keySet-1" class="headerlink" title="keySet"></a>keySet</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">public Set&lt;K&gt; keySet() {</span><br><span class="line">    Set&lt;K&gt; ks = keySet;</span><br><span class="line">    if (ks == null) {</span><br><span class="line">        ks = new LinkedKeySet();</span><br><span class="line">        keySet = ks;</span><br><span class="line">    }</span><br><span class="line">    return ks;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">final class LinkedKeySet extends AbstractSet&lt;K&gt; {</span><br><span class="line">    public final int size()                 { return size; }</span><br><span class="line">    public final void clear()               { LinkedHashMap.this.clear(); }</span><br><span class="line">    public final Iterator&lt;K&gt; iterator() {</span><br><span class="line">        return new LinkedKeyIterator();</span><br><span class="line">    }</span><br><span class="line">    public final boolean contains(Object o) { return containsKey(o); }</span><br><span class="line">    public final boolean remove(Object key) {</span><br><span class="line">        return removeNode(hash(key), key, null, false, true) != null;</span><br><span class="line">    }</span><br><span class="line">    public final Spliterator&lt;K&gt; spliterator()  {</span><br><span class="line">        return Spliterators.spliterator(this, Spliterator.SIZED |</span><br><span class="line">                                        Spliterator.ORDERED |</span><br><span class="line">                                        Spliterator.DISTINCT);</span><br><span class="line">    }</span><br><span class="line">    public final void forEach(Consumer&lt;? super K&gt; action) {</span><br><span class="line">        if (action == null)</span><br><span class="line">            throw new NullPointerException();</span><br><span class="line">        int mc = modCount;</span><br><span class="line">        for (LinkedHashMap.Entry&lt;K,V&gt; e = head; e != null; e = e.after)</span><br><span class="line">            action.accept(e.key);</span><br><span class="line">        if (modCount != mc)</span><br><span class="line">            throw new ConcurrentModificationException();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="values-1"><a href="#values-1" class="headerlink" title="values"></a>values</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public Collection&lt;V&gt; values() {</span><br><span class="line">    Collection&lt;V&gt; vs = values;</span><br><span class="line">    if (vs == null) {</span><br><span class="line">        vs = new LinkedValues();</span><br><span class="line">        values = vs;</span><br><span class="line">    }</span><br><span class="line">    return vs;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">final class LinkedValues extends AbstractCollection&lt;V&gt; {</span><br><span class="line">    public final int size()                 { return size; }</span><br><span class="line">    public final void clear()               { LinkedHashMap.this.clear(); }</span><br><span class="line">    public final Iterator&lt;V&gt; iterator() {</span><br><span class="line">        return new LinkedValueIterator();</span><br><span class="line">    }</span><br><span class="line">    public final boolean contains(Object o) { return containsValue(o); }</span><br><span class="line">    public final Spliterator&lt;V&gt; spliterator() {</span><br><span class="line">        return Spliterators.spliterator(this, Spliterator.SIZED |</span><br><span class="line">                                        Spliterator.ORDERED);</span><br><span class="line">    }</span><br><span class="line">    public final void forEach(Consumer&lt;? super V&gt; action) {</span><br><span class="line">        if (action == null)</span><br><span class="line">            throw new NullPointerException();</span><br><span class="line">        int mc = modCount;</span><br><span class="line">        for (LinkedHashMap.Entry&lt;K,V&gt; e = head; e != null; e = e.after)</span><br><span class="line">            action.accept(e.value);</span><br><span class="line">        if (modCount != mc)</span><br><span class="line">            throw new ConcurrentModificationException();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h5 id="entrySet-1"><a href="#entrySet-1" class="headerlink" title="entrySet"></a>entrySet</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">public Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet() {</span><br><span class="line">    Set&lt;Map.Entry&lt;K,V&gt;&gt; es;</span><br><span class="line">    return (es = entrySet) == null ? (entrySet = new LinkedEntrySet()) : es;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">final class LinkedEntrySet extends AbstractSet&lt;Map.Entry&lt;K,V&gt;&gt; {</span><br><span class="line">    public final int size()                 { return size; }</span><br><span class="line">    public final void clear()               { LinkedHashMap.this.clear(); }</span><br><span class="line">    public final Iterator&lt;Map.Entry&lt;K,V&gt;&gt; iterator() {</span><br><span class="line">        return new LinkedEntryIterator();</span><br><span class="line">    }</span><br><span class="line">    public final boolean contains(Object o) {</span><br><span class="line">        if (!(o instanceof Map.Entry))</span><br><span class="line">            return false;</span><br><span class="line">        Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;) o;</span><br><span class="line">        Object key = e.getKey();</span><br><span class="line">        Node&lt;K,V&gt; candidate = getNode(hash(key), key);</span><br><span class="line">        return candidate != null &amp;&amp; candidate.equals(e);</span><br><span class="line">    }</span><br><span class="line">    public final boolean remove(Object o) {</span><br><span class="line">        if (o instanceof Map.Entry) {</span><br><span class="line">            Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;) o;</span><br><span class="line">            Object key = e.getKey();</span><br><span class="line">            Object value = e.getValue();</span><br><span class="line">            return removeNode(hash(key), key, value, true, true) != null;</span><br><span class="line">        }</span><br><span class="line">        return false;</span><br><span class="line">    }</span><br><span class="line">    public final Spliterator&lt;Map.Entry&lt;K,V&gt;&gt; spliterator() {</span><br><span class="line">        return Spliterators.spliterator(this, Spliterator.SIZED |</span><br><span class="line">                                        Spliterator.ORDERED |</span><br><span class="line">                                        Spliterator.DISTINCT);</span><br><span class="line">    }</span><br><span class="line">    public final void forEach(Consumer&lt;? super Map.Entry&lt;K,V&gt;&gt; action) {</span><br><span class="line">        if (action == null)</span><br><span class="line">            throw new NullPointerException();</span><br><span class="line">        int mc = modCount;</span><br><span class="line">        for (LinkedHashMap.Entry&lt;K,V&gt; e = head; e != null; e = e.after)</span><br><span class="line">            action.accept(e);</span><br><span class="line">        if (modCount != mc)</span><br><span class="line">            throw new ConcurrentModificationException();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
    <summary type="html">Java 集合框架</summary>
    
    
    
    <category term="技术学习" scheme="https://hexo.blog.lsilencej.top/categories/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Java" scheme="https://hexo.blog.lsilencej.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java 中的泛型、异常、反射机制</title>
    <link href="https://hexo.blog.lsilencej.top/2021/11/09/Java%20%E4%B8%AD%E7%9A%84%E6%B3%9B%E5%9E%8B%E3%80%81%E5%BC%82%E5%B8%B8%E3%80%81%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6-java-study-note-2/"/>
    <id>https://hexo.blog.lsilencej.top/2021/11/09/Java%20%E4%B8%AD%E7%9A%84%E6%B3%9B%E5%9E%8B%E3%80%81%E5%BC%82%E5%B8%B8%E3%80%81%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6-java-study-note-2/</id>
    <published>2021-11-09T12:49:48.000Z</published>
    <updated>2022-05-02T07:53:14.311Z</updated>
    
    <content type="html"><![CDATA[<h2 id="泛型机制"><a href="#泛型机制" class="headerlink" title="泛型机制"></a>泛型机制</h2><h3 id="泛型是什么？为什么要引入泛型？"><a href="#泛型是什么？为什么要引入泛型？" class="headerlink" title="泛型是什么？为什么要引入泛型？"></a>泛型是什么？为什么要引入泛型？</h3><p>在日常开发过程中，免不了进行多类型参数的交互，而大多数情况下只是同一份代码更改了一个数据类型，如下：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">private static int add(int a, int b) {</span><br><span class="line">    System.out.println(a + "+" + b + "=" + (a + b));</span><br><span class="line">    return a + b;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">private static float add(float a, float b) {</span><br><span class="line">    System.out.println(a + "+" + b + "=" + (a + b));</span><br><span class="line">    return a + b;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">private static double add(double a, double b) {</span><br><span class="line">    System.out.println(a + "+" + b + "=" + (a + b));</span><br><span class="line">    return a + b;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><p>对于不同的类型，实现相同的代码需要重载三份，而这便是最让人头疼的事，于是，泛型这一概念便被引申出来了</p><p>顾名思义，泛型，广泛的类型，引入泛型的意义便在于<strong>多种数据类型执行相同的代码（即代码复用）</strong></p><p>通过使用泛型，我们可以简化上述代码为：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">private static &lt;T extends Number&gt; double add(T a, T b) {</span><br><span class="line">    System.out.println(a + "+" + b + "=" + (a.doubleValue() + b.doubleValue()));</span><br><span class="line">    return a.doubleValue() + b.doubleValue();</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><p>这样一个基础的泛型便实现了</p><h3 id="泛型使用"><a href="#泛型使用" class="headerlink" title="泛型使用"></a>泛型使用</h3><h4 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class Point&lt;T&gt;{         // T 为标识符号，可以随意指定 </span><br><span class="line">    private T var;     // var 的类型由 T 指定，即：由外部指定  </span><br><span class="line">    public T getVar(){  // 返回值的类型由外部决定  </span><br><span class="line">        return var;  </span><br><span class="line">    }  </span><br><span class="line">    public void setVar(T var){  // 设置的类型也由外部决定  </span><br><span class="line">        this.var = var;  </span><br><span class="line">    }  </span><br><span class="line">}  </span><br><span class="line">public class GenericsDemo06{  </span><br><span class="line">    public static void main(String args[]){  </span><br><span class="line">        Point&lt;String&gt; p = new Point&lt;String&gt;();     // T 为 String 类型  </span><br><span class="line">        p.setVar("it");                            // 设置字符串  </span><br><span class="line">        System.out.println(p.getVar().length());   // 取得字符串的长度 </span><br><span class="line">    }  </span><br><span class="line">}</span><br><span class="line">  </span><br></pre></td></tr></table></figure></div><h4 id="多元泛型"><a href="#多元泛型" class="headerlink" title="多元泛型"></a>多元泛型</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">class Notepad&lt;K,V&gt;{ </span><br><span class="line">    private K key; </span><br><span class="line">    private V value; </span><br><span class="line">    public K getKey(){  </span><br><span class="line">        return this.key;  </span><br><span class="line">    }  </span><br><span class="line">    public V getValue(){  </span><br><span class="line">        return this.value;  </span><br><span class="line">    }  </span><br><span class="line">    public void setKey(K key){  </span><br><span class="line">        this.key = key;  </span><br><span class="line">    }  </span><br><span class="line">    public void setValue(V value){  </span><br><span class="line">        this.value = value;  </span><br><span class="line">    }  </span><br><span class="line">} </span><br><span class="line">public class GenericsDemo09{  </span><br><span class="line">    public static void main(String args[]){  </span><br><span class="line">        Notepad&lt;String,Integer&gt; t = null;</span><br><span class="line">        t = new Notepad&lt;String,Integer&gt;();       // K 为 String，V 为 Integer  </span><br><span class="line">        t.setKey("汤姆");        // 设置第一个内容  </span><br><span class="line">        t.setValue(20);            // 设置第二个内容  </span><br><span class="line">        System.out.print("姓名；" + t.getKey());      // 取得信息  </span><br><span class="line">        System.out.print("，年龄；" + t.getValue());       // 取得信息  </span><br><span class="line">  </span><br><span class="line">    }  </span><br><span class="line">}</span><br><span class="line">  </span><br></pre></td></tr></table></figure></div><h4 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 泛型化接口与最大值</span><br><span class="line">public class GenericComparison&lt;T extends Comparable&lt;T&gt;&gt; implements Maximum&lt;T&gt; {</span><br><span class="line">    @Override</span><br><span class="line">    public T getMax(T[] array) {</span><br><span class="line">        if (array == null || array.length == 0) {</span><br><span class="line">            return null;</span><br><span class="line">        }</span><br><span class="line">        T max = array[0];</span><br><span class="line">        for (int i = 1; i &lt; array.length; i++) {</span><br><span class="line">            if (max.compareTo(array[i]) &lt; 0) {</span><br><span class="line">                max = array[i];</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        return max;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h4 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 泛型方法与最小值</span><br><span class="line">public class GenericComparison {</span><br><span class="line">    public static &lt;T extends Comparable&lt;T&gt;&gt; T getMin(T[] array) {</span><br><span class="line">        if (array == null || array.length == 0) {</span><br><span class="line">            return null;</span><br><span class="line">        }</span><br><span class="line">        T min = array[0];</span><br><span class="line">        for (int i = 1; i &lt; array.length; i++) {</span><br><span class="line">            if (min.compareTo(array[i]) &gt; 0) {</span><br><span class="line">                min = array[i];</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        return min;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h4 id="泛型数组"><a href="#泛型数组" class="headerlink" title="泛型数组"></a>泛型数组</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// 自定义泛型化数组类</span><br><span class="line">public class GenericArray&lt;T&gt; {</span><br><span class="line">    private T[] array;</span><br><span class="line">    private int size;</span><br><span class="line">    @SuppressWarnings("unchecked")</span><br><span class="line">    public GenericArray(Class&lt;T&gt; type, int size) {</span><br><span class="line">        this.size = size;</span><br><span class="line">        array = (T[]) Array.newInstance(type, size);</span><br><span class="line">    }</span><br><span class="line">    public void put(int index, T item) {</span><br><span class="line">        if (size &gt; index) {</span><br><span class="line">            array[index] = item;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    public T get(int index) {</span><br><span class="line">        if (size &gt; index) {</span><br><span class="line">            return array[index];</span><br><span class="line">        } else {</span><br><span class="line">            return null;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h4 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// 使用通配符增强泛型</span><br><span class="line">public class WildcardsTest {</span><br><span class="line">    public static Object getMiddle(List&lt;? extends Number&gt; list) {</span><br><span class="line">        return list.get(list.size() / 2);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) {</span><br><span class="line">        List&lt;Integer&gt; ints = new ArrayList&lt;Integer&gt;();</span><br><span class="line">        ints.add(1);</span><br><span class="line">        ints.add(2);</span><br><span class="line">        ints.add(3);</span><br><span class="line">        System.out.println("整型列表的元素：");</span><br><span class="line">        System.out.println(Arrays.toString(ints.toArray()));</span><br><span class="line">        System.out.println("整型列表的中间数：" + getMiddle(ints));</span><br><span class="line">        List&lt;Double&gt; doubles = new ArrayList&lt;Double&gt;();</span><br><span class="line">        doubles.add(1.1);</span><br><span class="line">        doubles.add(2.2);</span><br><span class="line">        doubles.add(3.3);</span><br><span class="line">        System.out.println("浮点列表的元素：");</span><br><span class="line">        System.out.println(Arrays.toString(doubles.toArray()));</span><br><span class="line">        System.out.println("浮点列表的中间数：" + getMiddle(doubles));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h3 id="伪泛型"><a href="#伪泛型" class="headerlink" title="伪泛型"></a>伪泛型</h3><p>java 中的泛型是伪泛型，原因是在编译阶段会进行<strong>类型擦除</strong>，即将所有的泛型表示都替换为具体的类型</p><ul><li>当类定义中的类型参数没有任何限制时，在类型擦除中直接被替换为Object，即形如<code>&lt;T&gt;</code>和<code>&lt;?&gt;</code>的类型参数都被替换为Object。</li><li>当类定义中的类型参数存在限制（上下界）时，在类型擦除中替换为类型参数的上界或者下界，比如形如<code>&lt;T extends Number&gt;</code>和<code>&lt;? extends Number&gt;</code>的类型参数被替换为<code>Number</code>，<code>&lt;? super Number&gt;</code>被替换为Object。</li><li>擦除方法定义中的类型参数原则和擦除类定义中的类型参数是一样的</li></ul><h2 id="异常机制"><a href="#异常机制" class="headerlink" title="异常机制"></a>异常机制</h2><h3 id="层次结构"><a href="#层次结构" class="headerlink" title="层次结构"></a>层次结构</h3><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/03/16/6231931e7c3aa.png" alt="异常类的层次结构"></p><ul><li><p>检查型异常（checked exceptions）</p><p>一定情况下发生可以预计，一旦发生这种异常，必须采取某种方式进行处理</p><p>当程序中可能出现此类异常，要么使用 try - catch 语句进行捕获，要么用 throws 语句声明抛出，否则不通过编译</p></li><li><p>未检查型异常（unchecked exceptions）</p><p>编译器不要求强制处置</p><p>包括运行时异常（RuntimeException与其子类）和错误（Error）</p></li></ul><h3 id="处理异常"><a href="#处理异常" class="headerlink" title="处理异常"></a>处理异常</h3><h4 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">// 方法中抛出异常</span><br><span class="line">public class ThrowException {</span><br><span class="line">    public static void throwException() {</span><br><span class="line">        throw new UnsupportedOperationException("方法尚未实现");</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) {</span><br><span class="line">        ThrowException.throwException();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 方法上抛出异常</span><br><span class="line">public class ThrowsException {</span><br><span class="line">    public static void throwsException() throws ClassNotFoundException {</span><br><span class="line">        Class.forName("com.mysql.jdbc.Driver");</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) {</span><br><span class="line">        try {</span><br><span class="line">            ThrowsException.throwsException();</span><br><span class="line">        } catch (ClassNotFoundException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h4 id="异常捕获"><a href="#异常捕获" class="headerlink" title="异常捕获"></a>异常捕获</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">// 捕获单个异常</span><br><span class="line">public class CatchException {</span><br><span class="line">    public static void main(String[] args) {</span><br><span class="line">        try {</span><br><span class="line">            System.out.println("进入 try 块");</span><br><span class="line">            @SuppressWarnings("unused")</span><br><span class="line">            Class&lt;?&gt; clazz = Class.forName("");</span><br><span class="line">            System.out.println("离开 try 块");</span><br><span class="line">        } catch (ClassNotFoundException e) {</span><br><span class="line">            System.out.println("进入 catch 块");</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println("离开 catch 块");</span><br><span class="line">        } finally {</span><br><span class="line">            System.out.println("进入 finally 块");</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 捕获多个异常</span><br><span class="line">public class CatchExceptions {</span><br><span class="line">    private static String URL = "jdbc:mysql://localhost:3306/db_database";</span><br><span class="line">    private static String DRIVER = "com.mysql.jdbc.Driver";</span><br><span class="line">    private static String USERNAME = "ls";</span><br><span class="line">    private static String PASSWORD = "lsilencej";</span><br><span class="line">    private static Connection conn;</span><br><span class="line">    private static Connection getConnection() {</span><br><span class="line">        try {</span><br><span class="line">            Class.forName("DRIVER");</span><br><span class="line">            conn = DriverManager.getConnection(URL, USERNAME, PASSWORD);</span><br><span class="line">            return conn;</span><br><span class="line">        } catch (ClassNotFoundException | SQLException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">        return null;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) {</span><br><span class="line">        CatchExceptions.getConnection();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h3 id="常见异常"><a href="#常见异常" class="headerlink" title="常见异常"></a>常见异常</h3><ul><li><p><strong>RuntimeException</strong></p><ul><li>java.lang.ArrayIndexOutOfBoundsException 数组索引越界异常。当对数组的索引值为负数或大于等于数组大小时抛出。</li><li>java.lang.ArithmeticException 算术条件异常。譬如：整数除零等。</li><li>java.lang.NullPointerException 空指针异常。当应用试图在要求使用对象的地方使用了null时，抛出该异常。譬如：调用null对象的实例方法、访问null对象的属性、计算null对象的长度、使用throw语句抛出null等等</li><li>java.lang.ClassNotFoundException 找不到类异常。当应用试图根据字符串形式的类名构造类，而在遍历CLASSPAH之后找不到对应名称的class文件时，抛出该异常。</li><li>java.lang.NegativeArraySizeException  数组长度为负异常</li><li>java.lang.ArrayStoreException 数组中包含不兼容的值抛出的异常</li><li>java.lang.SecurityException 安全性异常</li><li>java.lang.IllegalArgumentException 非法参数异常</li></ul></li><li><p><strong>IOException</strong></p><ul><li>IOException：操作输入流和输出流时可能出现的异常。</li><li>EOFException 文件已结束异常</li><li>FileNotFoundException 文件未找到异常</li></ul></li><li><p><strong>其他</strong></p><ul><li><p>ClassCastException    类型转换异常类</p></li><li><p>ArrayStoreException  数组中包含不兼容的值抛出的异常</p></li><li><p>SQLException   操作数据库异常类</p></li><li><p>NoSuchFieldException   字段未找到异常</p></li><li><p>NoSuchMethodException   方法未找到抛出的异常</p></li><li><p>NumberFormatException    字符串转换为数字抛出的异常</p></li><li><p>StringIndexOutOfBoundsException 字符串索引超出范围抛出的异常</p></li><li><p>IllegalAccessException  不允许访问某类异常</p></li><li><p>InstantiationException  当应用程序试图使用Class类中的newInstance()方法创建一个类的实例，而指定的类对象无法被实例化时，抛出该异常</p></li></ul></li></ul><h2 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h2><h3 id="反射是什么？"><a href="#反射是什么？" class="headerlink" title="反射是什么？"></a>反射是什么？</h3><p>反射就是把 java 类中的各种成分映射成一个个的 java 对象</p><p>映射需要中介</p><p>这个中介即是 Class 类</p><h3 id="Class-类实例化"><a href="#Class-类实例化" class="headerlink" title="Class 类实例化"></a>Class 类实例化</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">// 实例化 Class 的方法</span><br><span class="line">public class ClassTest {</span><br><span class="line">    @SuppressWarnings("unchecked")</span><br><span class="line">    public static void main(String[] args) throws ClassNotFoundException {</span><br><span class="line">        System.out.println("第 1 种方法：Object.getClass()");</span><br><span class="line">        Class c1 = new Date().getClass();</span><br><span class="line">        System.out.println(c1.getName());</span><br><span class="line">        System.out.println("第 2 种方法：.class 语法");</span><br><span class="line">        Class c2 = boolean.class;</span><br><span class="line">        System.out.println(c2.getName());</span><br><span class="line">        System.out.println("第 3 种方法：Class.forName()");</span><br><span class="line">        Class c3 = Class.forName("java.lang.String");</span><br><span class="line">        System.out.println(c3.getName());</span><br><span class="line">        System.out.println("第 4 种方法：包装类的 TYPE 域");</span><br><span class="line">        Class c4 = Double.TYPE;</span><br><span class="line">        System.out.println(c4.getName());</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 获得 Class 对象表示实体的名称</span><br><span class="line">public class ClassNameTest {</span><br><span class="line">    public static void main(String[] args) {</span><br><span class="line">        String dateName = new Date().getClass().getName();</span><br><span class="line">        System.out.println("非数组引用类型的名称：" + dateName);</span><br><span class="line">        String byteName = byte.class.getName();</span><br><span class="line">        System.out.println("基本类型的名称：" + byteName);</span><br><span class="line">        String oneDimensionArray = new Date[4].getClass().getName();</span><br><span class="line">        System.out.println("一维引用类型数组：" + oneDimensionArray);</span><br><span class="line">        String twoDimensionArray = new int[4][4].getClass().getName();</span><br><span class="line">        System.out.println("二维基本类型数组：" + twoDimensionArray);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h3 id="Class-类方法"><a href="#Class-类方法" class="headerlink" title="Class 类方法"></a>Class 类方法</h3><table><thead><tr><th align="center">方法名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">forName()</td><td align="center">（1)获取Class对象的一个引用，但引用的类还没有加载(该类的第一个对象没有生成)就加载了这个类。(2)为了产生Class引用，forName()立即就进行了初始化。</td></tr><tr><td align="center">Object.getClass()</td><td align="center">获取Class对象的一个引用，返回表示该对象的实际类型的Class引用。</td></tr><tr><td align="center">getName()</td><td align="center">取完整的类名(包括包名)。</td></tr><tr><td align="center">getSimpleName()</td><td align="center">获取简单类名(不包括包名)</td></tr><tr><td align="center">getCanonicalName()</td><td align="center">获取标准类名(包括包名)</td></tr><tr><td align="center">isInterface()</td><td align="center">判断Class对象是否是表示一个接口</td></tr><tr><td align="center">getInterfaces()</td><td align="center">返回Class对象数组，表示Class对象所引用的类所实现的所有接口。</td></tr><tr><td align="center">getSupercalss()</td><td align="center">返回Class对象，表示Class对象所引用的类所继承的直接基类。应用该方法可在运行时发现一个对象完整的继承结构。</td></tr><tr><td align="center">newInstance()</td><td align="center">返回一个Oject对象，是实现“虚拟构造器”的一种途径。使用该方法创建的类，必须带有无参的构造器。</td></tr><tr><td align="center">getFields()</td><td align="center">获得某个类的所有的公共（public）的字段，包括继承自父类的所有公共字段。</td></tr><tr><td align="center">getMethods()</td><td align="center">获得某个类的所有的公共（public）的方法，包括继承自父类的所有公共方法。</td></tr><tr><td align="center">getConstructors()</td><td align="center">获得某个类的所有的公共（public）的构造器，包括继承自父类的所有公共构造器。</td></tr><tr><td align="center">getAnnotations()</td><td align="center">获得某个类的所有的注解。</td></tr><tr><td align="center">getDeclaredFields()</td><td align="center">获得某个类的非继承的字段，即包括public、private和proteced，默认但是不包括父类声明的任何字段。</td></tr><tr><td align="center">getDeclaredMethods()</td><td align="center">获得某个类的非继承的方法，即包括public、private和proteced，默认但是不包括父类声明的任何方法。</td></tr><tr><td align="center">getDeclaredConstructors()</td><td align="center">获得某个类的非继承的构造器，即包括public、private和proteced，默认但是不包括父类声明的任何构造器。</td></tr></tbody></table><h3 id="反射使用"><a href="#反射使用" class="headerlink" title="反射使用"></a>反射使用</h3><h4 id="查看类的声明"><a href="#查看类的声明" class="headerlink" title="查看类的声明"></a>查看类的声明</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">// 查看类的声明</span><br><span class="line">public class ClassDeclarationViewer {</span><br><span class="line">    public static void main(String[] args) throws ClassNotFoundException {</span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName("java.util.ArrayList");</span><br><span class="line">        System.out.println("类的标准名称：" + clazz.getCanonicalName());</span><br><span class="line">        System.out.println("类的修饰符：" + Modifier.toString(clazz.getModifiers()));</span><br><span class="line">        TypeVariable&lt;?&gt;[] typeVariables = clazz.getTypeParameters();</span><br><span class="line">        System.out.println("类的泛型参数：");</span><br><span class="line">        if (typeVariables.length != 0) {</span><br><span class="line">            for (TypeVariable&lt;?&gt; typeVariable : typeVariables) {</span><br><span class="line">                System.out.println(typeVariable + "\t");</span><br><span class="line">            }</span><br><span class="line">        } else {</span><br><span class="line">            System.out.println("空");</span><br><span class="line">        }</span><br><span class="line">        Type[] interfaces = clazz.getGenericInterfaces();</span><br><span class="line">        System.out.println("类所实现的接口");</span><br><span class="line">        if (interfaces.length != 0) {</span><br><span class="line">            for (Type type: interfaces) {</span><br><span class="line">                System.out.println("\t" + type);</span><br><span class="line">            }</span><br><span class="line">        } else {</span><br><span class="line">            System.out.println("\t" + "空");</span><br><span class="line">        }</span><br><span class="line">        Type superClass = clazz.getGenericSuperclass();</span><br><span class="line">        System.out.println("类的直接继承类：");</span><br><span class="line">        if (superClass != null) {</span><br><span class="line">            System.out.println(superClass);</span><br><span class="line">        } else {</span><br><span class="line">            System.out.println("空");</span><br><span class="line">        }</span><br><span class="line">        Annotation[] annotations = clazz.getAnnotations();</span><br><span class="line">        System.out.println("类的注解：");</span><br><span class="line">        if (annotations.length != 0) {</span><br><span class="line">            for (Annotation annotation: annotations) {</span><br><span class="line">                System.out.println("\t" + annotation);</span><br><span class="line">            }</span><br><span class="line">        } else {</span><br><span class="line">            System.out.println("空");</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h4 id="查看类的成员"><a href="#查看类的成员" class="headerlink" title="查看类的成员"></a>查看类的成员</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">// 查看类的成员</span><br><span class="line">public class ClassViewer {</span><br><span class="line">    @SuppressWarnings("unchecked")</span><br><span class="line">    public static void main(String[] args) throws ClassNotFoundException {</span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName("java.util.ArrayList");</span><br><span class="line">        System.out.println("类的标准名称：" + clazz.getCanonicalName());</span><br><span class="line">        Constructor[] constructors = clazz.getConstructors();</span><br><span class="line">        System.out.println("类的构造方法：");</span><br><span class="line">        if (constructors.length != 0) {</span><br><span class="line">            for (Constructor constructor: constructors) {</span><br><span class="line">                System.out.println("\t" + constructor);</span><br><span class="line">            }</span><br><span class="line">        } else {</span><br><span class="line">            System.out.println("\t 空");</span><br><span class="line">        }</span><br><span class="line">        Field[] fields = clazz.getFields();</span><br><span class="line">        System.out.println("类的非继承域变量：");</span><br><span class="line">        if (fields.length != 0) {</span><br><span class="line">            for (Field field: fields) {</span><br><span class="line">                System.out.println("\t" + field);</span><br><span class="line">            }</span><br><span class="line">        } else {</span><br><span class="line">            System.out.println("\t 空");</span><br><span class="line">        }</span><br><span class="line">        Method[] methods = clazz.getMethods();</span><br><span class="line">        System.out.println("类的非继承方法：");</span><br><span class="line">        if (methods.length != 0) {</span><br><span class="line">            for (Method method: methods) {</span><br><span class="line">                System.out.println(method);</span><br><span class="line">            }</span><br><span class="line">        } else {</span><br><span class="line">            System.out.println("\t 空");</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
    <summary type="html">继续总结 Java 的学习历程</summary>
    
    
    
    <category term="技术学习" scheme="https://hexo.blog.lsilencej.top/categories/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Java" scheme="https://hexo.blog.lsilencej.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java 学习笔记（基础）</title>
    <link href="https://hexo.blog.lsilencej.top/2021/11/07/Java%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89-java-study-note/"/>
    <id>https://hexo.blog.lsilencej.top/2021/11/07/Java%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89-java-study-note/</id>
    <published>2021-11-07T07:42:52.000Z</published>
    <updated>2022-05-02T07:52:51.644Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java-学习笔记（基础）"><a href="#Java-学习笔记（基础）" class="headerlink" title="Java 学习笔记（基础）"></a>Java 学习笔记（基础）</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><h4 id="类别"><a href="#类别" class="headerlink" title="类别"></a>类别</h4><ul><li>Java SE：Java Standard Edition (J2SE)</li><li>Java ME: Java Mobile Edition (J2ME)</li><li>Java EE：Java Enterprise Edition (J2EE)</li></ul><h4 id="JDK、JRE、JVM"><a href="#JDK、JRE、JVM" class="headerlink" title="JDK、JRE、JVM"></a>JDK、JRE、JVM</h4><ul><li>JDK：Java Development Kit （Java开发必备）</li><li>JRE：Java Runtime Environment（Java执行环境）</li><li>JVM：Java Virtual Machine（Java虚拟机）</li><li>API ：Application Programming Interface（应用编程接口）</li></ul><h4 id="程序构造块"><a href="#程序构造块" class="headerlink" title="程序构造块"></a>程序构造块</h4><ul><li><p>package：零条或一条，出现在程序最开始的地方</p></li><li><p>import：零条或多条，引入 Java 提供的类（API）</p></li><li><p>class：创建自己的类，公开类的类名跟文件名保持一致</p></li><li><p>main：可执行 Java 程序的入口</p><ul><li>三个修饰符：public、static、void</li><li>可接收命令行参数</li></ul></li><li><p>注释</p><ul><li>行注释：//</li><li>块注释：/*……*/</li><li>文档注释：/**……*/<ul><li>@author 作者</li><li>@param 参数</li><li>@return 返回值</li><li>@throw 可能引发的异常</li></ul></li></ul></li></ul><h4 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h4><ul><li>编译：javac Test.java</li><li>执行：java Test (编译生成的 class 字节码文件，命令中没有 .class)</li></ul><h3 id="核心语言"><a href="#核心语言" class="headerlink" title="核心语言"></a>核心语言</h3><h4 id="语言元素"><a href="#语言元素" class="headerlink" title="语言元素"></a>语言元素</h4><ul><li>关键字 50个</li><li>标识符<ul><li>可以是字符、数字、下划线、$，不能以数字开头，不能有 ! 等特殊符号</li><li>不能是关键字</li><li>大小写敏感</li><li>类：首字母大写，如果一个类名由多个单词构成，那么每个单词的首字母都大写， 中间不使用任何的连接符。比如 Person 类，MemberTest 类。</li><li>方法：首字母小写。如果一个方法由多个单词构成，那么第一个单词的所有字母全 都小写，从第二个单词开始，每个单词的首字母大写。比如 add，addThreeInt。</li><li>属性：命名约定与方法相同。比如 age，ageOfPerson。</li><li>包：将公司域名反转作为包名、对于包名 每个字母都需要小写</li><li>常量：所有单词的字母都是大写，如果有多个单词， 那么使用下划线连接即可。</li></ul></li><li>运算符<ul><li>赋值运算符：=</li><li>算术运算符：+、-、*、/、%</li><li>关系运算符：&gt;、&lt;、&gt;=、&lt;=、!=</li><li>短路运算符<ul><li>&amp;&amp; 短路与</li><li>|| 短路或</li></ul></li><li>条件运算符：三目运算符 ？：</li><li>逻辑运算符：&amp;、|、!</li><li>自增 / 自减运算符：++ / –</li><li>下标运算符：[]</li><li>类型转换运算符：()</li><li>其他运算符<ul><li>new</li><li>instanceof</li><li>位运算符</li><li>访问成员运算符</li></ul></li></ul></li><li>字面量（直接量）<ul><li>整型字面量<ul><li>100</li><li>123L 长整型</li></ul></li><li>实型字面量<ul><li>9.8F 浮点型</li><li>3.2E - 3</li></ul></li><li>字符字面量<ul><li>‘a’</li><li>‘\t’</li><li>‘\105’ 大写字母 E</li></ul></li><li>字符串字面量：”hello”</li><li>布尔型字面量：true、false</li><li>引用字面量：null</li><li>类型字面量<ul><li>int.class</li><li>String.class</li></ul></li></ul></li><li>分隔符</li></ul><h4 id="变量和常量"><a href="#变量和常量" class="headerlink" title="变量和常量"></a>变量和常量</h4><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><ul><li><p>基本数据类型</p><ul><li><p>byte: 占用1个字节，取值范围-128 ~ 127</p></li><li><p>short: 占用2个字节，取值范围-2^15^ ~ 2^15^-1</p></li><li><p>int：占用4个字节，取值范围-2^31^ ~ 2^31^-1</p></li><li><p>long：占用8个字节</p></li><li><p>float：占用4个字节</p><ul><li>1.1f 字面量才是 float 类型。</li></ul></li><li><p>double：占用8个字节</p><ul><li>1.1 字面量属于 double 类型，不能直接将 1.1 直接赋值给 float 变量，因为这是向下转型。Java 不能隐式执行向下转型，因为这会使得精度降低。</li></ul></li><li><p>char: 占用2个字节</p></li><li><p>boolean：占用大小根据实现虚拟机不同有所差异</p></li></ul></li><li><p>枚举类型：符号常量</p></li><li><p>引用类型：对象</p></li><li><p>包装类型</p><ul><li><p>Byte</p></li><li><p>Short</p></li><li><p>Integer</p></li><li><p>Long</p></li><li><p>Float</p></li><li><p>Double</p></li><li><p>Character</p></li><li><p>Boolean</p><p>基本类型都有对应的包装类型，基本类型与其对应的包装类型之间的赋值使用自动装箱与拆箱完成。</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer x = 2;     // 装箱</span><br><span class="line">int y = x;         // 拆箱</span><br></pre></td></tr></table></figure></div></li></ul></li><li><p>缓存池</p><p>new Integer(123) 与 Integer.valueOf(123) 的区别在于:</p><ul><li><p>new Integer(123) 每次都会新建一个对象</p></li><li><p>Integer.valueOf(123) 会使用缓存池中的对象，多次调用会取得同一个对象的引用。</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Integer x = new Integer(123);</span><br><span class="line">Integer y = new Integer(123);</span><br><span class="line">System.out.println(x == y);    // false</span><br><span class="line">Integer z = Integer.valueOf(123);</span><br><span class="line">Integer k = Integer.valueOf(123);</span><br><span class="line">System.out.println(z == k);   // true</span><br></pre></td></tr></table></figure></div></li><li><p>valueOf()：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public static Integer valueOf(int i) {</span><br><span class="line">    if (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">        return IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">    return new Integer(i);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div></li></ul></li></ul><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><h4 id="创建字符串对象"><a href="#创建字符串对象" class="headerlink" title="创建字符串对象"></a>创建字符串对象</h4><ul><li>String str = “hello”; str 引用静态区的字符串字面量</li><li>String str = new String(“hello”); str 引用堆上的字符串对象</li><li>字符串池<ul><li><code>String s = "aaa";</code>（采用字面值方式赋值）<ul><li>首先查找 String Pool 中是否存在“aaa”这个对象，如果不存在，则在 String Pool 中创建 一个“aaa”对象，然后将 String Pool 中的这个“aaa”对象的地址返回来，赋给引用变量 s，这样 s 会指向 String Pool 中的这个“aaa”字符串对象</li><li>如果存在，则不创建任何对象，直接将 String Pool 中的这个“aaa”对象地址返回来， 赋给 s 引用。</li></ul></li><li>String s = new String(“aaa”);<ul><li>首先在 String Pool 中查找有没有“aaa”这个字符串对象，如果有，则不在 String Pool 中再去创建“aaa”这个对象了，直接在堆中（heap）中创建一个“aaa”字符串对象，然后将堆中的这个“aaa”对象的地址返回来，赋给 s 引用，导致 s 指向了堆中创建的这个“aaa”字符串对象。</li><li>如果没有，则首先在 String Pool 中创建一个“aaa“对象，然后再在堆中（heap）创 建一个”aaa“对象，然后将堆中的这个”aaa“对象的地址返回来，赋给 s 引用， 导致 s 指向了堆中所创建的这个”aaa“对象。</li></ul></li></ul></li></ul><h4 id="操作字符串方法"><a href="#操作字符串方法" class="headerlink" title="操作字符串方法"></a>操作字符串方法</h4><ul><li>字符串长度：length()</li><li>取字符串：charAt(int)</li><li>判断两个字符串内容是否相等：equals()</li><li>连接：concat(String)</li><li>判断是否以什么开头 / 结尾：startsWith(String); / endsWith(String)</li><li>模式匹配：indexOf(String, [int]) / lastIndexOf(String, [int])</li><li>取子字符串：substring(int beginIndex, [int endIndex])</li><li>修剪字符串左右两边空格：trim()</li><li>替换：replace(char oldChar, char newChar); / replaceAll(String regex, String replacement)</li></ul><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><h4 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h4><ul><li>初始化<ul><li>int[] a = new int[10];</li><li>int[] a = {1, 2, 3, 4, 5};</li></ul></li><li>常用属性：a.length</li></ul><h4 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h4><ul><li>初始化<ul><li> int[][] a = new int[10][5] ;</li><li> int[][] a = {{1, 2, 3}, {4, 5, 5}, {6, 7, 8}} ;</li></ul></li><li>常用属性<ul><li>a.length 多少行</li><li>a[i].length 多少列</li></ul></li></ul><h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><h4 id="三种循环"><a href="#三种循环" class="headerlink" title="三种循环"></a>三种循环</h4><ul><li>for</li><li>while</li><li>do……while</li></ul><h3 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h3><ul><li>if……else</li><li>switch……case……default</li></ul><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><ul><li><p>面向对象程序设计：OOP</p><ul><li>Object Oriented Programming（简称：OOP）：面向对象的程序设计</li><li>Object Oriented Design,（简称：OOD）：面向对象设计</li></ul></li><li><p>面向对象程序设计的三大基本特征</p><ul><li>继承（Inheritence）<ul><li>对象的一个新类可以从现有的类中派生，派生类可以从它的基类那继承方法和实例变量，且派生类可以修改或新增新的方法使之更适合特殊的需求。</li></ul></li><li>封装（Encapsulation）<ul><li>将客观事物抽象成类，每个类可以把自身数据和方法只让可信的类或对象操作，对不可信的进行信息隐藏。</li></ul></li><li>多态 （Polymorphism）<ul><li>允许不同类的对象对同一消息作出响应。不同对象调用相同方法即使参数也相同，最终表现行为是不一样的。</li></ul></li></ul></li><li><p>修饰符</p><ul><li>public: 对所有类可见</li><li>protected : 对同一包内的类和所有子类可见，不能修饰类</li><li>default: 默认访问修饰符，在同一包内可见</li><li>private: 在同一类内可见，不能修饰类</li></ul></li></ul><table><thead><tr><th>访问级别</th><th>访问控制修饰符</th><th>同类</th><th>同包不同类（不含子类）</th><th>同包子类</th><th>不同包不同类（不含子类）</th><th>不同包子类</th></tr></thead><tbody><tr><td>公开</td><td>public</td><td>√</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>受保护</td><td>protected</td><td>√</td><td>√</td><td>√</td><td>–</td><td>√（注意）</td></tr><tr><td>默认</td><td>default</td><td>√</td><td>√</td><td>√</td><td>–</td><td>–</td></tr><tr><td>私有</td><td>private</td><td>√</td><td>—</td><td>—</td><td>–</td><td>–</td></tr></tbody></table><h4 id="封装（Encapsulation）"><a href="#封装（Encapsulation）" class="headerlink" title="封装（Encapsulation）"></a>封装（Encapsulation）</h4><ul><li>利用抽象数据类型将数据和基于数据的操作封装在一起，使其构成一个不可分割的独立实体。数据被保护在抽象数据类型的内部，尽可能地隐藏内部的细节，只保留一些对外接口使之与外部发生联系。用户无需知道对象内部的细节，但可以通过对象对外提供的接口来访问该对象。</li></ul><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> gender;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getGender</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> gender == <span class="number">0</span> ? <span class="string">"man"</span> : <span class="string">"woman"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">18</span> &lt;= age &amp;&amp; age &lt;= <span class="number">50</span>) {</span><br><span class="line">            System.out.println(name + <span class="string">" is working very hard!"</span>);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            System.out.println(name + <span class="string">" can't work any more!"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h4 id="继承（Inheritence）"><a href="#继承（Inheritence）" class="headerlink" title="继承（Inheritence）"></a>继承（Inheritence）</h4><ul><li><p>继承实现了 <strong>IS-A</strong> 关系，例如 Cat 和 Animal 就是一种 IS-A 关系，因此 Cat 可以继承自 Animal，从而获得 Animal 非 private 的属性和方法。</p></li><li><p>继承应该遵循里氏替换原则，子类对象必须能够替换掉所有父类对象。</p></li><li><p>Cat 可以当做 Animal 来使用，也就是说可以使用 Animal 引用 Cat 对象。父类引用指向子类对象称为 <strong>向上转型</strong> 。</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Animal animal = new Cat();</span><br></pre></td></tr></table></figure></div></li></ul><h4 id="多态（Polymorphism）"><a href="#多态（Polymorphism）" class="headerlink" title="多态（Polymorphism）"></a>多态（Polymorphism）</h4><ul><li><p>父类型的引用可以指向子类的对象。</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">People people = new Man();</span><br></pre></td></tr></table></figure></div></li><li><p>当使用多态方式调用方法时，首先检查父类中是否有 sing()方法，如果没有则编译错误；如果有，再去调用子类的 sing()方法。</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Parent p = new Child();</span><br><span class="line">p.sing();</span><br></pre></td></tr></table></figure></div></li><li><p>强制类型转换</p><ul><li><p>向上类型转换（upcast）：比如说将 Cat 类型转换为 Animal 类型，即将<strong>子类型转换为父类型</strong>。对于向上类型转换，不需要显式指定。</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Animal animal = new Cat();</span><br><span class="line">animal.sing();</span><br></pre></td></tr></table></figure></div></li><li><p>向下类型转换（downcast）：比如将 Animal 类型转换为 Cat 类型。即将<strong>父类型转换为子类型</strong>。对于向下类型转换，必须要显式指定（必须要使用强制类型 转换）。</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Animal animal = new Cat();</span><br><span class="line">Cat cat = (Cat) animal;</span><br><span class="line">cat.sing();</span><br></pre></td></tr></table></figure></div></li></ul></li></ul><h3 id="抽象类与接口"><a href="#抽象类与接口" class="headerlink" title="抽象类与接口"></a>抽象类与接口</h3><ul><li><p>抽象类</p><ul><li>抽象类和抽象方法都使用 abstract 关键字进行声明。抽象类一般会包含抽象方法，抽象方法一定位于抽象类中。</li><li>抽象类和普通类最大的区别是，抽象类不能被实例化，需要继承抽象类才能实例化其子类。</li></ul></li><li><p>接口</p><ul><li>接口是抽象类的延伸，在 Java 8 之前，它可以看成是一个完全抽象的类，也就是说它不能有任何的方法实现。</li><li>从 Java 8 开始，接口也可以拥有默认的方法实现，这是因为不支持默认方法的接口的维护成本太高了。在 Java 8 之前，如果一个接口想要添加新的方法，那么要修改所有实现了该接口的类。</li><li>接口的成员(字段 + 方法)默认都是 public 的，并且不允许定义为 private 或者 protected。</li><li>接口的字段默认都是 static 和 final 的。</li></ul></li><li><p>对比</p><ul><li><p>抽象类提供了一种 IS-A 关系，即子类对象必须能够替换掉所有父类对象。接口只是提供一种方法实现契约，并不要求接口和实现接口的类具有 IS-A 关系。</p></li><li><p>一个类可以实现多个接口，但是不能继承多个抽象类。</p></li><li><p>接口的字段只能是 static 和 final 类型的，而抽象类的字段没有这种限制。</p></li><li><p>接口的成员只能是 public 的，而抽象类的成员可以有多种访问权限。</p></li></ul></li></ul><h3 id="重载与重写"><a href="#重载与重写" class="headerlink" title="重载与重写"></a>重载与重写</h3><ul><li><p>重载</p><p>存在于同一个类中，指一个方法与已经存在的方法名称上相同，但是参数类型、个数、顺序至少有一个不同。</p><p>应该注意的是，返回值不同，其它都相同不算是重载。</p></li><li><p>重写</p><p>存在于继承体系中，指子类实现了一个与父类在方法声明上完全相同的一个方法。</p><ul><li>子类方法的访问权限必须大于等于父类方法；</li><li>子类方法的返回类型必须是父类方法返回类型或为其子类型。</li></ul></li></ul><h3 id="Object-类"><a href="#Object-类" class="headerlink" title="Object 类"></a>Object 类</h3><ul><li><p>==</p><ul><li>对于原生数据类型来说，比较的是左右两边的值是否相等。</li><li>对于引用类型来说，比较左右两边的引用是否指向同一个对象，或者说左右两边的引用地址是否相同。</li></ul></li><li><p>equals</p><ul><li><p>用于检测一个对象是否等于另外一个对象</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public boolean equals(Object obj) {</span><br><span class="line">      return (this == obj);</span><br><span class="line">  }</span><br></pre></td></tr></table></figure></div></li></ul></li><li><p>源代码</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">package java.lang;</span><br><span class="line"></span><br><span class="line">public class Object {</span><br><span class="line"></span><br><span class="line">    private static native void registerNatives();</span><br><span class="line">    static {</span><br><span class="line">        registerNatives();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public final native Class&lt;?&gt; getClass();</span><br><span class="line"></span><br><span class="line">    public native int hashCode();</span><br><span class="line"></span><br><span class="line">    public boolean equals(Object obj) {</span><br><span class="line">        return (this == obj);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    protected native Object clone() throws CloneNotSupportedException;</span><br><span class="line"></span><br><span class="line">    public String toString() {</span><br><span class="line">        return getClass().getName() + "@" + Integer.toHexString(hashCode());</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public final native void notify();</span><br><span class="line"></span><br><span class="line">    public final native void notifyAll();</span><br><span class="line"></span><br><span class="line">    public final native void wait(long timeout) throws InterruptedException;</span><br><span class="line"></span><br><span class="line">    public final void wait(long timeout, int nanos) throws InterruptedException {</span><br><span class="line">        if (timeout &lt; 0) {</span><br><span class="line">            throw new IllegalArgumentException("timeout value is negative");</span><br><span class="line">        }</span><br><span class="line">        if (nanos &lt; 0 || nanos &gt; 999999) {</span><br><span class="line">            throw new IllegalArgumentException("nanosecond timeout value out of range");</span><br><span class="line">        }</span><br><span class="line">        if (nanos &gt; 0) {</span><br><span class="line">            timeout++;</span><br><span class="line">        }</span><br><span class="line">        wait(timeout);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public final void wait() throws InterruptedException {</span><br><span class="line">        wait(0);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    protected void finalize() throws Throwable { }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div></li></ul><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>String 被声明为 final，因此它不可被继承。</p><p>内部使用 char 数组存储数据，该数组被声明为 final，这意味着 value 数组初始化之后就不能再引用其它数组。并且 String 内部没有改变 value 数组的方法，因此可以保证 String 不可变。</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public final class String</span><br><span class="line">    implements java.io.Serializable, Comparable&lt;String&gt;, CharSequence {</span><br><span class="line">    /** The value is used for character storage. */</span><br><span class="line">    private final char value[];</span><br></pre></td></tr></table></figure></div><h4 id="String、StringBuffer、StringBuilder"><a href="#String、StringBuffer、StringBuilder" class="headerlink" title="String、StringBuffer、StringBuilder"></a>String、StringBuffer、StringBuilder</h4><ul><li>可变性<ul><li>String 不可变</li><li>StringBuffer 和 StringBuilder 可变</li></ul></li><li>线程安全<ul><li>String 不可变，因此是线程安全的</li><li>StringBuilder 不是线程安全的</li><li>StringBuffer 是线程安全的，内部使用 synchronized 进行同步，由于同步的原因较之 StringBuilder 慢</li></ul></li></ul>]]></content>
    
    
    <summary type="html">总结 Java 的学习历程</summary>
    
    
    
    <category term="技术学习" scheme="https://hexo.blog.lsilencej.top/categories/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Java" scheme="https://hexo.blog.lsilencej.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>三次异或操作实现两数的交换</title>
    <link href="https://hexo.blog.lsilencej.top/2021/11/07/%E4%B8%89%E6%AC%A1%E5%BC%82%E6%88%96%E6%93%8D%E4%BD%9C%E5%AE%9E%E7%8E%B0%E4%B8%A4%E6%95%B0%E7%9A%84%E4%BA%A4%E6%8D%A2-xor-swap/"/>
    <id>https://hexo.blog.lsilencej.top/2021/11/07/%E4%B8%89%E6%AC%A1%E5%BC%82%E6%88%96%E6%93%8D%E4%BD%9C%E5%AE%9E%E7%8E%B0%E4%B8%A4%E6%95%B0%E7%9A%84%E4%BA%A4%E6%8D%A2-xor-swap/</id>
    <published>2021-11-07T06:39:27.000Z</published>
    <updated>2022-05-02T07:52:39.531Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>学习 java 时无意间发现的一个不需要第三个变量实现两数交换的神奇操作</p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><ul><li>x = x ^ y;</li><li>y = x ^ y;</li><li>x = x ^ y;</li></ul><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><h3 id="异或"><a href="#异或" class="headerlink" title="异或"></a>异或</h3><ul><li>0 ^ 0 = 0;</li><li>0 ^ 1 = 1;</li><li>1 ^ 0 = 1;</li><li>1 ^ 1 = 0;</li></ul><p>总结起来就是相同取 0 ，不同取 1</p><p>假设：</p><p>x = 13， x 的二进制数为 1101;</p><p>y = 15， x 的二进制数为 1111;</p><p>对于 x 和 y 的二进制数来说，只有中间的一个数有差异，只需要改变中间这一个数即可</p><h3 id="第一次异或：x-x3D-x-y"><a href="#第一次异或：x-x3D-x-y" class="headerlink" title="第一次异或：x = x ^ y;"></a>第一次异或：x = x ^ y;</h3><p>x = x ^ y = 0010;</p><p>此时，异或的结果表示了原来的 x 和 y 的有所差异的值</p><h3 id="第二次异或：y-x3D-x-y"><a href="#第二次异或：y-x3D-x-y" class="headerlink" title="第二次异或：y = x ^ y;"></a>第二次异或：y = x ^ y;</h3><p>y = x ^ y = 1101;</p><p>x 此时是一个差异值，y 此时还是原值</p><p>如果 x 的位数是 0，则代表 x 的原值和 y 的这位的位数是一样的，不需要更改</p><p>如果 x 的位数是 1，则代表 x 的原值和 y 的这位的位数不一样的，需要更改</p><p>通过一次异或操作，把原来相同的位数保留，不相同的位数取反，此时 y 的值变成了 x 的原值</p><h3 id="第三次异或：x-x3D-x-y"><a href="#第三次异或：x-x3D-x-y" class="headerlink" title="第三次异或：x = x ^ y;"></a>第三次异或：x = x ^ y;</h3><p>x = x ^ y = 1111;</p><p>同理，x 仍然是一个差异值，y 此时是 x 的原值</p><p>通过异或操作，保留相同的位数，不相同的位数取反，x 变成了 y</p><h2 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h2><p>通过异或操作得到两数的二进制数中不同的位数，将其各自取反，相同的位数则保留</p>]]></content>
    
    
    <summary type="html">异或的神奇操作</summary>
    
    
    
    <category term="干货分享" scheme="https://hexo.blog.lsilencej.top/categories/%E5%B9%B2%E8%B4%A7%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="算法" scheme="https://hexo.blog.lsilencej.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>文章推荐系统（思路优化版）</title>
    <link href="https://hexo.blog.lsilencej.top/2021/10/26/%E6%96%87%E7%AB%A0%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%EF%BC%88%E6%80%9D%E8%B7%AF%E4%BC%98%E5%8C%96%E7%89%88%EF%BC%89-post-recommender-plus/"/>
    <id>https://hexo.blog.lsilencej.top/2021/10/26/%E6%96%87%E7%AB%A0%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%EF%BC%88%E6%80%9D%E8%B7%AF%E4%BC%98%E5%8C%96%E7%89%88%EF%BC%89-post-recommender-plus/</id>
    <published>2021-10-26T11:23:07.000Z</published>
    <updated>2022-09-03T02:06:30.324Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上次的文章推荐太过于简陋，而且限制太大，这次思路优化了一版，思路仍然是基于文章内容的推荐</p><h2 id="基于文章内容的推荐"><a href="#基于文章内容的推荐" class="headerlink" title="基于文章内容的推荐"></a>基于文章内容的推荐</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p><img lazyload="" src="/images/loading.svg" data-src="https://image.lsilencej.top/i/2022/04/18/625d28bf36029.png"></p><p>如图，对于用户 lsilencej 来说，假设他只看过 article1 和 article2，通过对比发现，article3 和 article1 的内容相似度很高，article4 和 article2 的相似度很高，于是，article3 和 article4 也被推荐给 lsilencej</p><h3 id="定义内容相似"><a href="#定义内容相似" class="headerlink" title="定义内容相似"></a>定义内容相似</h3><p>对于一篇新闻或者长文章来说，可以从文本特征几个方面去提取它的特征信息，进而将不同的新闻间的信息进行比较</p><p>常见的特征信息有：文本的长度、文本的所属类型（科技、游戏、社会等）、文本的来源（知乎、CSDN、人民日报等）、<strong>文本关键词</strong></p><p>文本的关键词可以大致概括文本主要内容</p><h3 id="提取文本关键词"><a href="#提取文本关键词" class="headerlink" title="提取文本关键词"></a>提取文本关键词</h3><p>TF-IDF ：TF-IDF是一种统计方法，用以评估一字词对于一个文件集或一个语料库中的其中一份文件的重要程度。字词的重要性随着它在文件中出现的次数成正比增加，但同时会随着它在语料库中出现的频率成反比下降。</p><p>当然，提到分词当然要祭出 jieba 库了，在 jieba 库中有 jieba.analyse.extract_tags，同样是基于 TF-IDF 算法实现</p><p>usage：keywords = jieba.analyse.extract_tags(article, topK=5, withWeight=True, allowPOS=(‘n’))</p><ul><li>article 代表要分词的文本</li><li>topK = 5 代表返回 5 个权重最大的关键词</li><li>withWeight = True 代表同时返回关键词的 TF-IDF 值</li><li>allowPOS = (“n”) 代表返回的均为名词</li></ul><p>默认使用的是 jieba 库中自带的语料库，当然也可以自定义语料库，具体参照 <a class="link" href="https://github.com/fxsjy/jieba">jieba 分词 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h3 id="用户偏好构建"><a href="#用户偏好构建" class="headerlink" title="用户偏好构建"></a>用户偏好构建</h3><p>用户喜好的关键词如何获取？</p><p>这里采用了一个简单的方法：从用户历史浏览记录中挖掘</p><h4 id="用户喜好关键词列表构建"><a href="#用户喜好关键词列表构建" class="headerlink" title="用户喜好关键词列表构建"></a>用户喜好关键词列表构建</h4><ul><li><p>在数据库中为每个用户维护一个关键词列表</p></li><li><p>每当用户浏览完某篇文章后，提取出该文章的关键词和 TF-IDF 值，并存入用户的关键词列表中</p><p>如：lsilencej 的关键词列表：{ 技术：20，代码：18，手机：12，游戏：10……}</p></li><li><p>如果关键词列表中已经存在相应关键词对应的 TF-IDF 值，则直接叠加或基于别的自定义权重加权进行叠加，以此来加强用户对该关键词的感兴趣程度</p></li><li><p>为了防止用户的推荐结果收敛到几个关键词上，可以选择为关键词列表设置一个衰减系数 λ ，定期对用户的关键词列表的 TF-IDF 值进行更新，减少关键词的收敛倾向</p></li></ul><h3 id="用户关键词与文本内容的拟合度"><a href="#用户关键词与文本内容的拟合度" class="headerlink" title="用户关键词与文本内容的拟合度"></a>用户关键词与文本内容的拟合度</h3><p>通过用户的关键词列表和文本的关键词列表，做两个 map 的键匹配即可</p><p>如果键相同，则值相乘，如果没有相同的键，则值为 0 ，多个相同键的值乘积相加，最后的结果即作为拟合度</p><p>对于新文章计算拟合度，将拟合度最高的几个文章推荐给用户</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p><strong>（文章关键词提取）article_keywords：</strong></p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"># coding = utf-8</span><br><span class="line">import sys</span><br><span class="line">import pymysql</span><br><span class="line">import json</span><br><span class="line">import jieba</span><br><span class="line">import jieba.analyse</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">np.set_printoptions(threshold = sys.maxsize)</span><br><span class="line">np.set_printoptions(suppress = True) # 不使用科学计数法</span><br><span class="line">mysql = pymysql.connect(host="bj-cynosdbmysql-grp-2r0nnbpu.sql.tencentcdb.com", port=22241, user="tmp", passwd="Aa1@0000", db="lsilencej_test_post", charset = "utf8") # 连接数据库</span><br><span class="line">cur = mysql.cursor() # 生成游标</span><br><span class="line"></span><br><span class="line">def text_keywords(article_id, article):</span><br><span class="line">keywords = jieba.analyse.extract_tags(article, topK=5, withWeight=True, allowPOS=('n'))</span><br><span class="line">words_weight = {keyword: weight * 100 for keyword, weight in keywords}</span><br><span class="line">str_keywords = json.dumps(words_weight, ensure_ascii = False)</span><br><span class="line">sql = "update article set keywords = '{str_keywords}' where id = {article_id}".format(str_keywords = str_keywords, article_id = article_id)</span><br><span class="line">cur.execute(sql)</span><br><span class="line">mysql.commit()</span><br><span class="line"># print("Complete")</span><br><span class="line"></span><br><span class="line">if __name__ == '__main__':</span><br><span class="line">sql = "select id, content from article where keywords is null"</span><br><span class="line">cur.execute(sql)</span><br><span class="line">results = cur.fetchall()</span><br><span class="line">for result in results:</span><br><span class="line">text_keywords(result[0], result[1])</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p><strong>（用户关键词列表生成）user_article：</strong></p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"># coding = utf-8</span><br><span class="line">import sys</span><br><span class="line">import pymysql</span><br><span class="line">import json</span><br><span class="line">import jieba</span><br><span class="line">import jieba.analyse</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">np.set_printoptions(threshold = sys.maxsize)</span><br><span class="line">np.set_printoptions(suppress = True) # 不使用科学计数法</span><br><span class="line">mysql = pymysql.connect(host="bj-cynosdbmysql-grp-2r0nnbpu.sql.tencentcdb.com", port=22241, user="tmp", passwd="Aa1@0000", db="lsilencej_test_post", charset = "utf8") # 连接数据库</span><br><span class="line">cur = mysql.cursor() # 生成游标</span><br><span class="line"></span><br><span class="line">def get_category(article_id):</span><br><span class="line">sql = "select category from article where id = {}".format(article_id)</span><br><span class="line">cur.execute(sql)</span><br><span class="line">result = cur.fetchone()</span><br><span class="line">return result[0]</span><br><span class="line"></span><br><span class="line">def user_dictionary_generator(user_result):</span><br><span class="line">histories = tuple(user_result[1].split(','))</span><br><span class="line">if (user_result[2] == None):</span><br><span class="line">dictionary = {}</span><br><span class="line">else:</span><br><span class="line">dictionary = json.loads(user_result[2])</span><br><span class="line">for history in histories:</span><br><span class="line">sql = "select keywords from article where id = {}".format(history)</span><br><span class="line">cur.execute(sql)</span><br><span class="line">result = cur.fetchone()</span><br><span class="line">dic_result = json.loads(result[0])</span><br><span class="line">print(type(dic_result))</span><br><span class="line">for key, value in dic_result.items():</span><br><span class="line">if key in dictionary.keys():</span><br><span class="line">dictionary[key] += value</span><br><span class="line">else:</span><br><span class="line">dictionary[key] = value</span><br><span class="line">print(dictionary)</span><br><span class="line">sql = "update user set user_dictionary = '{dictionary}' where id = {user_id}".format(dictionary = json.dumps(dictionary, ensure_ascii = False), user_id = user_result[0])</span><br><span class="line">cur.execute(sql)</span><br><span class="line">mysql.commit()</span><br><span class="line"># print("commit")</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == '__main__':</span><br><span class="line">sql = "select id, user_history, user_dictionary from user where updated = 'true'"</span><br><span class="line">cur.execute(sql)</span><br><span class="line">results = cur.fetchall()</span><br><span class="line">for result in results:</span><br><span class="line">user_dictionary_generator(result)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p><strong>（文章用户兴趣拟合度比较）article_comparator：</strong></p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"># coding = utf-8</span><br><span class="line">import sys</span><br><span class="line">import pymysql</span><br><span class="line">import json</span><br><span class="line">import jieba</span><br><span class="line">import jieba.analyse</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">np.set_printoptions(threshold = sys.maxsize)</span><br><span class="line">np.set_printoptions(suppress = True) # 不使用科学计数法</span><br><span class="line">mysql = pymysql.connect(host="bj-cynosdbmysql-grp-2r0nnbpu.sql.tencentcdb.com", port=22241, user="tmp", passwd="Aa1@0000", db="lsilencej_test_post", charset = "utf8") # 连接数据库</span><br><span class="line">cur = mysql.cursor() # 生成游标</span><br><span class="line"></span><br><span class="line">def user_recommend(user):</span><br><span class="line">dictionary = json.loads(user[2])</span><br><span class="line">histories = tuple(user[1].split(','))</span><br><span class="line">sql = "select id, keywords, content from article where id not in {}".format(tuple(histories))</span><br><span class="line">cur.execute(sql)</span><br><span class="line">results = cur.fetchall()</span><br><span class="line">topK = []</span><br><span class="line">rel = ()</span><br><span class="line">for result in results:</span><br><span class="line">keywords = json.loads(result[1])</span><br><span class="line">article_sum = 0</span><br><span class="line">for key, value in keywords.items():</span><br><span class="line">if key in dictionary.keys():</span><br><span class="line">article_sum += value * dictionary[key]</span><br><span class="line">rel = (article_sum, result[0], result[2])</span><br><span class="line">topK.append(rel)</span><br><span class="line">topK.sort(reverse = True) # 从大到小排序, article_sum为文章与用户字典的相关度, result[0]为推荐的文章id, result[2]为推荐的文章内容</span><br><span class="line">recommend = []</span><br><span class="line"># print(user[0], ':') # 这段打印的已经测试过了, 转字符串的程序还没测试</span><br><span class="line">for index in range(15):</span><br><span class="line"># print(topK[index])</span><br><span class="line">recommend.append(topK[index][1])</span><br><span class="line">str_recommend = ','.join([str(r) for r in recommend])</span><br><span class="line">sql = "update user set user_recommend = '{str_recommend}'".format(str_recommend = str_recommend)</span><br><span class="line">cur.execute(sql)</span><br><span class="line">mysql.commit()</span><br><span class="line"></span><br><span class="line">if __name__ == '__main__':</span><br><span class="line">sql = "select id, user_history, user_dictionary from user where recommend is null"</span><br><span class="line">cur.execute(sql)</span><br><span class="line">results = cur.fetchall()</span><br><span class="line">for result in results:</span><br><span class="line">user_recommend(result)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h2 id="最后的最后"><a href="#最后的最后" class="headerlink" title="最后的最后"></a>最后的最后</h2><p>本文旨在提供思路，如有需要可以参考源代码：<a class="link" href="https://github.com/lsilencej/Archive-Tools/tree/main/Article_Recommender">https://github.com/lsilencej/Archive-Tools/tree/main/Article_Recommender <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>]]></content>
    
    
    <summary type="html">继上次的文章推荐系统的思路优化版</summary>
    
    
    
    <category term="技术学习" scheme="https://hexo.blog.lsilencej.top/categories/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="NLP" scheme="https://hexo.blog.lsilencej.top/tags/NLP/"/>
    
  </entry>
  
  <entry>
    <title>利用朴素贝叶斯模型进行的中文文本类别预测</title>
    <link href="https://hexo.blog.lsilencej.top/2021/10/24/%E5%88%A9%E7%94%A8%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF%E6%A8%A1%E5%9E%8B%E8%BF%9B%E8%A1%8C%E7%9A%84%E4%B8%AD%E6%96%87%E6%96%87%E6%9C%AC%E7%B1%BB%E5%88%AB%E9%A2%84%E6%B5%8B-nbayes-post-classify/"/>
    <id>https://hexo.blog.lsilencej.top/2021/10/24/%E5%88%A9%E7%94%A8%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF%E6%A8%A1%E5%9E%8B%E8%BF%9B%E8%A1%8C%E7%9A%84%E4%B8%AD%E6%96%87%E6%96%87%E6%9C%AC%E7%B1%BB%E5%88%AB%E9%A2%84%E6%B5%8B-nbayes-post-classify/</id>
    <published>2021-10-24T13:21:36.000Z</published>
    <updated>2022-05-02T07:51:58.670Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这是之前的那个文章分类系统的完全重构的版本，之前那个预测的准确率不太行，为了让项目运行地更完善，决定通过训练nlp模型来更加精确地预测文章所属的类别，数据集是我们用爬虫精选的，模型也是通过训练集训练的，准确率能够达到 0.96，数据集的话就不分享了</p><h2 id="贝叶斯原理"><a href="#贝叶斯原理" class="headerlink" title="贝叶斯原理"></a>贝叶斯原理</h2><h3 id="贝叶斯公式："><a href="#贝叶斯公式：" class="headerlink" title="贝叶斯公式："></a>贝叶斯公式：</h3><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.668ex;" xmlns="http://www.w3.org/2000/svg" width="33.165ex" height="5.971ex" role="img" focusable="false" viewBox="0 -1460 14658.8 2639.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mo" transform="translate(751,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(1140,0)"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="TeXAtom" transform="translate(792,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mo" transform="translate(2226,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mi" transform="translate(2504,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mo" transform="translate(3254,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3920.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(4976.5,0)"><g data-mml-node="mrow" transform="translate(1712.2,710)"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mo" transform="translate(751,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(1140,0)"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="TeXAtom" transform="translate(792,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mo" transform="translate(2226,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(2615,0)"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mo" transform="translate(3366,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(3755,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mo" transform="translate(4505,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="msub" transform="translate(4783,0)"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="TeXAtom" transform="translate(792,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mo" transform="translate(5868.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mrow" transform="translate(220,-749.6)"><g data-mml-node="munderover"><g data-mml-node="mo"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1089,477.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(1089,-285.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(412,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1190,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mi" transform="translate(2500.7,0)"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mo" transform="translate(3251.7,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(3640.7,0)"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="TeXAtom" transform="translate(792,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g><g data-mml-node="mo" transform="translate(4774,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(5163,0)"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mo" transform="translate(5914,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(6303,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mo" transform="translate(7053,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="msub" transform="translate(7331,0)"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="TeXAtom" transform="translate(792,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g><g data-mml-node="mo" transform="translate(8464.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(8853.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><rect width="9442.3" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></p><h3 id="朴素贝叶斯分类器："><a href="#朴素贝叶斯分类器：" class="headerlink" title="朴素贝叶斯分类器："></a>朴素贝叶斯分类器：</h3><p>朴素贝叶斯是一个概率分类器，它通过计算两个不同类别 X 和 Y 之间的所属同类的可能性来进行类别的预测估计，P（Y|X）为 Y 的<strong>后验概率</strong>，P（Y）为 Y 的<strong>先验概率</strong></p><p>将一系列训练数据通过贝叶斯公式进行计算，得出一个个P（Y|X）后验概率，分类时，对于实例x，比较所有的P（Y|x），最大的概率的 Y 即为实例 x 的分类</p><p>后验概率：<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.172ex;" xmlns="http://www.w3.org/2000/svg" width="24.682ex" height="5.475ex" role="img" focusable="false" viewBox="0 -1460 10909.6 2420"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mo" transform="translate(751,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1140,0)"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g><g data-mml-node="mo" transform="translate(1903,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mi" transform="translate(2181,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(3033,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3699.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(4755.6,0)"><g data-mml-node="mrow" transform="translate(220,710)"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mo" transform="translate(751,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1140,0)"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g><g data-mml-node="mo" transform="translate(1903,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(2292,0)"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mo" transform="translate(3043,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(3432,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(4284,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mi" transform="translate(4562,0)"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g><g data-mml-node="mo" transform="translate(5325,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mrow" transform="translate(1886.5,-710)"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mo" transform="translate(751,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1140,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(1992,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><rect width="5914" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container><br>P（Y）可以通过数据集进行估计，P（X）为常数，在比较中可以忽略</p><h3 id="文本分类算法："><a href="#文本分类算法：" class="headerlink" title="文本分类算法："></a>文本分类算法：</h3><p>朴素贝叶斯分类器是一种有监督的分类器，即需要给出训练集并根据需要打好标签</p><p>对于每一个训练样本，均生成一个属性向量，各个属性相互独立，如文章的文本特征向量</p><p>计算 P（x|Y）条件概率，P（x|Y）= 包含此单词的文章总数 / 该类别下的文章数量</p><p>根据贝叶斯公式求出 P（Y|X），预测文本分类</p><h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><h4 id="预处理："><a href="#预处理：" class="headerlink" title="预处理："></a>预处理：</h4><ul><li>训练集语料库</li><li>测试集语料库</li></ul><p>语料库可以根据需要自己生成，本文代码是基于复旦大学语料库的格式基础写的</p><p>复旦大学语料库：<a class="link" href="http://download.csdn.net/detail/github_36326955/9747927">http://download.csdn.net/detail/github_36326955/9747927 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>语料库均为已分类好的文章作为预处理数据</p><h4 id="中文分词："><a href="#中文分词：" class="headerlink" title="中文分词："></a>中文分词：</h4><p>采用的是 <a class="link" href="https://github.com/fxsjy/jieba">jieba 分词 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><ul><li><code>jieba.cut</code> 方法接受四个输入参数: 需要分词的字符串；cut_all 参数用来控制是否采用全模式；HMM 参数用来控制是否使用 HMM 模型；use_paddle 参数用来控制是否使用paddle模式下的分词模式，paddle模式采用延迟加载方式，通过enable_paddle接口安装paddlepaddle-tiny，并且import相关代码；</li><li><code>jieba.cut_for_search</code> 方法接受两个参数：需要分词的字符串；是否使用 HMM 模型。该方法适合用于搜索引擎构建倒排索引的分词，粒度比较细</li><li>待分词的字符串可以是 unicode 或 UTF-8 字符串、GBK 字符串。注意：不建议直接输入 GBK 字符串，可能无法预料地错误解码成 UTF-8</li><li><code>jieba.cut</code> 以及 <code>jieba.cut_for_search</code> 返回的结构都是一个可迭代的 generator，可以使用 for 循环来获得分词后得到的每一个词语(unicode)，或者用</li><li><code>jieba.lcut</code> 以及 <code>jieba.lcut_for_search</code> 直接返回 list</li><li><code>jieba.Tokenizer(dictionary=DEFAULT_DICT)</code> 新建自定义分词器，可用于同时使用不同词典。<code>jieba.dt</code> 为默认分词器，所有全局分词相关函数都是该分词器的映射。</li></ul><p><strong>curpus_segment：</strong></p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: UTF-8 -*-</span><br><span class="line">import os</span><br><span class="line">import jieba</span><br><span class="line"></span><br><span class="line">def readfile(path): # 读取文件</span><br><span class="line">with open(path, "rb") as fp:</span><br><span class="line">content = fp.read()</span><br><span class="line">return content</span><br><span class="line"></span><br><span class="line">def savefile(path, content): # 保存文件</span><br><span class="line">with open(path, "wb") as fp:</span><br><span class="line">fp.write(content)</span><br><span class="line"></span><br><span class="line">def corpus_segment(corpus_path, corpus_seg_path):</span><br><span class="line">catelist = os.listdir(corpus_path) # 获取 corpus_path 下所有子目录</span><br><span class="line">for cate in catelist:</span><br><span class="line">cate_path = corpus_path + cate + '/'</span><br><span class="line">cate_seg_path = corpus_seg_path + cate + '/'</span><br><span class="line">if not os.path.exists(cate_seg_path): # 不存在分词目录则创建</span><br><span class="line">os.makedirs(cate_seg_path)</span><br><span class="line">textlist = os.listdir(cate_path) # 获取一个分类下的所有文本</span><br><span class="line">for text in textlist:</span><br><span class="line">text_path = cate_path + text</span><br><span class="line">content = readfile(text_path)</span><br><span class="line">content = content.replace('\r\n'.encode('utf-8'), ''.encode('utf-8')).strip() # 删除换行</span><br><span class="line">content = content.replace(' '.encode('utf-8'), ''.encode('utf-8')).strip() # 删除空行、多余的空格</span><br><span class="line">content_seg = jieba.cut(content)  # 分词</span><br><span class="line">savefile(cate_seg_path + text, ' '.join(content_seg).encode('utf-8'))</span><br><span class="line">print("分词结束")</span><br><span class="line"></span><br><span class="line">if __name__ == "__main__":</span><br><span class="line"># 对训练集进行分词</span><br><span class="line">corpus_path = "train_corpus/" # 未分词已分类的语料库</span><br><span class="line">corpus_seg_path = "train_corpus_seg/" # 已分词已分类的语料库</span><br><span class="line">corpus_segment(corpus_path, corpus_seg_path)</span><br><span class="line"></span><br><span class="line"># 对测试集进行分词</span><br><span class="line">corpus_path = "test_corpus/" # 未分词已分类的语料库</span><br><span class="line">corpus_seg_path = "test_corpus_seg/" # 已分词已分类的语料库</span><br><span class="line">corpus_segment(corpus_path, corpus_seg_path)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h4 id="Bunch-类型转换："><a href="#Bunch-类型转换：" class="headerlink" title="Bunch 类型转换："></a>Bunch 类型转换：</h4><p>对于每个分词的数据集，为了把它们变成一个个变量，可以转换为 Bunch 类型</p><p><strong>corpus_to_Bunch：</strong></p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: UTF-8 -*-  </span><br><span class="line">import os</span><br><span class="line">import pickle</span><br><span class="line">from sklearn.datasets._base import Bunch</span><br><span class="line"></span><br><span class="line">def readfile(path): # 读取文件</span><br><span class="line">with open(path, "rb") as fp:</span><br><span class="line">content = fp.read()</span><br><span class="line">return content</span><br><span class="line"></span><br><span class="line">def corpus2Bunch(wordbag_path, seg_path):</span><br><span class="line">catelist = os.listdir(seg_path) # 获取分类信息</span><br><span class="line">bunch = Bunch(target_name = [], label = [], filenames = [], contents = [])</span><br><span class="line">bunch.target_name.extend(catelist) # 填充 bunch 中的 tatget_name list</span><br><span class="line">for cate in catelist:</span><br><span class="line">cate_path = seg_path + cate + '/'</span><br><span class="line">textlist = os.listdir(cate_path)</span><br><span class="line">for text in textlist:</span><br><span class="line">text_path = cate_path + text</span><br><span class="line">bunch.label.append(cate)</span><br><span class="line">bunch.filenames.append(text_path)</span><br><span class="line">bunch.contents.append(readfile(text_path))</span><br><span class="line">with open(wordbag_path, "wb") as fp:</span><br><span class="line">pickle.dump(bunch, fp)</span><br><span class="line">print("构建文本对象结束")</span><br><span class="line"></span><br><span class="line">if __name__ == "__main__":</span><br><span class="line"># 对训练集进行Bunch化操作</span><br><span class="line">wordbag_path = "train_word_bag/train_set.dat" # Bunch 存储路径</span><br><span class="line">seg_path = "train_corpus_seg/" # 已分词已分类的语料库</span><br><span class="line">corpus2Bunch(wordbag_path, seg_path)</span><br><span class="line"></span><br><span class="line"># 对测试集进行Bunch化操作</span><br><span class="line">wordbag_path = "test_word_bag/test_set.dat" # Bunch 存储路径</span><br><span class="line">seg_path = "test_corpus_seg/" # 已分词已分类的语料库</span><br><span class="line">corpus2Bunch(wordbag_path, seg_path)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h4 id="创建-TF-IDF-词向量空间模型："><a href="#创建-TF-IDF-词向量空间模型：" class="headerlink" title="创建 TF-IDF 词向量空间模型："></a>创建 TF-IDF 词向量空间模型：</h4><p>数据集变成变量了，接下来是结构化的过程，我们需要把所有的词向量放入一个词向量空间当中，这里我们采用的是 TF-IDF 的权重策略，生成一个个权重矩阵，并存入文件中，tfdifspace.dat 即生成的实例文件，里面包括词向量的空间坐标和 TF-IDF 的权重矩阵</p><p><strong>TFIDF_space：</strong></p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: UTF-8 -*-</span><br><span class="line">import pickle</span><br><span class="line">from sklearn.datasets._base import Bunch</span><br><span class="line">from sklearn.feature_extraction.text import TfidfVectorizer</span><br><span class="line"></span><br><span class="line">def readfile(path): # 读取文件</span><br><span class="line">with open(path, "rb") as fp:</span><br><span class="line">content = fp.read()</span><br><span class="line">return content</span><br><span class="line"></span><br><span class="line">def readbunchobj(path):</span><br><span class="line">with open(path, "rb") as fp:</span><br><span class="line">bunch = pickle.load(fp)</span><br><span class="line">return bunch</span><br><span class="line"></span><br><span class="line">def writebunchobj(path, bunchobj):</span><br><span class="line">with open(path, "wb") as fp:</span><br><span class="line">pickle.dump(bunchobj, fp)</span><br><span class="line"></span><br><span class="line">def vector_space(stopword_path, bunch_path, space_path, train_tfidf_path = None):</span><br><span class="line">stopwordlist = readfile(stopword_path).splitlines()</span><br><span class="line">bunch = readbunchobj(bunch_path)</span><br><span class="line">tfidfspace = Bunch(target_name = bunch.target_name, label = bunch.label, filenames = bunch.filenames, tdm = [], vocabulary = {})</span><br><span class="line">'''</span><br><span class="line">tdmTF-IDF矩阵</span><br><span class="line">vocabulary 词典索引</span><br><span class="line">'''</span><br><span class="line">if train_tfidf_path is not None:</span><br><span class="line">trainbunch = readbunchobj(train_tfidf_path)</span><br><span class="line">tfidfspace.vocabulary = trainbunch.vocabulary</span><br><span class="line">vectorizer = TfidfVectorizer(stop_words = stopwordlist, sublinear_tf = True, max_df = 0.5, vocabulary = trainbunch.vocabulary)</span><br><span class="line">'''</span><br><span class="line">sublinear_tf 计算tf值采用亚线性策略</span><br><span class="line">max_df 设置阙值，达到直接加入临时停用词</span><br><span class="line">'''</span><br><span class="line">tfidfspace.tdm = vectorizer.fit_transform(bunch.contents)</span><br><span class="line">else:</span><br><span class="line">vectorizer = TfidfVectorizer(stop_words = stopwordlist, sublinear_tf = True, max_df = 0.5)</span><br><span class="line">tfidfspace.tdm = vectorizer.fit_transform(bunch.contents)</span><br><span class="line">tfidfspace.vocabulary = vectorizer.vocabulary_ # vocabulary_ 向量空间坐标轴信息</span><br><span class="line">writebunchobj(space_path, tfidfspace)</span><br><span class="line">print("tf-idf词向量空间实例创建成功！！！")</span><br><span class="line"></span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">stopword_path = "train_word_bag/stopwords.txt"</span><br><span class="line">bunch_path = "train_word_bag/train_set.dat"</span><br><span class="line">space_path = "train_word_bag/tfidfspace.dat"</span><br><span class="line">vector_space(stopword_path, bunch_path, space_path)</span><br><span class="line"></span><br><span class="line">bunch_path = "test_word_bag/test_set.dat"</span><br><span class="line">space_path = "test_word_bag/testspace.dat"</span><br><span class="line">train_tfidf_path = "train_word_bag/tfidfspace.dat"</span><br><span class="line">vector_space(stopword_path, bunch_path, space_path, train_tfidf_path)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h4 id="贝叶斯分类器预测："><a href="#贝叶斯分类器预测：" class="headerlink" title="贝叶斯分类器预测："></a>贝叶斯分类器预测：</h4><p><strong>NBayes_Predict：</strong></p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: UTF-8 -*-</span><br><span class="line">import pickle</span><br><span class="line">from sklearn.naive_bayes import MultinomialNB  # 导入多项式贝叶斯算法</span><br><span class="line">from sklearn import metrics</span><br><span class="line"></span><br><span class="line">def readbunchobj(path):</span><br><span class="line">with open(path, "rb") as fp:</span><br><span class="line">bunch = pickle.load(fp)</span><br><span class="line">return bunch</span><br><span class="line"></span><br><span class="line"># 导入训练集</span><br><span class="line">trainpath = "train_word_bag/tfidfspace.dat"</span><br><span class="line">train_set = readbunchobj(trainpath)</span><br><span class="line"></span><br><span class="line">#导入测试集</span><br><span class="line">testpath = "test_word_bag/testspace.dat"</span><br><span class="line">test_set = readbunchobj(testpath)</span><br><span class="line"></span><br><span class="line"># 训练分类器：输入词袋向量和分类标签，alpha:0.001 alpha越小，迭代次数越多，精度越高</span><br><span class="line">clf = MultinomialNB(alpha=0.001).fit(train_set.tdm, train_set.label)</span><br><span class="line"></span><br><span class="line"># 预测分类结果</span><br><span class="line">predicted = clf.predict(test_set.tdm)</span><br><span class="line">for flabel, file_name, expct_cate in zip(test_set.label, test_set.filenames, predicted):</span><br><span class="line">    if flabel != expct_cate:</span><br><span class="line">        print(file_name, ": 实际类别:", flabel, " --&gt;预测类别:", expct_cate)</span><br><span class="line">print("预测完毕!!!")</span><br><span class="line"></span><br><span class="line"># 计算分类精度：</span><br><span class="line">def metrics_result(actual, predict):</span><br><span class="line">    print('精度:{0:.3f}'.format(metrics.precision_score(actual, predict, average='weighted')))</span><br><span class="line">    print('召回:{0:0.3f}'.format(metrics.recall_score(actual, predict, average='weighted')))</span><br><span class="line">    print('f1-score:{0:.3f}'.format(metrics.f1_score(actual, predict, average='weighted')))</span><br><span class="line">metrics_result(test_set.label, predicted)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>整体来说流程比较清晰，数据可观，生成的模型预测率较准，不过需要大量的数据支持而且每类分类总数，文章字数应相当，不然会造成文章多或者文章字数多的概率大，导致大量文章预测错误</p><p>本项目文章源代码在 github 上已开源：<a class="link" href="https://github.com/lsilencej/Archive-Tools/tree/main/Bayes_Category">https://github.com/lsilencej/Archive-Tools/tree/main/Bayes_Category <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h4 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h4><p><a class="link" href="https://blog.csdn.net/kexinxin1/article/details/93013775">基于朴素贝叶斯的文本分类算法 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p><a class="link" href="https://blog.csdn.net/github_36326955/article/details/54891204">python 中文文本分类 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>]]></content>
    
    
    <summary type="html">朴素贝叶斯分类器</summary>
    
    
    
    <category term="技术学习" scheme="https://hexo.blog.lsilencej.top/categories/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="NLP" scheme="https://hexo.blog.lsilencej.top/tags/NLP/"/>
    
  </entry>
  
</feed>
